"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/./node_modules/@portabletext/block-tools/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@portabletext/block-tools/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockContentFeatures: () => (/* binding */ getBlockContentFeatures),\n/* harmony export */   htmlToBlocks: () => (/* binding */ htmlToBlocks),\n/* harmony export */   normalizeBlock: () => (/* binding */ normalizeBlock),\n/* harmony export */   randomKey: () => (/* binding */ randomKey)\n/* harmony export */ });\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n\n\n\n\n\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\";\n}\nconst objectToString = Object.prototype.toString;\nfunction resolveJsType(val) {\n  switch (objectToString.call(val)) {\n    case \"[object Function]\":\n      return \"function\";\n    case \"[object Date]\":\n      return \"date\";\n    case \"[object RegExp]\":\n      return \"regexp\";\n    case \"[object Arguments]\":\n      return \"arguments\";\n    case \"[object Array]\":\n      return \"array\";\n    case \"[object String]\":\n      return \"string\";\n  }\n  return val === null ? \"null\" : val === void 0 ? \"undefined\" : val && typeof val == \"object\" && \"nodeType\" in val && val.nodeType === 1 ? \"element\" : val === Object(val) ? \"object\" : typeof val;\n}\nvar s = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, c = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 };\nnew Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nObject.fromEntries(Object.entries(c).map((t) => t.reverse()));\nObject.fromEntries(Object.entries(s).map((t) => t.reverse()));\nvar S = `${Object.values(s).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n  var e;\n  return { cleaned: t.replace(f, \"\"), encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\" };\n}\nfunction O(t) {\n  return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nconst PRESERVE_WHITESPACE_TAGS = [\"pre\", \"textarea\", \"code\"], BLOCK_DEFAULT_STYLE = \"normal\", DEFAULT_BLOCK = Object.freeze({\n  _type: \"block\",\n  markDefs: [],\n  style: BLOCK_DEFAULT_STYLE\n}), DEFAULT_SPAN = Object.freeze({\n  _type: \"span\",\n  marks: []\n}), HTML_BLOCK_TAGS = {\n  p: DEFAULT_BLOCK,\n  blockquote: { ...DEFAULT_BLOCK, style: \"blockquote\" }\n}, HTML_SPAN_TAGS = {\n  span: { object: \"text\" }\n}, HTML_LIST_CONTAINER_TAGS = {\n  ol: { object: null },\n  ul: { object: null }\n}, HTML_HEADER_TAGS = {\n  h1: { ...DEFAULT_BLOCK, style: \"h1\" },\n  h2: { ...DEFAULT_BLOCK, style: \"h2\" },\n  h3: { ...DEFAULT_BLOCK, style: \"h3\" },\n  h4: { ...DEFAULT_BLOCK, style: \"h4\" },\n  h5: { ...DEFAULT_BLOCK, style: \"h5\" },\n  h6: { ...DEFAULT_BLOCK, style: \"h6\" }\n}, HTML_MISC_TAGS = {\n  br: { ...DEFAULT_BLOCK, style: BLOCK_DEFAULT_STYLE }\n}, HTML_DECORATOR_TAGS = {\n  b: \"strong\",\n  strong: \"strong\",\n  i: \"em\",\n  em: \"em\",\n  u: \"underline\",\n  s: \"strike-through\",\n  strike: \"strike-through\",\n  del: \"strike-through\",\n  code: \"code\",\n  sup: \"sup\",\n  sub: \"sub\",\n  ins: \"ins\",\n  mark: \"mark\",\n  small: \"small\"\n}, HTML_LIST_ITEM_TAGS = {\n  li: {\n    ...DEFAULT_BLOCK,\n    style: BLOCK_DEFAULT_STYLE,\n    level: 1,\n    listItem: \"bullet\"\n  }\n}, ELEMENT_MAP = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_SPAN_TAGS,\n  ...HTML_LIST_CONTAINER_TAGS,\n  ...HTML_LIST_ITEM_TAGS,\n  ...HTML_HEADER_TAGS,\n  ...HTML_MISC_TAGS\n};\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__(\n  Object.values(ELEMENT_MAP).filter((tag) => \"style\" in tag).map((tag) => tag.style)\n);\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__(\n  Object.values(HTML_DECORATOR_TAGS)\n);\nfunction blockContentFeatures(blockContentType) {\n  if (!blockContentType)\n    throw new Error(\"Parameter 'blockContentType' required\");\n  const blockType = blockContentType.of.find(findBlockType);\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockSchemaType)(blockType))\n    throw new Error(\"'block' type is not defined in this schema (required).\");\n  const ofType = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockChildrenObjectField)?.type?.of;\n  if (!ofType)\n    throw new Error(\"No `of` declaration found for blocks `children` field\");\n  const spanType = ofType.find(\n    (member) => member.name === \"span\"\n  );\n  if (!spanType)\n    throw new Error(\n      \"No `span` type found in `block` schema type `children` definition\"\n    );\n  const inlineObjectTypes = ofType.filter(\n    (inlineType) => inlineType.name !== \"span\" && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isObjectSchemaType)(inlineType)\n  ), blockObjectTypes = blockContentType.of.filter(\n    (memberType) => memberType.name !== blockType.name && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isObjectSchemaType)(memberType)\n  );\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    annotations: resolveEnabledAnnotationTypes(spanType),\n    lists: resolveEnabledListItems(blockType),\n    types: {\n      block: blockContentType,\n      span: spanType,\n      inlineObjects: inlineObjectTypes,\n      blockObjects: blockObjectTypes\n    }\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockStyleObjectField);\n  if (!styleField)\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\"\n    );\n  const textStyles = getTitledListValuesFromEnumListOptions(\n    styleField.type.options\n  );\n  if (textStyles.length === 0)\n    throw new Error(\n      \"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    );\n  return textStyles;\n}\nfunction resolveEnabledAnnotationTypes(spanType) {\n  return spanType.annotations.map((annotation) => ({\n    title: annotation.title,\n    type: annotation,\n    value: annotation.name,\n    icon: annotation.icon\n  }));\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockListObjectField);\n  if (!listField)\n    throw new Error(\n      \"A field with name 'list' is not defined in the block type (required).\"\n    );\n  const listItems = getTitledListValuesFromEnumListOptions(\n    listField.type.options\n  );\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction getTitledListValuesFromEnumListOptions(options) {\n  const list = options ? options.list : void 0;\n  return Array.isArray(list) ? list.map(\n    (item) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isTitledListValue)(item) ? item : { title: item, value: item }\n  ) : [];\n}\nconst _XPathResult = {\n  ANY_TYPE: 0,\n  NUMBER_TYPE: 1,\n  STRING_TYPE: 2,\n  BOOLEAN_TYPE: 3,\n  UNORDERED_NODE_ITERATOR_TYPE: 4,\n  ORDERED_NODE_ITERATOR_TYPE: 5,\n  UNORDERED_NODE_SNAPSHOT_TYPE: 6,\n  ORDERED_NODE_SNAPSHOT_TYPE: 7,\n  ANY_UNORDERED_NODE_TYPE: 8,\n  FIRST_ORDERED_NODE_TYPE: 9\n};\nvar preprocessGDocs = (_html, doc, options) => {\n  const whitespaceOnPasteMode = options?.unstable_whitespaceOnPasteMode || \"preserve\";\n  let gDocsRootOrSiblingNode = doc.evaluate(\n    '//*[@id and contains(@id, \"docs-internal-guid\")]',\n    doc,\n    null,\n    _XPathResult.ORDERED_NODE_ITERATOR_TYPE,\n    null\n  ).iterateNext();\n  if (gDocsRootOrSiblingNode) {\n    const isWrappedRootTag = tagName(gDocsRootOrSiblingNode) === \"b\";\n    switch (isWrappedRootTag || (gDocsRootOrSiblingNode = doc.body), whitespaceOnPasteMode) {\n      case \"normalize\":\n        normalizeWhitespace(gDocsRootOrSiblingNode);\n        break;\n      case \"remove\":\n        removeAllWhitespace(gDocsRootOrSiblingNode);\n        break;\n    }\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--) {\n      const elm = childNodes.snapshotItem(i);\n      elm?.setAttribute(\"data-is-google-docs\", \"true\"), (elm?.parentElement === gDocsRootOrSiblingNode || !isWrappedRootTag && elm.parentElement === doc.body) && (elm?.setAttribute(\"data-is-root-node\", \"true\"), tagName(elm)), tagName(elm) === \"li\" && elm.firstChild && tagName(elm?.firstChild) === \"img\" && elm.removeChild(elm.firstChild);\n    }\n    return isWrappedRootTag && doc.body.firstElementChild?.replaceWith(\n      ...Array.from(gDocsRootOrSiblingNode.childNodes)\n    ), doc;\n  }\n  return doc;\n};\nconst unwantedWordDocumentPaths = [\n  \"/html/text()\",\n  \"/html/head/text()\",\n  \"/html/body/text()\",\n  \"/html/body/ul/text()\",\n  \"/html/body/ol/text()\",\n  \"//comment()\",\n  \"//style\",\n  \"//xml\",\n  \"//script\",\n  \"//meta\",\n  \"//link\"\n];\nvar preprocessHTML = (_html, doc) => {\n  const bodyTextNodes = doc.evaluate(\n    \"/html/body/text()\",\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = bodyTextNodes.snapshotLength - 1; i >= 0; i--) {\n    const node = bodyTextNodes.snapshotItem(i), text = node.textContent || \"\";\n    if (text.replace(/[^\\S\\n]+$/g, \"\")) {\n      const newNode = doc.createElement(\"span\");\n      newNode.appendChild(doc.createTextNode(text)), node.parentNode?.replaceChild(newNode, node);\n    } else\n      node.parentNode?.removeChild(node);\n  }\n  const unwantedNodes = doc.evaluate(\n    unwantedWordDocumentPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted && unwanted.parentNode?.removeChild(unwanted);\n  }\n  return doc;\n}, preprocessNotion = (html, doc) => {\n  const NOTION_REGEX = /<!-- notionvc:.*?-->/g;\n  if (html.match(NOTION_REGEX)) {\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--)\n      childNodes.snapshotItem(i)?.setAttribute(\"data-is-notion\", \"true\");\n    return doc;\n  }\n  return doc;\n}, preprocessWhitespace = (_2, doc) => {\n  function processNode(node) {\n    if (node.nodeType === _XPathResult.BOOLEAN_TYPE && !PRESERVE_WHITESPACE_TAGS.includes(\n      node.parentElement?.tagName.toLowerCase() || \"\"\n    ))\n      node.textContent = node.textContent?.replace(/\\s\\s+/g, \" \").replace(/[\\r\\n]+/g, \" \") || \"\";\n    else\n      for (let i = 0; i < node.childNodes.length; i++)\n        processNode(node.childNodes[i]);\n  }\n  return processNode(doc.body), doc;\n};\nconst WORD_HTML_REGEX = /(class=\"?Mso|style=(?:\"|')[^\"]*?\\bmso-|w:WordDocument|<o:\\w+>|<\\/font>)/, unwantedPaths = [\n  \"//o:p\",\n  \"//span[@style='mso-list:Ignore']\",\n  \"//span[@style='mso-list: Ignore']\"\n], mappedPaths = [\n  \"//p[@class='MsoTocHeading']\",\n  \"//p[@class='MsoTitle']\",\n  \"//p[@class='MsoToaHeading']\",\n  \"//p[@class='MsoSubtitle']\",\n  \"//span[@class='MsoSubtleEmphasis']\",\n  \"//span[@class='MsoIntenseEmphasis']\"\n], elementMap = {\n  MsoTocHeading: [\"h3\"],\n  MsoTitle: [\"h1\"],\n  MsoToaHeading: [\"h2\"],\n  MsoSubtitle: [\"h5\"],\n  MsoSubtleEmphasis: [\"span\", \"em\"],\n  MsoIntenseEmphasis: [\"span\", \"em\", \"strong\"]\n  // Remove cruft\n};\nfunction isWordHtml(html) {\n  return WORD_HTML_REGEX.test(html);\n}\nvar preprocessWord = (html, doc) => {\n  if (!isWordHtml(html))\n    return doc;\n  const unwantedNodes = doc.evaluate(\n    unwantedPaths.join(\"|\"),\n    doc,\n    (prefix) => prefix === \"o\" ? \"urn:schemas-microsoft-com:office:office\" : null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted?.parentNode && unwanted.parentNode.removeChild(unwanted);\n  }\n  const mappedElements = doc.evaluate(\n    mappedPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = mappedElements.snapshotLength - 1; i >= 0; i--) {\n    const mappedElm = mappedElements.snapshotItem(i), tags = elementMap[mappedElm.className], text = doc.createTextNode(mappedElm.textContent || \"\");\n    if (!tags)\n      continue;\n    const parentElement = doc.createElement(tags[0]);\n    let parent = parentElement, child = parentElement;\n    tags.slice(1).forEach((tag) => {\n      child = doc.createElement(tag), parent.appendChild(child), parent = child;\n    }), child.appendChild(text), mappedElm?.parentNode?.replaceChild(parentElement, mappedElm);\n  }\n  return doc;\n}, preprocessors = [\n  preprocessWhitespace,\n  preprocessNotion,\n  preprocessWord,\n  preprocessGDocs,\n  preprocessHTML\n];\nfunction createRuleOptions(blockContentType) {\n  const features = blockContentFeatures(blockContentType), enabledBlockStyles = features.styles.map(\n    (item) => item.value || item.title\n  ), enabledSpanDecorators = features.decorators.map(\n    (item) => item.value || item.title\n  ), enabledBlockAnnotations = features.annotations.map(\n    (item) => item.value || item.title || \"\"\n  ), enabledListTypes = features.lists.map(\n    (item) => item.value || item.title || \"\"\n  );\n  return {\n    enabledBlockStyles,\n    enabledSpanDecorators,\n    enabledBlockAnnotations,\n    enabledListTypes\n  };\n}\nfunction tagName(el) {\n  if (el && \"tagName\" in el)\n    return el.tagName.toLowerCase();\n}\nfunction preprocess(html, parseHtml, options) {\n  const cleanHTML = O(html), doc = parseHtml(normalizeHtmlBeforePreprocess(cleanHTML));\n  return preprocessors.forEach((processor) => {\n    processor(cleanHTML, doc, options);\n  }), doc;\n}\nfunction normalizeHtmlBeforePreprocess(html) {\n  return html.trim();\n}\nfunction defaultParseHtml() {\n  if (resolveJsType(DOMParser) === \"undefined\")\n    throw new Error(\n      \"The native `DOMParser` global which the `Html` deserializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.\"\n    );\n  return (html) => new DOMParser().parseFromString(html, \"text/html\");\n}\nfunction flattenNestedBlocks(blocks2) {\n  let depth = 0;\n  const flattened = [], traverse = (nodes) => {\n    const toRemove = [];\n    nodes.forEach((node) => {\n      depth === 0 && flattened.push(node), (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(node) && (depth > 0 && (toRemove.push(node), flattened.push(node)), depth++, traverse(node.children)), node._type === \"__block\" && (toRemove.push(node), flattened.push(node.block));\n    }), toRemove.forEach((node) => {\n      nodes.splice(nodes.indexOf(node), 1);\n    }), depth--;\n  };\n  return traverse(blocks2), flattened;\n}\nfunction nextSpan(block, index) {\n  const next = block.children[index + 1];\n  return next && next._type === \"span\" ? next : null;\n}\nfunction prevSpan(block, index) {\n  const prev = block.children[index - 1];\n  return prev && prev._type === \"span\" ? prev : null;\n}\nfunction isWhiteSpaceChar(text) {\n  return [\"\\xA0\", \" \"].includes(text);\n}\nfunction trimWhitespace(blocks2) {\n  return blocks2.forEach((block) => {\n    (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(block) && block.children.forEach((child, index) => {\n      if (!isMinimalSpan(child))\n        return;\n      const nextChild = nextSpan(block, index), prevChild = prevSpan(block, index);\n      index === 0 && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), index === block.children.length - 1 && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(Math.max(0, child.text.length - 1))) && nextChild && isMinimalSpan(nextChild) && /\\s/.test(nextChild.text.slice(0, 1)) && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(0, 1)) && prevChild && isMinimalSpan(prevChild) && /\\s/.test(prevChild.text.slice(Math.max(0, prevChild.text.length - 1))) && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), child.text || block.children.splice(index, 1), prevChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(prevChild.marks, child.marks) && isWhiteSpaceChar(child.text) ? (prevChild.text += \" \", block.children.splice(index, 1)) : nextChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(nextChild.marks, child.marks) && isWhiteSpaceChar(child.text) && (nextChild.text = ` ${nextChild.text}`, block.children.splice(index, 1));\n    });\n  }), blocks2;\n}\nfunction ensureRootIsBlocks(blocks2) {\n  return blocks2.reduce((memo, node, i, original) => {\n    if (node._type === \"block\")\n      return memo.push(node), memo;\n    if (node._type === \"__block\")\n      return memo.push(node.block), memo;\n    const lastBlock = memo[memo.length - 1];\n    if (i > 0 && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(original[i - 1]) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(lastBlock))\n      return lastBlock.children.push(node), memo;\n    const block = {\n      ...DEFAULT_BLOCK,\n      children: [node]\n    };\n    return memo.push(block), memo;\n  }, []);\n}\nfunction isNodeList(node) {\n  return Object.prototype.toString.call(node) === \"[object NodeList]\";\n}\nfunction isMinimalSpan(node) {\n  return node._type === \"span\";\n}\nfunction isMinimalBlock(node) {\n  return node._type === \"block\";\n}\nfunction isPlaceholderDecorator(node) {\n  return node._type === \"__decorator\";\n}\nfunction isPlaceholderAnnotation(node) {\n  return node._type === \"__annotation\";\n}\nfunction isElement(node) {\n  return node.nodeType === 1;\n}\nfunction normalizeWhitespace(rootNode) {\n  let emptyBlockCount = 0, lastParent = null;\n  const nodesToRemove = [];\n  for (let child = rootNode.firstChild; child; child = child.nextSibling) {\n    if (!isElement(child)) {\n      normalizeWhitespace(child), emptyBlockCount = 0;\n      continue;\n    }\n    const elm = child;\n    isWhitespaceBlock(elm) ? (lastParent && elm.parentElement === lastParent ? (emptyBlockCount++, emptyBlockCount > 1 && nodesToRemove.push(elm)) : emptyBlockCount = 1, lastParent = elm.parentElement) : (normalizeWhitespace(child), emptyBlockCount = 0);\n  }\n  nodesToRemove.forEach((node) => node.parentElement?.removeChild(node));\n}\nfunction removeAllWhitespace(rootNode) {\n  const nodesToRemove = [];\n  function collectNodesToRemove(currentNode) {\n    if (isElement(currentNode)) {\n      const elm = currentNode;\n      if (tagName(elm) === \"br\" && (tagName(elm.nextElementSibling) === \"p\" || tagName(elm.previousElementSibling) === \"p\")) {\n        nodesToRemove.push(elm);\n        return;\n      }\n      if ((tagName(elm) === \"p\" || tagName(elm) === \"br\") && elm?.firstChild?.textContent?.trim() === \"\") {\n        nodesToRemove.push(elm);\n        return;\n      }\n      for (let child = elm.firstChild; child; child = child.nextSibling)\n        collectNodesToRemove(child);\n    }\n  }\n  collectNodesToRemove(rootNode), nodesToRemove.forEach((node) => node.parentElement?.removeChild(node));\n}\nfunction isWhitespaceBlock(elm) {\n  return [\"p\", \"br\"].includes(tagName(elm) || \"\") && !elm.textContent?.trim();\n}\nconst LIST_CONTAINER_TAGS = Object.keys(HTML_LIST_CONTAINER_TAGS);\nfunction isEmphasis$1(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-style\\s*:\\s*italic/.test(style || \"\");\n}\nfunction isStrong$1(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-weight\\s*:\\s*700/.test(style || \"\");\n}\nfunction isUnderline$1(el) {\n  if (!isElement(el) || tagName(el.parentNode) === \"a\")\n    return !1;\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*underline/.test(style || \"\");\n}\nfunction isStrikethrough(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*(?:.*line-through.*;)/.test(style || \"\");\n}\nfunction isGoogleDocs(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-google-docs\");\n}\nfunction isRootNode(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-root-node\");\n}\nfunction getListItemStyle$1(el) {\n  const parentTag = tagName(el.parentNode);\n  if (!(parentTag && !LIST_CONTAINER_TAGS.includes(parentTag)))\n    return tagName(el.parentNode) === \"ul\" ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel$1(el) {\n  let level = 0;\n  if (tagName(el) === \"li\") {\n    let parentNode = el.parentNode;\n    for (; parentNode; ) {\n      const parentTag = tagName(parentNode);\n      parentTag && LIST_CONTAINER_TAGS.includes(parentTag) && level++, parentNode = parentNode.parentNode;\n    }\n  } else\n    level = 1;\n  return level;\n}\nconst blocks = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_HEADER_TAGS\n};\nfunction getBlockStyle(el, enabledBlockStyles) {\n  const childTag = tagName(el.firstChild), block = childTag && blocks[childTag];\n  return block && enabledBlockStyles.includes(block.style) ? block.style : BLOCK_DEFAULT_STYLE;\n}\nfunction createGDocsRules(_blockContentType, options) {\n  return [\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === \"span\" && isGoogleDocs(el)) {\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong$1(el) && span.marks.push(\"strong\"), isUnderline$1(el) && span.marks.push(\"underline\"), isStrikethrough(el) && span.marks.push(\"strike-through\"), isEmphasis$1(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    },\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"li\" && isGoogleDocs(el))\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle$1(el),\n            level: getListItemLevel$1(el),\n            style: getBlockStyle(el, options.enabledBlockStyles),\n            children: next(el.firstChild?.childNodes || [])\n          };\n      }\n    },\n    {\n      deserialize(el) {\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && el.classList.contains(\"apple-interchange-newline\"))\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && el?.parentNode?.textContent === \"\")\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && isRootNode(el))\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n      }\n    }\n  ];\n}\nfunction keyGenerator() {\n  return randomKey(12);\n}\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(rnds8), rnds8;\n}\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i)\n  byteToHex[i] = (i + 256).toString(16).slice(1);\nfunction randomKey(length) {\n  return whatwgRNG(length).reduce((str, n) => str + byteToHex[n], \"\").slice(0, length);\n}\nconst whitespaceTextNodeRule = {\n  deserialize(node) {\n    return node.nodeName === \"#text\" && isWhitespaceTextNode(node) ? {\n      ...DEFAULT_SPAN,\n      marks: [],\n      text: (node.textContent ?? \"\").replace(/\\s\\s+/g, \" \")\n    } : void 0;\n  }\n};\nfunction isWhitespaceTextNode(node) {\n  return (node.nodeType === 3 && (node.textContent || \"\").replace(/[\\r\\n]/g, \" \").replace(/\\s\\s+/g, \" \") === \" \" && node.nextSibling && node.nextSibling.nodeType !== 3 && node.previousSibling && node.previousSibling.nodeType !== 3 || node.textContent !== \" \") && tagName(node.parentNode) !== \"body\";\n}\nfunction resolveListItem(listNodeTagName, enabledListTypes) {\n  if (listNodeTagName === \"ul\" && enabledListTypes.includes(\"bullet\"))\n    return \"bullet\";\n  if (listNodeTagName === \"ol\" && enabledListTypes.includes(\"number\"))\n    return \"number\";\n}\nfunction createHTMLRules(_blockContentType, options) {\n  return [\n    whitespaceTextNodeRule,\n    {\n      // Pre element\n      deserialize(el) {\n        if (tagName(el) !== \"pre\")\n          return;\n        const isCodeEnabled = options.enabledBlockStyles.includes(\"code\");\n        return {\n          _type: \"block\",\n          style: \"normal\",\n          markDefs: [],\n          children: [\n            {\n              ...DEFAULT_SPAN,\n              marks: isCodeEnabled ? [\"code\"] : [],\n              text: el.textContent || \"\"\n            }\n          ]\n        };\n      }\n    },\n    // Blockquote element\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== \"blockquote\")\n          return;\n        const blocks2 = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS\n        };\n        delete blocks2.blockquote;\n        const children = [];\n        return el.childNodes.forEach((node, index) => {\n          if (node.nodeType === 1 && Object.keys(blocks2).includes(\n            node.localName.toLowerCase()\n          )) {\n            if (!el.ownerDocument)\n              return;\n            const span = el.ownerDocument.createElement(\"span\");\n            span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), node.childNodes.forEach((cn) => {\n              span.appendChild(cn.cloneNode(!0));\n            }), index !== el.childNodes.length && span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), children.push(span);\n          } else\n            children.push(node);\n        }), {\n          _type: \"block\",\n          style: \"blockquote\",\n          markDefs: [],\n          children: next(children)\n        };\n      }\n    },\n    // Block elements\n    {\n      deserialize(el, next) {\n        const blocks2 = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS\n        }, tag = tagName(el);\n        let block = tag ? blocks2[tag] : void 0;\n        if (block)\n          return el.parentNode && tagName(el.parentNode) === \"li\" ? next(el.childNodes) : (options.enabledBlockStyles.includes(block.style) || (block = DEFAULT_BLOCK), {\n            ...block,\n            children: next(el.childNodes)\n          });\n      }\n    },\n    // Ignore span tags\n    {\n      deserialize(el, next) {\n        const tag = tagName(el);\n        if (!(!tag || !(tag in HTML_SPAN_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Ignore div tags\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"div\")\n          return next(el.childNodes);\n      }\n    },\n    // Ignore list containers\n    {\n      deserialize(el, next) {\n        const tag = tagName(el);\n        if (!(!tag || !(tag in HTML_LIST_CONTAINER_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Deal with br's\n    {\n      deserialize(el) {\n        if (tagName(el) === \"br\")\n          return {\n            ...DEFAULT_SPAN,\n            text: `\n`\n          };\n      }\n    },\n    // Deal with list items\n    {\n      deserialize(el, next, block) {\n        const tag = tagName(el), listItem = tag ? HTML_LIST_ITEM_TAGS[tag] : void 0, parentTag = tagName(el.parentNode) || \"\";\n        if (!listItem || !el.parentNode || !HTML_LIST_CONTAINER_TAGS[parentTag])\n          return;\n        const enabledListItem = resolveListItem(\n          parentTag,\n          options.enabledListTypes\n        );\n        return enabledListItem ? (listItem.listItem = enabledListItem, {\n          ...listItem,\n          children: next(el.childNodes)\n        }) : block({ _type: \"block\", children: next(el.childNodes) });\n      }\n    },\n    // Deal with decorators - this is a limited set of known html elements that we know how to deserialize\n    {\n      deserialize(el, next) {\n        const decorator = HTML_DECORATOR_TAGS[tagName(el) || \"\"];\n        if (!(!decorator || !options.enabledSpanDecorators.includes(decorator)))\n          return {\n            _type: \"__decorator\",\n            name: decorator,\n            children: next(el.childNodes)\n          };\n      }\n    },\n    // Special case for hyperlinks, add annotation (if allowed by schema),\n    // If not supported just write out the link text and href in plain text.\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== \"a\")\n          return;\n        const linkEnabled = options.enabledBlockAnnotations.includes(\"link\"), href = isElement(el) && el.getAttribute(\"href\");\n        if (!href)\n          return next(el.childNodes);\n        let markDef;\n        return linkEnabled ? (markDef = {\n          _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n          _type: \"link\",\n          href\n        }, {\n          _type: \"__annotation\",\n          markDef,\n          children: next(el.childNodes)\n        }) : el.appendChild(el.ownerDocument.createTextNode(` (${href})`)) && next(el.childNodes);\n      }\n    }\n  ];\n}\nfunction isEmphasis(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-style:italic/.test(style || \"\");\n}\nfunction isStrong(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-weight:700/.test(style || \"\") || /font-weight:600/.test(style || \"\");\n}\nfunction isUnderline(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration:underline/.test(style || \"\");\n}\nfunction isNotion(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-notion\");\n}\nfunction createNotionRules(_blockContentType) {\n  return [\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === \"span\" && isNotion(el)) {\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong(el) && span.marks.push(\"strong\"), isUnderline(el) && span.marks.push(\"underline\"), isEmphasis(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    }\n  ];\n}\nfunction getListItemStyle(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  if (style && style.match(/lfo\\d+/))\n    return style.match(\"lfo1\") ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  if (!style)\n    return;\n  const levelMatch = style.match(/level\\d+/);\n  if (!levelMatch)\n    return;\n  const [level] = levelMatch[0].match(/\\d/) || [];\n  return (level ? Number.parseInt(level, 10) : 1) || 1;\n}\nfunction isWordListElement(el) {\n  return isElement(el) && el.className ? el.className === \"MsoListParagraphCxSpFirst\" || el.className === \"MsoListParagraphCxSpMiddle\" || el.className === \"MsoListParagraphCxSpLast\" : !1;\n}\nfunction createWordRules() {\n  return [\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"p\" && isWordListElement(el))\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle(el),\n            level: getListItemLevel(el),\n            style: BLOCK_DEFAULT_STYLE,\n            children: next(el.childNodes)\n          };\n      }\n    }\n  ];\n}\nfunction createRules(blockContentType, options) {\n  return [\n    ...createWordRules(),\n    ...createNotionRules(),\n    ...createGDocsRules(blockContentType, options),\n    ...createHTMLRules(blockContentType, options)\n  ];\n}\nclass HtmlDeserializer {\n  blockContentType;\n  rules;\n  parseHtml;\n  _markDefs = [];\n  /**\n   * Create a new serializer respecting a Sanity block content type's schema\n   *\n   * @param blockContentType - Schema type for array containing _at least_ a block child type\n   * @param options - Options for the deserialization process\n   */\n  constructor(blockContentType, options = {}) {\n    const { rules = [], unstable_whitespaceOnPasteMode = \"preserve\" } = options;\n    if (!blockContentType)\n      throw new Error(\"Parameter 'blockContentType' is required\");\n    const standardRules = createRules(blockContentType, {\n      ...createRuleOptions(blockContentType),\n      keyGenerator: options.keyGenerator\n    });\n    this.rules = [...rules, ...standardRules];\n    const parseHtml = options.parseHtml || defaultParseHtml();\n    this.blockContentType = blockContentType, this.parseHtml = (html) => preprocess(html, parseHtml, { unstable_whitespaceOnPasteMode }).body;\n  }\n  /**\n   * Deserialize HTML.\n   *\n   * @param html - The HTML to deserialize, as a string\n   * @returns Array of blocks - either portable text blocks or other allowed blocks\n   */\n  deserialize = (html) => {\n    this._markDefs = [];\n    const { parseHtml } = this, fragment = parseHtml(html), children = Array.from(fragment.childNodes), blocks2 = trimWhitespace(\n      flattenNestedBlocks(\n        ensureRootIsBlocks(this.deserializeElements(children))\n      )\n    );\n    this._markDefs.length > 0 && blocks2.filter(\n      (block) => block._type === \"block\"\n    ).forEach((block) => {\n      block.markDefs = block.markDefs || [], block.markDefs = block.markDefs.concat(\n        this._markDefs.filter((def) => lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__(\n          block.children.map((child) => child.marks || [])\n        ).includes(def._key))\n      );\n    });\n    const type = this.blockContentType.of.find(findBlockType);\n    return type ? blocks2.map((block) => (block._type === \"block\" && (block._type = type.name), block)) : blocks2;\n  };\n  /**\n   * Deserialize an array of DOM elements.\n   *\n   * @param elements - Array of DOM elements to deserialize\n   * @returns\n   */\n  deserializeElements = (elements = []) => {\n    let nodes = [];\n    return elements.forEach((element) => {\n      nodes = nodes.concat(this.deserializeElement(element));\n    }), nodes;\n  };\n  /**\n   * Deserialize a DOM element\n   *\n   * @param element - Deserialize a DOM element\n   * @returns\n   */\n  deserializeElement = (element) => {\n    const next = (elements) => {\n      if (isNodeList(elements))\n        return this.deserializeElements(Array.from(elements));\n      if (Array.isArray(elements))\n        return this.deserializeElements(elements);\n      if (elements)\n        return this.deserializeElement(elements);\n    }, block = (props) => ({\n      _type: \"__block\",\n      block: props\n    });\n    let node;\n    for (let i = 0; i < this.rules.length; i++) {\n      const rule = this.rules[i];\n      if (!rule.deserialize)\n        continue;\n      const ret = rule.deserialize(element, next, block), type = resolveJsType(ret);\n      if (type !== \"array\" && type !== \"object\" && type !== \"null\" && type !== \"undefined\")\n        throw new Error(\n          `A rule returned an invalid deserialized representation: \"${node}\".`\n        );\n      if (ret !== void 0) {\n        {\n          if (ret === null)\n            throw new Error(\"Deserializer rule returned `null`\");\n          Array.isArray(ret) ? node = ret : isPlaceholderDecorator(ret) ? node = this.deserializeDecorator(ret) : isPlaceholderAnnotation(ret) ? node = this.deserializeAnnotation(ret) : node = ret;\n        }\n        if (ret && !Array.isArray(ret) && isMinimalBlock(ret) && \"listItem\" in ret) {\n          let parent = element.parentNode?.parentNode;\n          for (; parent && tagName(parent) === \"li\"; )\n            parent = parent.parentNode?.parentNode, ret.level = ret.level ? ret.level + 1 : 1;\n        }\n        ret && !Array.isArray(ret) && isMinimalBlock(ret) && ret.style === \"blockquote\" && ret.children.forEach((child, index) => {\n          isMinimalSpan(child) && child.text === \"\\r\" && (child.text = `\n\n`, (index === 0 || index === ret.children.length - 1) && ret.children.splice(index, 1));\n        });\n        break;\n      }\n    }\n    return node || next(element.childNodes) || [];\n  };\n  /**\n   * Deserialize a `__decorator` type\n   * (an internal made up type to process decorators exclusively)\n   *\n   * @param decorator -\n   * @returns array of ...\n   */\n  deserializeDecorator = (decorator) => {\n    const { name } = decorator, applyDecorator = (node) => {\n      if (isPlaceholderDecorator(node))\n        return this.deserializeDecorator(node);\n      if (isMinimalSpan(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(name);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyDecorator);\n      }\n      return node;\n    };\n    return decorator.children.reduce((children, node) => {\n      const ret = applyDecorator(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n  /**\n   * Deserialize a `__annotation` object.\n   * (an internal made up type to process annotations exclusively)\n   *\n   * @param annotation -\n   * @returns Array of...\n   */\n  deserializeAnnotation = (annotation) => {\n    const { markDef } = annotation;\n    this._markDefs.push(markDef);\n    const applyAnnotation = (node) => {\n      if (isPlaceholderAnnotation(node))\n        return this.deserializeAnnotation(node);\n      if (isMinimalSpan(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(markDef._key);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyAnnotation);\n      }\n      return node;\n    };\n    return annotation.children.reduce((children, node) => {\n      const ret = applyAnnotation(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n}\nfunction normalizeBlock(node, options = {}) {\n  if (node._type !== (options.blockTypeName || \"block\"))\n    return \"_key\" in node ? node : {\n      ...node,\n      _key: options.keyGenerator ? options.keyGenerator() : keyGenerator()\n    };\n  const block = {\n    _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n    children: [],\n    markDefs: [],\n    ...node\n  }, lastChild = block.children[block.children.length - 1];\n  if (!lastChild)\n    return block.children = [\n      {\n        _type: \"span\",\n        _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n        text: \"\",\n        marks: []\n      }\n    ], block;\n  const usedMarkDefs = [], allowedDecorators = options.allowedDecorators && Array.isArray(options.allowedDecorators) ? options.allowedDecorators : !1;\n  return block.children = block.children.reduce(\n    (acc, child) => {\n      const previousChild = acc[acc.length - 1];\n      return previousChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(child) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(previousChild) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(previousChild.marks, child.marks) ? (lastChild && lastChild === child && child.text === \"\" && block.children.length > 1 || (previousChild.text += child.text), acc) : (acc.push(child), acc);\n    },\n    []\n  ).map((child) => {\n    if (!child)\n      throw new Error(\"missing child\");\n    return child._key = options.keyGenerator ? options.keyGenerator() : keyGenerator(), (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(child) && (child.marks ? allowedDecorators && (child.marks = child.marks.filter((mark) => {\n      const isAllowed = allowedDecorators.includes(mark), isUsed = block.markDefs?.some((def) => def._key === mark);\n      return isAllowed || isUsed;\n    })) : child.marks = [], usedMarkDefs.push(...child.marks)), child;\n  }), block.markDefs = (block.markDefs || []).filter(\n    (markDef) => usedMarkDefs.includes(markDef._key)\n  ), block;\n}\nfunction htmlToBlocks(html, blockContentType, options = {}) {\n  return new HtmlDeserializer(blockContentType, options).deserialize(html).map((block) => normalizeBlock(block, { keyGenerator: options.keyGenerator }));\n}\nfunction getBlockContentFeatures(blockContentType) {\n  return blockContentFeatures(blockContentType);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9ibG9jay10b29scy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXdDO0FBQzJLO0FBQzNLO0FBQ047QUFDa0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpS0FBaUssUUFBUTtBQUNuTDtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQyxFQUFFLGdCQUFnQixZQUFZLHNCQUFzQixFQUFFLEVBQUUsR0FBRztBQUN2RztBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGdCQUFnQjtBQUNoQixDQUFDO0FBQ0QsVUFBVTtBQUNWLENBQUM7QUFDRCxRQUFRLGNBQWM7QUFDdEIsUUFBUTtBQUNSLENBQUM7QUFDRCxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRO0FBQ1IsQ0FBQztBQUNELFFBQVE7QUFDUixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBSTtBQUNKO0FBQ0E7QUFDQSwyQ0FBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sZ0VBQWlCO0FBQ3hCO0FBQ0EsdUNBQXVDLHFFQUEwQjtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGlFQUFlO0FBQ3hCO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsWUFBWSwrQ0FBK0M7QUFDcEU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVMsd0RBQXdELEtBQUs7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUMsWUFBWSwwREFBMEQ7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsdUdBQXVHLGdDQUFnQztBQUN2STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw4Q0FBTztBQUM5QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxLQUFLO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvQ0FBb0M7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlFQUFrQixXQUFXLGlFQUFrQixtQkFBbUIsOENBQU87QUFDdkcsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGLGlFQUFrQjtBQUMxRztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQsa0hBQWtILG9DQUFvQztBQUN0SjtBQUNBO0FBQ0E7QUFDQTtBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9ibG9jay10b29scy9saWIvaW5kZXguanM/ZDc3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmxhdHRlbiBmcm9tIFwibG9kYXNoL2ZsYXR0ZW4uanNcIjtcbmltcG9ydCB7IGlzQmxvY2tTY2hlbWFUeXBlLCBpc0Jsb2NrQ2hpbGRyZW5PYmplY3RGaWVsZCwgaXNPYmplY3RTY2hlbWFUeXBlLCBpc0Jsb2NrU3R5bGVPYmplY3RGaWVsZCwgaXNCbG9ja0xpc3RPYmplY3RGaWVsZCwgaXNUaXRsZWRMaXN0VmFsdWUsIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrLCBpc1BvcnRhYmxlVGV4dFNwYW4gfSBmcm9tIFwiQHNhbml0eS90eXBlc1wiO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSBcImxvZGFzaC9pc0VxdWFsLmpzXCI7XG5pbXBvcnQgdW5pcSBmcm9tIFwibG9kYXNoL3VuaXEuanNcIjtcbmltcG9ydCBnZXRSYW5kb21WYWx1ZXMgZnJvbSBcImdldC1yYW5kb20tdmFsdWVzLWVzbVwiO1xuZnVuY3Rpb24gZmluZEJsb2NrVHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlLnR5cGUgPyBmaW5kQmxvY2tUeXBlKHR5cGUudHlwZSkgOiB0eXBlLm5hbWUgPT09IFwiYmxvY2tcIjtcbn1cbmNvbnN0IG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmZ1bmN0aW9uIHJlc29sdmVKc1R5cGUodmFsKSB7XG4gIHN3aXRjaCAob2JqZWN0VG9TdHJpbmcuY2FsbCh2YWwpKSB7XG4gICAgY2FzZSBcIltvYmplY3QgRnVuY3Rpb25dXCI6XG4gICAgICByZXR1cm4gXCJmdW5jdGlvblwiO1xuICAgIGNhc2UgXCJbb2JqZWN0IERhdGVdXCI6XG4gICAgICByZXR1cm4gXCJkYXRlXCI7XG4gICAgY2FzZSBcIltvYmplY3QgUmVnRXhwXVwiOlxuICAgICAgcmV0dXJuIFwicmVnZXhwXCI7XG4gICAgY2FzZSBcIltvYmplY3QgQXJndW1lbnRzXVwiOlxuICAgICAgcmV0dXJuIFwiYXJndW1lbnRzXCI7XG4gICAgY2FzZSBcIltvYmplY3QgQXJyYXldXCI6XG4gICAgICByZXR1cm4gXCJhcnJheVwiO1xuICAgIGNhc2UgXCJbb2JqZWN0IFN0cmluZ11cIjpcbiAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICB9XG4gIHJldHVybiB2YWwgPT09IG51bGwgPyBcIm51bGxcIiA6IHZhbCA9PT0gdm9pZCAwID8gXCJ1bmRlZmluZWRcIiA6IHZhbCAmJiB0eXBlb2YgdmFsID09IFwib2JqZWN0XCIgJiYgXCJub2RlVHlwZVwiIGluIHZhbCAmJiB2YWwubm9kZVR5cGUgPT09IDEgPyBcImVsZW1lbnRcIiA6IHZhbCA9PT0gT2JqZWN0KHZhbCkgPyBcIm9iamVjdFwiIDogdHlwZW9mIHZhbDtcbn1cbnZhciBzID0geyAwOiA4MjAzLCAxOiA4MjA0LCAyOiA4MjA1LCAzOiA4MjkwLCA0OiA4MjkxLCA1OiA4Mjg4LCA2OiA2NTI3OSwgNzogODI4OSwgODogMTE5MTU1LCA5OiAxMTkxNTYsIGE6IDExOTE1NywgYjogMTE5MTU4LCBjOiAxMTkxNTksIGQ6IDExOTE2MCwgZTogMTE5MTYxLCBmOiAxMTkxNjIgfSwgYyA9IHsgMDogODIwMywgMTogODIwNCwgMjogODIwNSwgMzogNjUyNzkgfTtcbm5ldyBBcnJheSg0KS5maWxsKFN0cmluZy5mcm9tQ29kZVBvaW50KGNbMF0pKS5qb2luKFwiXCIpO1xuT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGMpLm1hcCgodCkgPT4gdC5yZXZlcnNlKCkpKTtcbk9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhzKS5tYXAoKHQpID0+IHQucmV2ZXJzZSgpKSk7XG52YXIgUyA9IGAke09iamVjdC52YWx1ZXMocykubWFwKCh0KSA9PiBgXFxcXHV7JHt0LnRvU3RyaW5nKDE2KX19YCkuam9pbihcIlwiKX1gLCBmID0gbmV3IFJlZ0V4cChgWyR7U31dezQsfWAsIFwiZ3VcIik7XG5mdW5jdGlvbiBfKHQpIHtcbiAgdmFyIGU7XG4gIHJldHVybiB7IGNsZWFuZWQ6IHQucmVwbGFjZShmLCBcIlwiKSwgZW5jb2RlZDogKChlID0gdC5tYXRjaChmKSkgPT0gbnVsbCA/IHZvaWQgMCA6IGVbMF0pIHx8IFwiXCIgfTtcbn1cbmZ1bmN0aW9uIE8odCkge1xuICByZXR1cm4gdCAmJiBKU09OLnBhcnNlKF8oSlNPTi5zdHJpbmdpZnkodCkpLmNsZWFuZWQpO1xufVxuY29uc3QgUFJFU0VSVkVfV0hJVEVTUEFDRV9UQUdTID0gW1wicHJlXCIsIFwidGV4dGFyZWFcIiwgXCJjb2RlXCJdLCBCTE9DS19ERUZBVUxUX1NUWUxFID0gXCJub3JtYWxcIiwgREVGQVVMVF9CTE9DSyA9IE9iamVjdC5mcmVlemUoe1xuICBfdHlwZTogXCJibG9ja1wiLFxuICBtYXJrRGVmczogW10sXG4gIHN0eWxlOiBCTE9DS19ERUZBVUxUX1NUWUxFXG59KSwgREVGQVVMVF9TUEFOID0gT2JqZWN0LmZyZWV6ZSh7XG4gIF90eXBlOiBcInNwYW5cIixcbiAgbWFya3M6IFtdXG59KSwgSFRNTF9CTE9DS19UQUdTID0ge1xuICBwOiBERUZBVUxUX0JMT0NLLFxuICBibG9ja3F1b3RlOiB7IC4uLkRFRkFVTFRfQkxPQ0ssIHN0eWxlOiBcImJsb2NrcXVvdGVcIiB9XG59LCBIVE1MX1NQQU5fVEFHUyA9IHtcbiAgc3BhbjogeyBvYmplY3Q6IFwidGV4dFwiIH1cbn0sIEhUTUxfTElTVF9DT05UQUlORVJfVEFHUyA9IHtcbiAgb2w6IHsgb2JqZWN0OiBudWxsIH0sXG4gIHVsOiB7IG9iamVjdDogbnVsbCB9XG59LCBIVE1MX0hFQURFUl9UQUdTID0ge1xuICBoMTogeyAuLi5ERUZBVUxUX0JMT0NLLCBzdHlsZTogXCJoMVwiIH0sXG4gIGgyOiB7IC4uLkRFRkFVTFRfQkxPQ0ssIHN0eWxlOiBcImgyXCIgfSxcbiAgaDM6IHsgLi4uREVGQVVMVF9CTE9DSywgc3R5bGU6IFwiaDNcIiB9LFxuICBoNDogeyAuLi5ERUZBVUxUX0JMT0NLLCBzdHlsZTogXCJoNFwiIH0sXG4gIGg1OiB7IC4uLkRFRkFVTFRfQkxPQ0ssIHN0eWxlOiBcImg1XCIgfSxcbiAgaDY6IHsgLi4uREVGQVVMVF9CTE9DSywgc3R5bGU6IFwiaDZcIiB9XG59LCBIVE1MX01JU0NfVEFHUyA9IHtcbiAgYnI6IHsgLi4uREVGQVVMVF9CTE9DSywgc3R5bGU6IEJMT0NLX0RFRkFVTFRfU1RZTEUgfVxufSwgSFRNTF9ERUNPUkFUT1JfVEFHUyA9IHtcbiAgYjogXCJzdHJvbmdcIixcbiAgc3Ryb25nOiBcInN0cm9uZ1wiLFxuICBpOiBcImVtXCIsXG4gIGVtOiBcImVtXCIsXG4gIHU6IFwidW5kZXJsaW5lXCIsXG4gIHM6IFwic3RyaWtlLXRocm91Z2hcIixcbiAgc3RyaWtlOiBcInN0cmlrZS10aHJvdWdoXCIsXG4gIGRlbDogXCJzdHJpa2UtdGhyb3VnaFwiLFxuICBjb2RlOiBcImNvZGVcIixcbiAgc3VwOiBcInN1cFwiLFxuICBzdWI6IFwic3ViXCIsXG4gIGluczogXCJpbnNcIixcbiAgbWFyazogXCJtYXJrXCIsXG4gIHNtYWxsOiBcInNtYWxsXCJcbn0sIEhUTUxfTElTVF9JVEVNX1RBR1MgPSB7XG4gIGxpOiB7XG4gICAgLi4uREVGQVVMVF9CTE9DSyxcbiAgICBzdHlsZTogQkxPQ0tfREVGQVVMVF9TVFlMRSxcbiAgICBsZXZlbDogMSxcbiAgICBsaXN0SXRlbTogXCJidWxsZXRcIlxuICB9XG59LCBFTEVNRU5UX01BUCA9IHtcbiAgLi4uSFRNTF9CTE9DS19UQUdTLFxuICAuLi5IVE1MX1NQQU5fVEFHUyxcbiAgLi4uSFRNTF9MSVNUX0NPTlRBSU5FUl9UQUdTLFxuICAuLi5IVE1MX0xJU1RfSVRFTV9UQUdTLFxuICAuLi5IVE1MX0hFQURFUl9UQUdTLFxuICAuLi5IVE1MX01JU0NfVEFHU1xufTtcbnVuaXEoXG4gIE9iamVjdC52YWx1ZXMoRUxFTUVOVF9NQVApLmZpbHRlcigodGFnKSA9PiBcInN0eWxlXCIgaW4gdGFnKS5tYXAoKHRhZykgPT4gdGFnLnN0eWxlKVxuKTtcbnVuaXEoXG4gIE9iamVjdC52YWx1ZXMoSFRNTF9ERUNPUkFUT1JfVEFHUylcbik7XG5mdW5jdGlvbiBibG9ja0NvbnRlbnRGZWF0dXJlcyhibG9ja0NvbnRlbnRUeXBlKSB7XG4gIGlmICghYmxvY2tDb250ZW50VHlwZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJhbWV0ZXIgJ2Jsb2NrQ29udGVudFR5cGUnIHJlcXVpcmVkXCIpO1xuICBjb25zdCBibG9ja1R5cGUgPSBibG9ja0NvbnRlbnRUeXBlLm9mLmZpbmQoZmluZEJsb2NrVHlwZSk7XG4gIGlmICghaXNCbG9ja1NjaGVtYVR5cGUoYmxvY2tUeXBlKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCInYmxvY2snIHR5cGUgaXMgbm90IGRlZmluZWQgaW4gdGhpcyBzY2hlbWEgKHJlcXVpcmVkKS5cIik7XG4gIGNvbnN0IG9mVHlwZSA9IGJsb2NrVHlwZS5maWVsZHMuZmluZChpc0Jsb2NrQ2hpbGRyZW5PYmplY3RGaWVsZCk/LnR5cGU/Lm9mO1xuICBpZiAoIW9mVHlwZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBgb2ZgIGRlY2xhcmF0aW9uIGZvdW5kIGZvciBibG9ja3MgYGNoaWxkcmVuYCBmaWVsZFwiKTtcbiAgY29uc3Qgc3BhblR5cGUgPSBvZlR5cGUuZmluZChcbiAgICAobWVtYmVyKSA9PiBtZW1iZXIubmFtZSA9PT0gXCJzcGFuXCJcbiAgKTtcbiAgaWYgKCFzcGFuVHlwZSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIk5vIGBzcGFuYCB0eXBlIGZvdW5kIGluIGBibG9ja2Agc2NoZW1hIHR5cGUgYGNoaWxkcmVuYCBkZWZpbml0aW9uXCJcbiAgICApO1xuICBjb25zdCBpbmxpbmVPYmplY3RUeXBlcyA9IG9mVHlwZS5maWx0ZXIoXG4gICAgKGlubGluZVR5cGUpID0+IGlubGluZVR5cGUubmFtZSAhPT0gXCJzcGFuXCIgJiYgaXNPYmplY3RTY2hlbWFUeXBlKGlubGluZVR5cGUpXG4gICksIGJsb2NrT2JqZWN0VHlwZXMgPSBibG9ja0NvbnRlbnRUeXBlLm9mLmZpbHRlcihcbiAgICAobWVtYmVyVHlwZSkgPT4gbWVtYmVyVHlwZS5uYW1lICE9PSBibG9ja1R5cGUubmFtZSAmJiBpc09iamVjdFNjaGVtYVR5cGUobWVtYmVyVHlwZSlcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBzdHlsZXM6IHJlc29sdmVFbmFibGVkU3R5bGVzKGJsb2NrVHlwZSksXG4gICAgZGVjb3JhdG9yczogcmVzb2x2ZUVuYWJsZWREZWNvcmF0b3JzKHNwYW5UeXBlKSxcbiAgICBhbm5vdGF0aW9uczogcmVzb2x2ZUVuYWJsZWRBbm5vdGF0aW9uVHlwZXMoc3BhblR5cGUpLFxuICAgIGxpc3RzOiByZXNvbHZlRW5hYmxlZExpc3RJdGVtcyhibG9ja1R5cGUpLFxuICAgIHR5cGVzOiB7XG4gICAgICBibG9jazogYmxvY2tDb250ZW50VHlwZSxcbiAgICAgIHNwYW46IHNwYW5UeXBlLFxuICAgICAgaW5saW5lT2JqZWN0czogaW5saW5lT2JqZWN0VHlwZXMsXG4gICAgICBibG9ja09iamVjdHM6IGJsb2NrT2JqZWN0VHlwZXNcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlRW5hYmxlZFN0eWxlcyhibG9ja1R5cGUpIHtcbiAgY29uc3Qgc3R5bGVGaWVsZCA9IGJsb2NrVHlwZS5maWVsZHMuZmluZChpc0Jsb2NrU3R5bGVPYmplY3RGaWVsZCk7XG4gIGlmICghc3R5bGVGaWVsZClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkEgZmllbGQgd2l0aCBuYW1lICdzdHlsZScgaXMgbm90IGRlZmluZWQgaW4gdGhlIGJsb2NrIHR5cGUgKHJlcXVpcmVkKS5cIlxuICAgICk7XG4gIGNvbnN0IHRleHRTdHlsZXMgPSBnZXRUaXRsZWRMaXN0VmFsdWVzRnJvbUVudW1MaXN0T3B0aW9ucyhcbiAgICBzdHlsZUZpZWxkLnR5cGUub3B0aW9uc1xuICApO1xuICBpZiAodGV4dFN0eWxlcy5sZW5ndGggPT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJUaGUgc3R5bGUgZmllbGRzIG5lZWQgYXQgbGVhc3Qgb25lIHN0eWxlIGRlZmluZWQuIEkuZToge3RpdGxlOiAnTm9ybWFsJywgdmFsdWU6ICdub3JtYWwnfS5cIlxuICAgICk7XG4gIHJldHVybiB0ZXh0U3R5bGVzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVuYWJsZWRBbm5vdGF0aW9uVHlwZXMoc3BhblR5cGUpIHtcbiAgcmV0dXJuIHNwYW5UeXBlLmFubm90YXRpb25zLm1hcCgoYW5ub3RhdGlvbikgPT4gKHtcbiAgICB0aXRsZTogYW5ub3RhdGlvbi50aXRsZSxcbiAgICB0eXBlOiBhbm5vdGF0aW9uLFxuICAgIHZhbHVlOiBhbm5vdGF0aW9uLm5hbWUsXG4gICAgaWNvbjogYW5ub3RhdGlvbi5pY29uXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVFbmFibGVkRGVjb3JhdG9ycyhzcGFuVHlwZSkge1xuICByZXR1cm4gc3BhblR5cGUuZGVjb3JhdG9ycztcbn1cbmZ1bmN0aW9uIHJlc29sdmVFbmFibGVkTGlzdEl0ZW1zKGJsb2NrVHlwZSkge1xuICBjb25zdCBsaXN0RmllbGQgPSBibG9ja1R5cGUuZmllbGRzLmZpbmQoaXNCbG9ja0xpc3RPYmplY3RGaWVsZCk7XG4gIGlmICghbGlzdEZpZWxkKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiQSBmaWVsZCB3aXRoIG5hbWUgJ2xpc3QnIGlzIG5vdCBkZWZpbmVkIGluIHRoZSBibG9jayB0eXBlIChyZXF1aXJlZCkuXCJcbiAgICApO1xuICBjb25zdCBsaXN0SXRlbXMgPSBnZXRUaXRsZWRMaXN0VmFsdWVzRnJvbUVudW1MaXN0T3B0aW9ucyhcbiAgICBsaXN0RmllbGQudHlwZS5vcHRpb25zXG4gICk7XG4gIGlmICghbGlzdEl0ZW1zKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBsaXN0IGZpZWxkIG5lZWQgYXQgbGVhc3QgdG8gYmUgYW4gZW1wdHkgYXJyYXlcIik7XG4gIHJldHVybiBsaXN0SXRlbXM7XG59XG5mdW5jdGlvbiBnZXRUaXRsZWRMaXN0VmFsdWVzRnJvbUVudW1MaXN0T3B0aW9ucyhvcHRpb25zKSB7XG4gIGNvbnN0IGxpc3QgPSBvcHRpb25zID8gb3B0aW9ucy5saXN0IDogdm9pZCAwO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShsaXN0KSA/IGxpc3QubWFwKFxuICAgIChpdGVtKSA9PiBpc1RpdGxlZExpc3RWYWx1ZShpdGVtKSA/IGl0ZW0gOiB7IHRpdGxlOiBpdGVtLCB2YWx1ZTogaXRlbSB9XG4gICkgOiBbXTtcbn1cbmNvbnN0IF9YUGF0aFJlc3VsdCA9IHtcbiAgQU5ZX1RZUEU6IDAsXG4gIE5VTUJFUl9UWVBFOiAxLFxuICBTVFJJTkdfVFlQRTogMixcbiAgQk9PTEVBTl9UWVBFOiAzLFxuICBVTk9SREVSRURfTk9ERV9JVEVSQVRPUl9UWVBFOiA0LFxuICBPUkRFUkVEX05PREVfSVRFUkFUT1JfVFlQRTogNSxcbiAgVU5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRTogNixcbiAgT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEU6IDcsXG4gIEFOWV9VTk9SREVSRURfTk9ERV9UWVBFOiA4LFxuICBGSVJTVF9PUkRFUkVEX05PREVfVFlQRTogOVxufTtcbnZhciBwcmVwcm9jZXNzR0RvY3MgPSAoX2h0bWwsIGRvYywgb3B0aW9ucykgPT4ge1xuICBjb25zdCB3aGl0ZXNwYWNlT25QYXN0ZU1vZGUgPSBvcHRpb25zPy51bnN0YWJsZV93aGl0ZXNwYWNlT25QYXN0ZU1vZGUgfHwgXCJwcmVzZXJ2ZVwiO1xuICBsZXQgZ0RvY3NSb290T3JTaWJsaW5nTm9kZSA9IGRvYy5ldmFsdWF0ZShcbiAgICAnLy8qW0BpZCBhbmQgY29udGFpbnMoQGlkLCBcImRvY3MtaW50ZXJuYWwtZ3VpZFwiKV0nLFxuICAgIGRvYyxcbiAgICBudWxsLFxuICAgIF9YUGF0aFJlc3VsdC5PUkRFUkVEX05PREVfSVRFUkFUT1JfVFlQRSxcbiAgICBudWxsXG4gICkuaXRlcmF0ZU5leHQoKTtcbiAgaWYgKGdEb2NzUm9vdE9yU2libGluZ05vZGUpIHtcbiAgICBjb25zdCBpc1dyYXBwZWRSb290VGFnID0gdGFnTmFtZShnRG9jc1Jvb3RPclNpYmxpbmdOb2RlKSA9PT0gXCJiXCI7XG4gICAgc3dpdGNoIChpc1dyYXBwZWRSb290VGFnIHx8IChnRG9jc1Jvb3RPclNpYmxpbmdOb2RlID0gZG9jLmJvZHkpLCB3aGl0ZXNwYWNlT25QYXN0ZU1vZGUpIHtcbiAgICAgIGNhc2UgXCJub3JtYWxpemVcIjpcbiAgICAgICAgbm9ybWFsaXplV2hpdGVzcGFjZShnRG9jc1Jvb3RPclNpYmxpbmdOb2RlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicmVtb3ZlXCI6XG4gICAgICAgIHJlbW92ZUFsbFdoaXRlc3BhY2UoZ0RvY3NSb290T3JTaWJsaW5nTm9kZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZE5vZGVzID0gZG9jLmV2YWx1YXRlKFxuICAgICAgXCIvLypcIixcbiAgICAgIGRvYyxcbiAgICAgIG51bGwsXG4gICAgICBfWFBhdGhSZXN1bHQuVU5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIGZvciAobGV0IGkgPSBjaGlsZE5vZGVzLnNuYXBzaG90TGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGVsbSA9IGNoaWxkTm9kZXMuc25hcHNob3RJdGVtKGkpO1xuICAgICAgZWxtPy5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlzLWdvb2dsZS1kb2NzXCIsIFwidHJ1ZVwiKSwgKGVsbT8ucGFyZW50RWxlbWVudCA9PT0gZ0RvY3NSb290T3JTaWJsaW5nTm9kZSB8fCAhaXNXcmFwcGVkUm9vdFRhZyAmJiBlbG0ucGFyZW50RWxlbWVudCA9PT0gZG9jLmJvZHkpICYmIChlbG0/LnNldEF0dHJpYnV0ZShcImRhdGEtaXMtcm9vdC1ub2RlXCIsIFwidHJ1ZVwiKSwgdGFnTmFtZShlbG0pKSwgdGFnTmFtZShlbG0pID09PSBcImxpXCIgJiYgZWxtLmZpcnN0Q2hpbGQgJiYgdGFnTmFtZShlbG0/LmZpcnN0Q2hpbGQpID09PSBcImltZ1wiICYmIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBpc1dyYXBwZWRSb290VGFnICYmIGRvYy5ib2R5LmZpcnN0RWxlbWVudENoaWxkPy5yZXBsYWNlV2l0aChcbiAgICAgIC4uLkFycmF5LmZyb20oZ0RvY3NSb290T3JTaWJsaW5nTm9kZS5jaGlsZE5vZGVzKVxuICAgICksIGRvYztcbiAgfVxuICByZXR1cm4gZG9jO1xufTtcbmNvbnN0IHVud2FudGVkV29yZERvY3VtZW50UGF0aHMgPSBbXG4gIFwiL2h0bWwvdGV4dCgpXCIsXG4gIFwiL2h0bWwvaGVhZC90ZXh0KClcIixcbiAgXCIvaHRtbC9ib2R5L3RleHQoKVwiLFxuICBcIi9odG1sL2JvZHkvdWwvdGV4dCgpXCIsXG4gIFwiL2h0bWwvYm9keS9vbC90ZXh0KClcIixcbiAgXCIvL2NvbW1lbnQoKVwiLFxuICBcIi8vc3R5bGVcIixcbiAgXCIvL3htbFwiLFxuICBcIi8vc2NyaXB0XCIsXG4gIFwiLy9tZXRhXCIsXG4gIFwiLy9saW5rXCJcbl07XG52YXIgcHJlcHJvY2Vzc0hUTUwgPSAoX2h0bWwsIGRvYykgPT4ge1xuICBjb25zdCBib2R5VGV4dE5vZGVzID0gZG9jLmV2YWx1YXRlKFxuICAgIFwiL2h0bWwvYm9keS90ZXh0KClcIixcbiAgICBkb2MsXG4gICAgbnVsbCxcbiAgICBfWFBhdGhSZXN1bHQuVU5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSxcbiAgICBudWxsXG4gICk7XG4gIGZvciAobGV0IGkgPSBib2R5VGV4dE5vZGVzLnNuYXBzaG90TGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBub2RlID0gYm9keVRleHROb2Rlcy5zbmFwc2hvdEl0ZW0oaSksIHRleHQgPSBub2RlLnRleHRDb250ZW50IHx8IFwiXCI7XG4gICAgaWYgKHRleHQucmVwbGFjZSgvW15cXFNcXG5dKyQvZywgXCJcIikpIHtcbiAgICAgIGNvbnN0IG5ld05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBuZXdOb2RlLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSksIG5vZGUucGFyZW50Tm9kZT8ucmVwbGFjZUNoaWxkKG5ld05vZGUsIG5vZGUpO1xuICAgIH0gZWxzZVxuICAgICAgbm9kZS5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChub2RlKTtcbiAgfVxuICBjb25zdCB1bndhbnRlZE5vZGVzID0gZG9jLmV2YWx1YXRlKFxuICAgIHVud2FudGVkV29yZERvY3VtZW50UGF0aHMuam9pbihcInxcIiksXG4gICAgZG9jLFxuICAgIG51bGwsXG4gICAgX1hQYXRoUmVzdWx0LlVOT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEUsXG4gICAgbnVsbFxuICApO1xuICBmb3IgKGxldCBpID0gdW53YW50ZWROb2Rlcy5zbmFwc2hvdExlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgdW53YW50ZWQgPSB1bndhbnRlZE5vZGVzLnNuYXBzaG90SXRlbShpKTtcbiAgICB1bndhbnRlZCAmJiB1bndhbnRlZC5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZCh1bndhbnRlZCk7XG4gIH1cbiAgcmV0dXJuIGRvYztcbn0sIHByZXByb2Nlc3NOb3Rpb24gPSAoaHRtbCwgZG9jKSA9PiB7XG4gIGNvbnN0IE5PVElPTl9SRUdFWCA9IC88IS0tIG5vdGlvbnZjOi4qPy0tPi9nO1xuICBpZiAoaHRtbC5tYXRjaChOT1RJT05fUkVHRVgpKSB7XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IGRvYy5ldmFsdWF0ZShcbiAgICAgIFwiLy8qXCIsXG4gICAgICBkb2MsXG4gICAgICBudWxsLFxuICAgICAgX1hQYXRoUmVzdWx0LlVOT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEUsXG4gICAgICBudWxsXG4gICAgKTtcbiAgICBmb3IgKGxldCBpID0gY2hpbGROb2Rlcy5zbmFwc2hvdExlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgY2hpbGROb2Rlcy5zbmFwc2hvdEl0ZW0oaSk/LnNldEF0dHJpYnV0ZShcImRhdGEtaXMtbm90aW9uXCIsIFwidHJ1ZVwiKTtcbiAgICByZXR1cm4gZG9jO1xuICB9XG4gIHJldHVybiBkb2M7XG59LCBwcmVwcm9jZXNzV2hpdGVzcGFjZSA9IChfMiwgZG9jKSA9PiB7XG4gIGZ1bmN0aW9uIHByb2Nlc3NOb2RlKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gX1hQYXRoUmVzdWx0LkJPT0xFQU5fVFlQRSAmJiAhUFJFU0VSVkVfV0hJVEVTUEFDRV9UQUdTLmluY2x1ZGVzKFxuICAgICAgbm9kZS5wYXJlbnRFbGVtZW50Py50YWdOYW1lLnRvTG93ZXJDYXNlKCkgfHwgXCJcIlxuICAgICkpXG4gICAgICBub2RlLnRleHRDb250ZW50ID0gbm9kZS50ZXh0Q29udGVudD8ucmVwbGFjZSgvXFxzXFxzKy9nLCBcIiBcIikucmVwbGFjZSgvW1xcclxcbl0rL2csIFwiIFwiKSB8fCBcIlwiO1xuICAgIGVsc2VcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICBwcm9jZXNzTm9kZShub2RlLmNoaWxkTm9kZXNbaV0pO1xuICB9XG4gIHJldHVybiBwcm9jZXNzTm9kZShkb2MuYm9keSksIGRvYztcbn07XG5jb25zdCBXT1JEX0hUTUxfUkVHRVggPSAvKGNsYXNzPVwiP01zb3xzdHlsZT0oPzpcInwnKVteXCJdKj9cXGJtc28tfHc6V29yZERvY3VtZW50fDxvOlxcdys+fDxcXC9mb250PikvLCB1bndhbnRlZFBhdGhzID0gW1xuICBcIi8vbzpwXCIsXG4gIFwiLy9zcGFuW0BzdHlsZT0nbXNvLWxpc3Q6SWdub3JlJ11cIixcbiAgXCIvL3NwYW5bQHN0eWxlPSdtc28tbGlzdDogSWdub3JlJ11cIlxuXSwgbWFwcGVkUGF0aHMgPSBbXG4gIFwiLy9wW0BjbGFzcz0nTXNvVG9jSGVhZGluZyddXCIsXG4gIFwiLy9wW0BjbGFzcz0nTXNvVGl0bGUnXVwiLFxuICBcIi8vcFtAY2xhc3M9J01zb1RvYUhlYWRpbmcnXVwiLFxuICBcIi8vcFtAY2xhc3M9J01zb1N1YnRpdGxlJ11cIixcbiAgXCIvL3NwYW5bQGNsYXNzPSdNc29TdWJ0bGVFbXBoYXNpcyddXCIsXG4gIFwiLy9zcGFuW0BjbGFzcz0nTXNvSW50ZW5zZUVtcGhhc2lzJ11cIlxuXSwgZWxlbWVudE1hcCA9IHtcbiAgTXNvVG9jSGVhZGluZzogW1wiaDNcIl0sXG4gIE1zb1RpdGxlOiBbXCJoMVwiXSxcbiAgTXNvVG9hSGVhZGluZzogW1wiaDJcIl0sXG4gIE1zb1N1YnRpdGxlOiBbXCJoNVwiXSxcbiAgTXNvU3VidGxlRW1waGFzaXM6IFtcInNwYW5cIiwgXCJlbVwiXSxcbiAgTXNvSW50ZW5zZUVtcGhhc2lzOiBbXCJzcGFuXCIsIFwiZW1cIiwgXCJzdHJvbmdcIl1cbiAgLy8gUmVtb3ZlIGNydWZ0XG59O1xuZnVuY3Rpb24gaXNXb3JkSHRtbChodG1sKSB7XG4gIHJldHVybiBXT1JEX0hUTUxfUkVHRVgudGVzdChodG1sKTtcbn1cbnZhciBwcmVwcm9jZXNzV29yZCA9IChodG1sLCBkb2MpID0+IHtcbiAgaWYgKCFpc1dvcmRIdG1sKGh0bWwpKVxuICAgIHJldHVybiBkb2M7XG4gIGNvbnN0IHVud2FudGVkTm9kZXMgPSBkb2MuZXZhbHVhdGUoXG4gICAgdW53YW50ZWRQYXRocy5qb2luKFwifFwiKSxcbiAgICBkb2MsXG4gICAgKHByZWZpeCkgPT4gcHJlZml4ID09PSBcIm9cIiA/IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIgOiBudWxsLFxuICAgIF9YUGF0aFJlc3VsdC5VTk9SREVSRURfTk9ERV9TTkFQU0hPVF9UWVBFLFxuICAgIG51bGxcbiAgKTtcbiAgZm9yIChsZXQgaSA9IHVud2FudGVkTm9kZXMuc25hcHNob3RMZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IHVud2FudGVkID0gdW53YW50ZWROb2Rlcy5zbmFwc2hvdEl0ZW0oaSk7XG4gICAgdW53YW50ZWQ/LnBhcmVudE5vZGUgJiYgdW53YW50ZWQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh1bndhbnRlZCk7XG4gIH1cbiAgY29uc3QgbWFwcGVkRWxlbWVudHMgPSBkb2MuZXZhbHVhdGUoXG4gICAgbWFwcGVkUGF0aHMuam9pbihcInxcIiksXG4gICAgZG9jLFxuICAgIG51bGwsXG4gICAgX1hQYXRoUmVzdWx0LlVOT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEUsXG4gICAgbnVsbFxuICApO1xuICBmb3IgKGxldCBpID0gbWFwcGVkRWxlbWVudHMuc25hcHNob3RMZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IG1hcHBlZEVsbSA9IG1hcHBlZEVsZW1lbnRzLnNuYXBzaG90SXRlbShpKSwgdGFncyA9IGVsZW1lbnRNYXBbbWFwcGVkRWxtLmNsYXNzTmFtZV0sIHRleHQgPSBkb2MuY3JlYXRlVGV4dE5vZGUobWFwcGVkRWxtLnRleHRDb250ZW50IHx8IFwiXCIpO1xuICAgIGlmICghdGFncylcbiAgICAgIGNvbnRpbnVlO1xuICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2MuY3JlYXRlRWxlbWVudCh0YWdzWzBdKTtcbiAgICBsZXQgcGFyZW50ID0gcGFyZW50RWxlbWVudCwgY2hpbGQgPSBwYXJlbnRFbGVtZW50O1xuICAgIHRhZ3Muc2xpY2UoMSkuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICBjaGlsZCA9IGRvYy5jcmVhdGVFbGVtZW50KHRhZyksIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCksIHBhcmVudCA9IGNoaWxkO1xuICAgIH0pLCBjaGlsZC5hcHBlbmRDaGlsZCh0ZXh0KSwgbWFwcGVkRWxtPy5wYXJlbnROb2RlPy5yZXBsYWNlQ2hpbGQocGFyZW50RWxlbWVudCwgbWFwcGVkRWxtKTtcbiAgfVxuICByZXR1cm4gZG9jO1xufSwgcHJlcHJvY2Vzc29ycyA9IFtcbiAgcHJlcHJvY2Vzc1doaXRlc3BhY2UsXG4gIHByZXByb2Nlc3NOb3Rpb24sXG4gIHByZXByb2Nlc3NXb3JkLFxuICBwcmVwcm9jZXNzR0RvY3MsXG4gIHByZXByb2Nlc3NIVE1MXG5dO1xuZnVuY3Rpb24gY3JlYXRlUnVsZU9wdGlvbnMoYmxvY2tDb250ZW50VHlwZSkge1xuICBjb25zdCBmZWF0dXJlcyA9IGJsb2NrQ29udGVudEZlYXR1cmVzKGJsb2NrQ29udGVudFR5cGUpLCBlbmFibGVkQmxvY2tTdHlsZXMgPSBmZWF0dXJlcy5zdHlsZXMubWFwKFxuICAgIChpdGVtKSA9PiBpdGVtLnZhbHVlIHx8IGl0ZW0udGl0bGVcbiAgKSwgZW5hYmxlZFNwYW5EZWNvcmF0b3JzID0gZmVhdHVyZXMuZGVjb3JhdG9ycy5tYXAoXG4gICAgKGl0ZW0pID0+IGl0ZW0udmFsdWUgfHwgaXRlbS50aXRsZVxuICApLCBlbmFibGVkQmxvY2tBbm5vdGF0aW9ucyA9IGZlYXR1cmVzLmFubm90YXRpb25zLm1hcChcbiAgICAoaXRlbSkgPT4gaXRlbS52YWx1ZSB8fCBpdGVtLnRpdGxlIHx8IFwiXCJcbiAgKSwgZW5hYmxlZExpc3RUeXBlcyA9IGZlYXR1cmVzLmxpc3RzLm1hcChcbiAgICAoaXRlbSkgPT4gaXRlbS52YWx1ZSB8fCBpdGVtLnRpdGxlIHx8IFwiXCJcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBlbmFibGVkQmxvY2tTdHlsZXMsXG4gICAgZW5hYmxlZFNwYW5EZWNvcmF0b3JzLFxuICAgIGVuYWJsZWRCbG9ja0Fubm90YXRpb25zLFxuICAgIGVuYWJsZWRMaXN0VHlwZXNcbiAgfTtcbn1cbmZ1bmN0aW9uIHRhZ05hbWUoZWwpIHtcbiAgaWYgKGVsICYmIFwidGFnTmFtZVwiIGluIGVsKVxuICAgIHJldHVybiBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBwcmVwcm9jZXNzKGh0bWwsIHBhcnNlSHRtbCwgb3B0aW9ucykge1xuICBjb25zdCBjbGVhbkhUTUwgPSBPKGh0bWwpLCBkb2MgPSBwYXJzZUh0bWwobm9ybWFsaXplSHRtbEJlZm9yZVByZXByb2Nlc3MoY2xlYW5IVE1MKSk7XG4gIHJldHVybiBwcmVwcm9jZXNzb3JzLmZvckVhY2goKHByb2Nlc3NvcikgPT4ge1xuICAgIHByb2Nlc3NvcihjbGVhbkhUTUwsIGRvYywgb3B0aW9ucyk7XG4gIH0pLCBkb2M7XG59XG5mdW5jdGlvbiBub3JtYWxpemVIdG1sQmVmb3JlUHJlcHJvY2VzcyhodG1sKSB7XG4gIHJldHVybiBodG1sLnRyaW0oKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRQYXJzZUh0bWwoKSB7XG4gIGlmIChyZXNvbHZlSnNUeXBlKERPTVBhcnNlcikgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJUaGUgbmF0aXZlIGBET01QYXJzZXJgIGdsb2JhbCB3aGljaCB0aGUgYEh0bWxgIGRlc2VyaWFsaXplciB1c2VzIGJ5IGRlZmF1bHQgaXMgbm90IHByZXNlbnQgaW4gdGhpcyBlbnZpcm9ubWVudC4gWW91IG11c3Qgc3VwcGx5IHRoZSBgb3B0aW9ucy5wYXJzZUh0bWxgIGZ1bmN0aW9uIGluc3RlYWQuXCJcbiAgICApO1xuICByZXR1cm4gKGh0bWwpID0+IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIik7XG59XG5mdW5jdGlvbiBmbGF0dGVuTmVzdGVkQmxvY2tzKGJsb2NrczIpIHtcbiAgbGV0IGRlcHRoID0gMDtcbiAgY29uc3QgZmxhdHRlbmVkID0gW10sIHRyYXZlcnNlID0gKG5vZGVzKSA9PiB7XG4gICAgY29uc3QgdG9SZW1vdmUgPSBbXTtcbiAgICBub2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICBkZXB0aCA9PT0gMCAmJiBmbGF0dGVuZWQucHVzaChub2RlKSwgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2sobm9kZSkgJiYgKGRlcHRoID4gMCAmJiAodG9SZW1vdmUucHVzaChub2RlKSwgZmxhdHRlbmVkLnB1c2gobm9kZSkpLCBkZXB0aCsrLCB0cmF2ZXJzZShub2RlLmNoaWxkcmVuKSksIG5vZGUuX3R5cGUgPT09IFwiX19ibG9ja1wiICYmICh0b1JlbW92ZS5wdXNoKG5vZGUpLCBmbGF0dGVuZWQucHVzaChub2RlLmJsb2NrKSk7XG4gICAgfSksIHRvUmVtb3ZlLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgIG5vZGVzLnNwbGljZShub2Rlcy5pbmRleE9mKG5vZGUpLCAxKTtcbiAgICB9KSwgZGVwdGgtLTtcbiAgfTtcbiAgcmV0dXJuIHRyYXZlcnNlKGJsb2NrczIpLCBmbGF0dGVuZWQ7XG59XG5mdW5jdGlvbiBuZXh0U3BhbihibG9jaywgaW5kZXgpIHtcbiAgY29uc3QgbmV4dCA9IGJsb2NrLmNoaWxkcmVuW2luZGV4ICsgMV07XG4gIHJldHVybiBuZXh0ICYmIG5leHQuX3R5cGUgPT09IFwic3BhblwiID8gbmV4dCA6IG51bGw7XG59XG5mdW5jdGlvbiBwcmV2U3BhbihibG9jaywgaW5kZXgpIHtcbiAgY29uc3QgcHJldiA9IGJsb2NrLmNoaWxkcmVuW2luZGV4IC0gMV07XG4gIHJldHVybiBwcmV2ICYmIHByZXYuX3R5cGUgPT09IFwic3BhblwiID8gcHJldiA6IG51bGw7XG59XG5mdW5jdGlvbiBpc1doaXRlU3BhY2VDaGFyKHRleHQpIHtcbiAgcmV0dXJuIFtcIlxceEEwXCIsIFwiIFwiXS5pbmNsdWRlcyh0ZXh0KTtcbn1cbmZ1bmN0aW9uIHRyaW1XaGl0ZXNwYWNlKGJsb2NrczIpIHtcbiAgcmV0dXJuIGJsb2NrczIuZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhibG9jaykgJiYgYmxvY2suY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoIWlzTWluaW1hbFNwYW4oY2hpbGQpKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBuZXh0Q2hpbGQgPSBuZXh0U3BhbihibG9jaywgaW5kZXgpLCBwcmV2Q2hpbGQgPSBwcmV2U3BhbihibG9jaywgaW5kZXgpO1xuICAgICAgaW5kZXggPT09IDAgJiYgKGNoaWxkLnRleHQgPSBjaGlsZC50ZXh0LnJlcGxhY2UoL15bXlxcU1xcbl0rL2csIFwiXCIpKSwgaW5kZXggPT09IGJsb2NrLmNoaWxkcmVuLmxlbmd0aCAtIDEgJiYgKGNoaWxkLnRleHQgPSBjaGlsZC50ZXh0LnJlcGxhY2UoL1teXFxTXFxuXSskL2csIFwiXCIpKSwgL1xccy8udGVzdChjaGlsZC50ZXh0LnNsaWNlKE1hdGgubWF4KDAsIGNoaWxkLnRleHQubGVuZ3RoIC0gMSkpKSAmJiBuZXh0Q2hpbGQgJiYgaXNNaW5pbWFsU3BhbihuZXh0Q2hpbGQpICYmIC9cXHMvLnRlc3QobmV4dENoaWxkLnRleHQuc2xpY2UoMCwgMSkpICYmIChjaGlsZC50ZXh0ID0gY2hpbGQudGV4dC5yZXBsYWNlKC9bXlxcU1xcbl0rJC9nLCBcIlwiKSksIC9cXHMvLnRlc3QoY2hpbGQudGV4dC5zbGljZSgwLCAxKSkgJiYgcHJldkNoaWxkICYmIGlzTWluaW1hbFNwYW4ocHJldkNoaWxkKSAmJiAvXFxzLy50ZXN0KHByZXZDaGlsZC50ZXh0LnNsaWNlKE1hdGgubWF4KDAsIHByZXZDaGlsZC50ZXh0Lmxlbmd0aCAtIDEpKSkgJiYgKGNoaWxkLnRleHQgPSBjaGlsZC50ZXh0LnJlcGxhY2UoL15bXlxcU1xcbl0rL2csIFwiXCIpKSwgY2hpbGQudGV4dCB8fCBibG9jay5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpLCBwcmV2Q2hpbGQgJiYgaXNFcXVhbChwcmV2Q2hpbGQubWFya3MsIGNoaWxkLm1hcmtzKSAmJiBpc1doaXRlU3BhY2VDaGFyKGNoaWxkLnRleHQpID8gKHByZXZDaGlsZC50ZXh0ICs9IFwiIFwiLCBibG9jay5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpKSA6IG5leHRDaGlsZCAmJiBpc0VxdWFsKG5leHRDaGlsZC5tYXJrcywgY2hpbGQubWFya3MpICYmIGlzV2hpdGVTcGFjZUNoYXIoY2hpbGQudGV4dCkgJiYgKG5leHRDaGlsZC50ZXh0ID0gYCAke25leHRDaGlsZC50ZXh0fWAsIGJsb2NrLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSkpO1xuICAgIH0pO1xuICB9KSwgYmxvY2tzMjtcbn1cbmZ1bmN0aW9uIGVuc3VyZVJvb3RJc0Jsb2NrcyhibG9ja3MyKSB7XG4gIHJldHVybiBibG9ja3MyLnJlZHVjZSgobWVtbywgbm9kZSwgaSwgb3JpZ2luYWwpID0+IHtcbiAgICBpZiAobm9kZS5fdHlwZSA9PT0gXCJibG9ja1wiKVxuICAgICAgcmV0dXJuIG1lbW8ucHVzaChub2RlKSwgbWVtbztcbiAgICBpZiAobm9kZS5fdHlwZSA9PT0gXCJfX2Jsb2NrXCIpXG4gICAgICByZXR1cm4gbWVtby5wdXNoKG5vZGUuYmxvY2spLCBtZW1vO1xuICAgIGNvbnN0IGxhc3RCbG9jayA9IG1lbW9bbWVtby5sZW5ndGggLSAxXTtcbiAgICBpZiAoaSA+IDAgJiYgIWlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKG9yaWdpbmFsW2kgLSAxXSkgJiYgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2sobGFzdEJsb2NrKSlcbiAgICAgIHJldHVybiBsYXN0QmxvY2suY2hpbGRyZW4ucHVzaChub2RlKSwgbWVtbztcbiAgICBjb25zdCBibG9jayA9IHtcbiAgICAgIC4uLkRFRkFVTFRfQkxPQ0ssXG4gICAgICBjaGlsZHJlbjogW25vZGVdXG4gICAgfTtcbiAgICByZXR1cm4gbWVtby5wdXNoKGJsb2NrKSwgbWVtbztcbiAgfSwgW10pO1xufVxuZnVuY3Rpb24gaXNOb2RlTGlzdChub2RlKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobm9kZSkgPT09IFwiW29iamVjdCBOb2RlTGlzdF1cIjtcbn1cbmZ1bmN0aW9uIGlzTWluaW1hbFNwYW4obm9kZSkge1xuICByZXR1cm4gbm9kZS5fdHlwZSA9PT0gXCJzcGFuXCI7XG59XG5mdW5jdGlvbiBpc01pbmltYWxCbG9jayhub2RlKSB7XG4gIHJldHVybiBub2RlLl90eXBlID09PSBcImJsb2NrXCI7XG59XG5mdW5jdGlvbiBpc1BsYWNlaG9sZGVyRGVjb3JhdG9yKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX3R5cGUgPT09IFwiX19kZWNvcmF0b3JcIjtcbn1cbmZ1bmN0aW9uIGlzUGxhY2Vob2xkZXJBbm5vdGF0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX3R5cGUgPT09IFwiX19hbm5vdGF0aW9uXCI7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdoaXRlc3BhY2Uocm9vdE5vZGUpIHtcbiAgbGV0IGVtcHR5QmxvY2tDb3VudCA9IDAsIGxhc3RQYXJlbnQgPSBudWxsO1xuICBjb25zdCBub2Rlc1RvUmVtb3ZlID0gW107XG4gIGZvciAobGV0IGNoaWxkID0gcm9vdE5vZGUuZmlyc3RDaGlsZDsgY2hpbGQ7IGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmcpIHtcbiAgICBpZiAoIWlzRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIG5vcm1hbGl6ZVdoaXRlc3BhY2UoY2hpbGQpLCBlbXB0eUJsb2NrQ291bnQgPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGVsbSA9IGNoaWxkO1xuICAgIGlzV2hpdGVzcGFjZUJsb2NrKGVsbSkgPyAobGFzdFBhcmVudCAmJiBlbG0ucGFyZW50RWxlbWVudCA9PT0gbGFzdFBhcmVudCA/IChlbXB0eUJsb2NrQ291bnQrKywgZW1wdHlCbG9ja0NvdW50ID4gMSAmJiBub2Rlc1RvUmVtb3ZlLnB1c2goZWxtKSkgOiBlbXB0eUJsb2NrQ291bnQgPSAxLCBsYXN0UGFyZW50ID0gZWxtLnBhcmVudEVsZW1lbnQpIDogKG5vcm1hbGl6ZVdoaXRlc3BhY2UoY2hpbGQpLCBlbXB0eUJsb2NrQ291bnQgPSAwKTtcbiAgfVxuICBub2Rlc1RvUmVtb3ZlLmZvckVhY2goKG5vZGUpID0+IG5vZGUucGFyZW50RWxlbWVudD8ucmVtb3ZlQ2hpbGQobm9kZSkpO1xufVxuZnVuY3Rpb24gcmVtb3ZlQWxsV2hpdGVzcGFjZShyb290Tm9kZSkge1xuICBjb25zdCBub2Rlc1RvUmVtb3ZlID0gW107XG4gIGZ1bmN0aW9uIGNvbGxlY3ROb2Rlc1RvUmVtb3ZlKGN1cnJlbnROb2RlKSB7XG4gICAgaWYgKGlzRWxlbWVudChjdXJyZW50Tm9kZSkpIHtcbiAgICAgIGNvbnN0IGVsbSA9IGN1cnJlbnROb2RlO1xuICAgICAgaWYgKHRhZ05hbWUoZWxtKSA9PT0gXCJiclwiICYmICh0YWdOYW1lKGVsbS5uZXh0RWxlbWVudFNpYmxpbmcpID09PSBcInBcIiB8fCB0YWdOYW1lKGVsbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSA9PT0gXCJwXCIpKSB7XG4gICAgICAgIG5vZGVzVG9SZW1vdmUucHVzaChlbG0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoKHRhZ05hbWUoZWxtKSA9PT0gXCJwXCIgfHwgdGFnTmFtZShlbG0pID09PSBcImJyXCIpICYmIGVsbT8uZmlyc3RDaGlsZD8udGV4dENvbnRlbnQ/LnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBub2Rlc1RvUmVtb3ZlLnB1c2goZWxtKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgY2hpbGQgPSBlbG0uZmlyc3RDaGlsZDsgY2hpbGQ7IGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmcpXG4gICAgICAgIGNvbGxlY3ROb2Rlc1RvUmVtb3ZlKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgY29sbGVjdE5vZGVzVG9SZW1vdmUocm9vdE5vZGUpLCBub2Rlc1RvUmVtb3ZlLmZvckVhY2goKG5vZGUpID0+IG5vZGUucGFyZW50RWxlbWVudD8ucmVtb3ZlQ2hpbGQobm9kZSkpO1xufVxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlQmxvY2soZWxtKSB7XG4gIHJldHVybiBbXCJwXCIsIFwiYnJcIl0uaW5jbHVkZXModGFnTmFtZShlbG0pIHx8IFwiXCIpICYmICFlbG0udGV4dENvbnRlbnQ/LnRyaW0oKTtcbn1cbmNvbnN0IExJU1RfQ09OVEFJTkVSX1RBR1MgPSBPYmplY3Qua2V5cyhIVE1MX0xJU1RfQ09OVEFJTkVSX1RBR1MpO1xuZnVuY3Rpb24gaXNFbXBoYXNpcyQxKGVsKSB7XG4gIGNvbnN0IHN0eWxlID0gaXNFbGVtZW50KGVsKSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgcmV0dXJuIC9mb250LXN0eWxlXFxzKjpcXHMqaXRhbGljLy50ZXN0KHN0eWxlIHx8IFwiXCIpO1xufVxuZnVuY3Rpb24gaXNTdHJvbmckMShlbCkge1xuICBjb25zdCBzdHlsZSA9IGlzRWxlbWVudChlbCkgJiYgZWwuZ2V0QXR0cmlidXRlKFwic3R5bGVcIik7XG4gIHJldHVybiAvZm9udC13ZWlnaHRcXHMqOlxccyo3MDAvLnRlc3Qoc3R5bGUgfHwgXCJcIik7XG59XG5mdW5jdGlvbiBpc1VuZGVybGluZSQxKGVsKSB7XG4gIGlmICghaXNFbGVtZW50KGVsKSB8fCB0YWdOYW1lKGVsLnBhcmVudE5vZGUpID09PSBcImFcIilcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IHN0eWxlID0gaXNFbGVtZW50KGVsKSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgcmV0dXJuIC90ZXh0LWRlY29yYXRpb25cXHMqOlxccyp1bmRlcmxpbmUvLnRlc3Qoc3R5bGUgfHwgXCJcIik7XG59XG5mdW5jdGlvbiBpc1N0cmlrZXRocm91Z2goZWwpIHtcbiAgY29uc3Qgc3R5bGUgPSBpc0VsZW1lbnQoZWwpICYmIGVsLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICByZXR1cm4gL3RleHQtZGVjb3JhdGlvblxccyo6XFxzKig/Oi4qbGluZS10aHJvdWdoLio7KS8udGVzdChzdHlsZSB8fCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGlzR29vZ2xlRG9jcyhlbCkge1xuICByZXR1cm4gaXNFbGVtZW50KGVsKSAmJiAhIWVsLmdldEF0dHJpYnV0ZShcImRhdGEtaXMtZ29vZ2xlLWRvY3NcIik7XG59XG5mdW5jdGlvbiBpc1Jvb3ROb2RlKGVsKSB7XG4gIHJldHVybiBpc0VsZW1lbnQoZWwpICYmICEhZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1pcy1yb290LW5vZGVcIik7XG59XG5mdW5jdGlvbiBnZXRMaXN0SXRlbVN0eWxlJDEoZWwpIHtcbiAgY29uc3QgcGFyZW50VGFnID0gdGFnTmFtZShlbC5wYXJlbnROb2RlKTtcbiAgaWYgKCEocGFyZW50VGFnICYmICFMSVNUX0NPTlRBSU5FUl9UQUdTLmluY2x1ZGVzKHBhcmVudFRhZykpKVxuICAgIHJldHVybiB0YWdOYW1lKGVsLnBhcmVudE5vZGUpID09PSBcInVsXCIgPyBcImJ1bGxldFwiIDogXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGdldExpc3RJdGVtTGV2ZWwkMShlbCkge1xuICBsZXQgbGV2ZWwgPSAwO1xuICBpZiAodGFnTmFtZShlbCkgPT09IFwibGlcIikge1xuICAgIGxldCBwYXJlbnROb2RlID0gZWwucGFyZW50Tm9kZTtcbiAgICBmb3IgKDsgcGFyZW50Tm9kZTsgKSB7XG4gICAgICBjb25zdCBwYXJlbnRUYWcgPSB0YWdOYW1lKHBhcmVudE5vZGUpO1xuICAgICAgcGFyZW50VGFnICYmIExJU1RfQ09OVEFJTkVSX1RBR1MuaW5jbHVkZXMocGFyZW50VGFnKSAmJiBsZXZlbCsrLCBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfSBlbHNlXG4gICAgbGV2ZWwgPSAxO1xuICByZXR1cm4gbGV2ZWw7XG59XG5jb25zdCBibG9ja3MgPSB7XG4gIC4uLkhUTUxfQkxPQ0tfVEFHUyxcbiAgLi4uSFRNTF9IRUFERVJfVEFHU1xufTtcbmZ1bmN0aW9uIGdldEJsb2NrU3R5bGUoZWwsIGVuYWJsZWRCbG9ja1N0eWxlcykge1xuICBjb25zdCBjaGlsZFRhZyA9IHRhZ05hbWUoZWwuZmlyc3RDaGlsZCksIGJsb2NrID0gY2hpbGRUYWcgJiYgYmxvY2tzW2NoaWxkVGFnXTtcbiAgcmV0dXJuIGJsb2NrICYmIGVuYWJsZWRCbG9ja1N0eWxlcy5pbmNsdWRlcyhibG9jay5zdHlsZSkgPyBibG9jay5zdHlsZSA6IEJMT0NLX0RFRkFVTFRfU1RZTEU7XG59XG5mdW5jdGlvbiBjcmVhdGVHRG9jc1J1bGVzKF9ibG9ja0NvbnRlbnRUeXBlLCBvcHRpb25zKSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgZGVzZXJpYWxpemUoZWwpIHtcbiAgICAgICAgaWYgKGlzRWxlbWVudChlbCkgJiYgdGFnTmFtZShlbCkgPT09IFwic3BhblwiICYmIGlzR29vZ2xlRG9jcyhlbCkpIHtcbiAgICAgICAgICBjb25zdCBzcGFuID0ge1xuICAgICAgICAgICAgLi4uREVGQVVMVF9TUEFOLFxuICAgICAgICAgICAgbWFya3M6IFtdLFxuICAgICAgICAgICAgdGV4dDogZWwudGV4dENvbnRlbnRcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpc1N0cm9uZyQxKGVsKSAmJiBzcGFuLm1hcmtzLnB1c2goXCJzdHJvbmdcIiksIGlzVW5kZXJsaW5lJDEoZWwpICYmIHNwYW4ubWFya3MucHVzaChcInVuZGVybGluZVwiKSwgaXNTdHJpa2V0aHJvdWdoKGVsKSAmJiBzcGFuLm1hcmtzLnB1c2goXCJzdHJpa2UtdGhyb3VnaFwiKSwgaXNFbXBoYXNpcyQxKGVsKSAmJiBzcGFuLm1hcmtzLnB1c2goXCJlbVwiKSwgc3BhbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgZGVzZXJpYWxpemUoZWwsIG5leHQpIHtcbiAgICAgICAgaWYgKHRhZ05hbWUoZWwpID09PSBcImxpXCIgJiYgaXNHb29nbGVEb2NzKGVsKSlcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uREVGQVVMVF9CTE9DSyxcbiAgICAgICAgICAgIGxpc3RJdGVtOiBnZXRMaXN0SXRlbVN0eWxlJDEoZWwpLFxuICAgICAgICAgICAgbGV2ZWw6IGdldExpc3RJdGVtTGV2ZWwkMShlbCksXG4gICAgICAgICAgICBzdHlsZTogZ2V0QmxvY2tTdHlsZShlbCwgb3B0aW9ucy5lbmFibGVkQmxvY2tTdHlsZXMpLFxuICAgICAgICAgICAgY2hpbGRyZW46IG5leHQoZWwuZmlyc3RDaGlsZD8uY2hpbGROb2RlcyB8fCBbXSlcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgZGVzZXJpYWxpemUoZWwpIHtcbiAgICAgICAgaWYgKHRhZ05hbWUoZWwpID09PSBcImJyXCIgJiYgaXNHb29nbGVEb2NzKGVsKSAmJiBpc0VsZW1lbnQoZWwpICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhcImFwcGxlLWludGVyY2hhbmdlLW5ld2xpbmVcIikpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLkRFRkFVTFRfU1BBTixcbiAgICAgICAgICAgIHRleHQ6IFwiXCJcbiAgICAgICAgICB9O1xuICAgICAgICBpZiAodGFnTmFtZShlbCkgPT09IFwiYnJcIiAmJiBpc0dvb2dsZURvY3MoZWwpICYmIGlzRWxlbWVudChlbCkgJiYgZWw/LnBhcmVudE5vZGU/LnRleHRDb250ZW50ID09PSBcIlwiKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5ERUZBVUxUX1NQQU4sXG4gICAgICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICAgICAgfTtcbiAgICAgICAgaWYgKHRhZ05hbWUoZWwpID09PSBcImJyXCIgJiYgaXNHb29nbGVEb2NzKGVsKSAmJiBpc0VsZW1lbnQoZWwpICYmIGlzUm9vdE5vZGUoZWwpKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5ERUZBVUxUX1NQQU4sXG4gICAgICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIF07XG59XG5mdW5jdGlvbiBrZXlHZW5lcmF0b3IoKSB7XG4gIHJldHVybiByYW5kb21LZXkoMTIpO1xufVxuZnVuY3Rpb24gd2hhdHdnUk5HKGxlbmd0aCA9IDE2KSB7XG4gIGNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCksIHJuZHM4O1xufVxuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKVxuICBieXRlVG9IZXhbaV0gPSAoaSArIDI1NikudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xuZnVuY3Rpb24gcmFuZG9tS2V5KGxlbmd0aCkge1xuICByZXR1cm4gd2hhdHdnUk5HKGxlbmd0aCkucmVkdWNlKChzdHIsIG4pID0+IHN0ciArIGJ5dGVUb0hleFtuXSwgXCJcIikuc2xpY2UoMCwgbGVuZ3RoKTtcbn1cbmNvbnN0IHdoaXRlc3BhY2VUZXh0Tm9kZVJ1bGUgPSB7XG4gIGRlc2VyaWFsaXplKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlTmFtZSA9PT0gXCIjdGV4dFwiICYmIGlzV2hpdGVzcGFjZVRleHROb2RlKG5vZGUpID8ge1xuICAgICAgLi4uREVGQVVMVF9TUEFOLFxuICAgICAgbWFya3M6IFtdLFxuICAgICAgdGV4dDogKG5vZGUudGV4dENvbnRlbnQgPz8gXCJcIikucmVwbGFjZSgvXFxzXFxzKy9nLCBcIiBcIilcbiAgICB9IDogdm9pZCAwO1xuICB9XG59O1xuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlVGV4dE5vZGUobm9kZSkge1xuICByZXR1cm4gKG5vZGUubm9kZVR5cGUgPT09IDMgJiYgKG5vZGUudGV4dENvbnRlbnQgfHwgXCJcIikucmVwbGFjZSgvW1xcclxcbl0vZywgXCIgXCIpLnJlcGxhY2UoL1xcc1xccysvZywgXCIgXCIpID09PSBcIiBcIiAmJiBub2RlLm5leHRTaWJsaW5nICYmIG5vZGUubmV4dFNpYmxpbmcubm9kZVR5cGUgIT09IDMgJiYgbm9kZS5wcmV2aW91c1NpYmxpbmcgJiYgbm9kZS5wcmV2aW91c1NpYmxpbmcubm9kZVR5cGUgIT09IDMgfHwgbm9kZS50ZXh0Q29udGVudCAhPT0gXCIgXCIpICYmIHRhZ05hbWUobm9kZS5wYXJlbnROb2RlKSAhPT0gXCJib2R5XCI7XG59XG5mdW5jdGlvbiByZXNvbHZlTGlzdEl0ZW0obGlzdE5vZGVUYWdOYW1lLCBlbmFibGVkTGlzdFR5cGVzKSB7XG4gIGlmIChsaXN0Tm9kZVRhZ05hbWUgPT09IFwidWxcIiAmJiBlbmFibGVkTGlzdFR5cGVzLmluY2x1ZGVzKFwiYnVsbGV0XCIpKVxuICAgIHJldHVybiBcImJ1bGxldFwiO1xuICBpZiAobGlzdE5vZGVUYWdOYW1lID09PSBcIm9sXCIgJiYgZW5hYmxlZExpc3RUeXBlcy5pbmNsdWRlcyhcIm51bWJlclwiKSlcbiAgICByZXR1cm4gXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhUTUxSdWxlcyhfYmxvY2tDb250ZW50VHlwZSwgb3B0aW9ucykge1xuICByZXR1cm4gW1xuICAgIHdoaXRlc3BhY2VUZXh0Tm9kZVJ1bGUsXG4gICAge1xuICAgICAgLy8gUHJlIGVsZW1lbnRcbiAgICAgIGRlc2VyaWFsaXplKGVsKSB7XG4gICAgICAgIGlmICh0YWdOYW1lKGVsKSAhPT0gXCJwcmVcIilcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGlzQ29kZUVuYWJsZWQgPSBvcHRpb25zLmVuYWJsZWRCbG9ja1N0eWxlcy5pbmNsdWRlcyhcImNvZGVcIik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX3R5cGU6IFwiYmxvY2tcIixcbiAgICAgICAgICBzdHlsZTogXCJub3JtYWxcIixcbiAgICAgICAgICBtYXJrRGVmczogW10sXG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLi4uREVGQVVMVF9TUEFOLFxuICAgICAgICAgICAgICBtYXJrczogaXNDb2RlRW5hYmxlZCA/IFtcImNvZGVcIl0gOiBbXSxcbiAgICAgICAgICAgICAgdGV4dDogZWwudGV4dENvbnRlbnQgfHwgXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIEJsb2NrcXVvdGUgZWxlbWVudFxuICAgIHtcbiAgICAgIGRlc2VyaWFsaXplKGVsLCBuZXh0KSB7XG4gICAgICAgIGlmICh0YWdOYW1lKGVsKSAhPT0gXCJibG9ja3F1b3RlXCIpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBibG9ja3MyID0ge1xuICAgICAgICAgIC4uLkhUTUxfQkxPQ0tfVEFHUyxcbiAgICAgICAgICAuLi5IVE1MX0hFQURFUl9UQUdTXG4gICAgICAgIH07XG4gICAgICAgIGRlbGV0ZSBibG9ja3MyLmJsb2NrcXVvdGU7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgIHJldHVybiBlbC5jaGlsZE5vZGVzLmZvckVhY2goKG5vZGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgT2JqZWN0LmtleXMoYmxvY2tzMikuaW5jbHVkZXMoXG4gICAgICAgICAgICBub2RlLmxvY2FsTmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgKSkge1xuICAgICAgICAgICAgaWYgKCFlbC5vd25lckRvY3VtZW50KVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBzcGFuID0gZWwub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgIHNwYW4uYXBwZW5kQ2hpbGQoZWwub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlxcclwiKSksIG5vZGUuY2hpbGROb2Rlcy5mb3JFYWNoKChjbikgPT4ge1xuICAgICAgICAgICAgICBzcGFuLmFwcGVuZENoaWxkKGNuLmNsb25lTm9kZSghMCkpO1xuICAgICAgICAgICAgfSksIGluZGV4ICE9PSBlbC5jaGlsZE5vZGVzLmxlbmd0aCAmJiBzcGFuLmFwcGVuZENoaWxkKGVsLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcXHJcIikpLCBjaGlsZHJlbi5wdXNoKHNwYW4pO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgfSksIHtcbiAgICAgICAgICBfdHlwZTogXCJibG9ja1wiLFxuICAgICAgICAgIHN0eWxlOiBcImJsb2NrcXVvdGVcIixcbiAgICAgICAgICBtYXJrRGVmczogW10sXG4gICAgICAgICAgY2hpbGRyZW46IG5leHQoY2hpbGRyZW4pXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBCbG9jayBlbGVtZW50c1xuICAgIHtcbiAgICAgIGRlc2VyaWFsaXplKGVsLCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IGJsb2NrczIgPSB7XG4gICAgICAgICAgLi4uSFRNTF9CTE9DS19UQUdTLFxuICAgICAgICAgIC4uLkhUTUxfSEVBREVSX1RBR1NcbiAgICAgICAgfSwgdGFnID0gdGFnTmFtZShlbCk7XG4gICAgICAgIGxldCBibG9jayA9IHRhZyA/IGJsb2NrczJbdGFnXSA6IHZvaWQgMDtcbiAgICAgICAgaWYgKGJsb2NrKVxuICAgICAgICAgIHJldHVybiBlbC5wYXJlbnROb2RlICYmIHRhZ05hbWUoZWwucGFyZW50Tm9kZSkgPT09IFwibGlcIiA/IG5leHQoZWwuY2hpbGROb2RlcykgOiAob3B0aW9ucy5lbmFibGVkQmxvY2tTdHlsZXMuaW5jbHVkZXMoYmxvY2suc3R5bGUpIHx8IChibG9jayA9IERFRkFVTFRfQkxPQ0spLCB7XG4gICAgICAgICAgICAuLi5ibG9jayxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBuZXh0KGVsLmNoaWxkTm9kZXMpXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBJZ25vcmUgc3BhbiB0YWdzXG4gICAge1xuICAgICAgZGVzZXJpYWxpemUoZWwsIG5leHQpIHtcbiAgICAgICAgY29uc3QgdGFnID0gdGFnTmFtZShlbCk7XG4gICAgICAgIGlmICghKCF0YWcgfHwgISh0YWcgaW4gSFRNTF9TUEFOX1RBR1MpKSlcbiAgICAgICAgICByZXR1cm4gbmV4dChlbC5jaGlsZE5vZGVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIElnbm9yZSBkaXYgdGFnc1xuICAgIHtcbiAgICAgIGRlc2VyaWFsaXplKGVsLCBuZXh0KSB7XG4gICAgICAgIGlmICh0YWdOYW1lKGVsKSA9PT0gXCJkaXZcIilcbiAgICAgICAgICByZXR1cm4gbmV4dChlbC5jaGlsZE5vZGVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIElnbm9yZSBsaXN0IGNvbnRhaW5lcnNcbiAgICB7XG4gICAgICBkZXNlcmlhbGl6ZShlbCwgbmV4dCkge1xuICAgICAgICBjb25zdCB0YWcgPSB0YWdOYW1lKGVsKTtcbiAgICAgICAgaWYgKCEoIXRhZyB8fCAhKHRhZyBpbiBIVE1MX0xJU1RfQ09OVEFJTkVSX1RBR1MpKSlcbiAgICAgICAgICByZXR1cm4gbmV4dChlbC5jaGlsZE5vZGVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIERlYWwgd2l0aCBicidzXG4gICAge1xuICAgICAgZGVzZXJpYWxpemUoZWwpIHtcbiAgICAgICAgaWYgKHRhZ05hbWUoZWwpID09PSBcImJyXCIpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLkRFRkFVTFRfU1BBTixcbiAgICAgICAgICAgIHRleHQ6IGBcbmBcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gRGVhbCB3aXRoIGxpc3QgaXRlbXNcbiAgICB7XG4gICAgICBkZXNlcmlhbGl6ZShlbCwgbmV4dCwgYmxvY2spIHtcbiAgICAgICAgY29uc3QgdGFnID0gdGFnTmFtZShlbCksIGxpc3RJdGVtID0gdGFnID8gSFRNTF9MSVNUX0lURU1fVEFHU1t0YWddIDogdm9pZCAwLCBwYXJlbnRUYWcgPSB0YWdOYW1lKGVsLnBhcmVudE5vZGUpIHx8IFwiXCI7XG4gICAgICAgIGlmICghbGlzdEl0ZW0gfHwgIWVsLnBhcmVudE5vZGUgfHwgIUhUTUxfTElTVF9DT05UQUlORVJfVEFHU1twYXJlbnRUYWddKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgZW5hYmxlZExpc3RJdGVtID0gcmVzb2x2ZUxpc3RJdGVtKFxuICAgICAgICAgIHBhcmVudFRhZyxcbiAgICAgICAgICBvcHRpb25zLmVuYWJsZWRMaXN0VHlwZXNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGVuYWJsZWRMaXN0SXRlbSA/IChsaXN0SXRlbS5saXN0SXRlbSA9IGVuYWJsZWRMaXN0SXRlbSwge1xuICAgICAgICAgIC4uLmxpc3RJdGVtLFxuICAgICAgICAgIGNoaWxkcmVuOiBuZXh0KGVsLmNoaWxkTm9kZXMpXG4gICAgICAgIH0pIDogYmxvY2soeyBfdHlwZTogXCJibG9ja1wiLCBjaGlsZHJlbjogbmV4dChlbC5jaGlsZE5vZGVzKSB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIERlYWwgd2l0aCBkZWNvcmF0b3JzIC0gdGhpcyBpcyBhIGxpbWl0ZWQgc2V0IG9mIGtub3duIGh0bWwgZWxlbWVudHMgdGhhdCB3ZSBrbm93IGhvdyB0byBkZXNlcmlhbGl6ZVxuICAgIHtcbiAgICAgIGRlc2VyaWFsaXplKGVsLCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IGRlY29yYXRvciA9IEhUTUxfREVDT1JBVE9SX1RBR1NbdGFnTmFtZShlbCkgfHwgXCJcIl07XG4gICAgICAgIGlmICghKCFkZWNvcmF0b3IgfHwgIW9wdGlvbnMuZW5hYmxlZFNwYW5EZWNvcmF0b3JzLmluY2x1ZGVzKGRlY29yYXRvcikpKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogXCJfX2RlY29yYXRvclwiLFxuICAgICAgICAgICAgbmFtZTogZGVjb3JhdG9yLFxuICAgICAgICAgICAgY2hpbGRyZW46IG5leHQoZWwuY2hpbGROb2RlcylcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBoeXBlcmxpbmtzLCBhZGQgYW5ub3RhdGlvbiAoaWYgYWxsb3dlZCBieSBzY2hlbWEpLFxuICAgIC8vIElmIG5vdCBzdXBwb3J0ZWQganVzdCB3cml0ZSBvdXQgdGhlIGxpbmsgdGV4dCBhbmQgaHJlZiBpbiBwbGFpbiB0ZXh0LlxuICAgIHtcbiAgICAgIGRlc2VyaWFsaXplKGVsLCBuZXh0KSB7XG4gICAgICAgIGlmICh0YWdOYW1lKGVsKSAhPT0gXCJhXCIpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBsaW5rRW5hYmxlZCA9IG9wdGlvbnMuZW5hYmxlZEJsb2NrQW5ub3RhdGlvbnMuaW5jbHVkZXMoXCJsaW5rXCIpLCBocmVmID0gaXNFbGVtZW50KGVsKSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICBpZiAoIWhyZWYpXG4gICAgICAgICAgcmV0dXJuIG5leHQoZWwuY2hpbGROb2Rlcyk7XG4gICAgICAgIGxldCBtYXJrRGVmO1xuICAgICAgICByZXR1cm4gbGlua0VuYWJsZWQgPyAobWFya0RlZiA9IHtcbiAgICAgICAgICBfa2V5OiBvcHRpb25zLmtleUdlbmVyYXRvciA/IG9wdGlvbnMua2V5R2VuZXJhdG9yKCkgOiBrZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICBfdHlwZTogXCJsaW5rXCIsXG4gICAgICAgICAgaHJlZlxuICAgICAgICB9LCB7XG4gICAgICAgICAgX3R5cGU6IFwiX19hbm5vdGF0aW9uXCIsXG4gICAgICAgICAgbWFya0RlZixcbiAgICAgICAgICBjaGlsZHJlbjogbmV4dChlbC5jaGlsZE5vZGVzKVxuICAgICAgICB9KSA6IGVsLmFwcGVuZENoaWxkKGVsLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYCAoJHtocmVmfSlgKSkgJiYgbmV4dChlbC5jaGlsZE5vZGVzKTtcbiAgICAgIH1cbiAgICB9XG4gIF07XG59XG5mdW5jdGlvbiBpc0VtcGhhc2lzKGVsKSB7XG4gIGNvbnN0IHN0eWxlID0gaXNFbGVtZW50KGVsKSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgcmV0dXJuIC9mb250LXN0eWxlOml0YWxpYy8udGVzdChzdHlsZSB8fCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGlzU3Ryb25nKGVsKSB7XG4gIGNvbnN0IHN0eWxlID0gaXNFbGVtZW50KGVsKSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgcmV0dXJuIC9mb250LXdlaWdodDo3MDAvLnRlc3Qoc3R5bGUgfHwgXCJcIikgfHwgL2ZvbnQtd2VpZ2h0OjYwMC8udGVzdChzdHlsZSB8fCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGlzVW5kZXJsaW5lKGVsKSB7XG4gIGNvbnN0IHN0eWxlID0gaXNFbGVtZW50KGVsKSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgcmV0dXJuIC90ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lLy50ZXN0KHN0eWxlIHx8IFwiXCIpO1xufVxuZnVuY3Rpb24gaXNOb3Rpb24oZWwpIHtcbiAgcmV0dXJuIGlzRWxlbWVudChlbCkgJiYgISFlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlzLW5vdGlvblwiKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vdGlvblJ1bGVzKF9ibG9ja0NvbnRlbnRUeXBlKSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgZGVzZXJpYWxpemUoZWwpIHtcbiAgICAgICAgaWYgKGlzRWxlbWVudChlbCkgJiYgdGFnTmFtZShlbCkgPT09IFwic3BhblwiICYmIGlzTm90aW9uKGVsKSkge1xuICAgICAgICAgIGNvbnN0IHNwYW4gPSB7XG4gICAgICAgICAgICAuLi5ERUZBVUxUX1NQQU4sXG4gICAgICAgICAgICBtYXJrczogW10sXG4gICAgICAgICAgICB0ZXh0OiBlbC50ZXh0Q29udGVudFxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGlzU3Ryb25nKGVsKSAmJiBzcGFuLm1hcmtzLnB1c2goXCJzdHJvbmdcIiksIGlzVW5kZXJsaW5lKGVsKSAmJiBzcGFuLm1hcmtzLnB1c2goXCJ1bmRlcmxpbmVcIiksIGlzRW1waGFzaXMoZWwpICYmIHNwYW4ubWFya3MucHVzaChcImVtXCIpLCBzcGFuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBdO1xufVxuZnVuY3Rpb24gZ2V0TGlzdEl0ZW1TdHlsZShlbCkge1xuICBjb25zdCBzdHlsZSA9IGlzRWxlbWVudChlbCkgJiYgZWwuZ2V0QXR0cmlidXRlKFwic3R5bGVcIik7XG4gIGlmIChzdHlsZSAmJiBzdHlsZS5tYXRjaCgvbGZvXFxkKy8pKVxuICAgIHJldHVybiBzdHlsZS5tYXRjaChcImxmbzFcIikgPyBcImJ1bGxldFwiIDogXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGdldExpc3RJdGVtTGV2ZWwoZWwpIHtcbiAgY29uc3Qgc3R5bGUgPSBpc0VsZW1lbnQoZWwpICYmIGVsLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICBpZiAoIXN0eWxlKVxuICAgIHJldHVybjtcbiAgY29uc3QgbGV2ZWxNYXRjaCA9IHN0eWxlLm1hdGNoKC9sZXZlbFxcZCsvKTtcbiAgaWYgKCFsZXZlbE1hdGNoKVxuICAgIHJldHVybjtcbiAgY29uc3QgW2xldmVsXSA9IGxldmVsTWF0Y2hbMF0ubWF0Y2goL1xcZC8pIHx8IFtdO1xuICByZXR1cm4gKGxldmVsID8gTnVtYmVyLnBhcnNlSW50KGxldmVsLCAxMCkgOiAxKSB8fCAxO1xufVxuZnVuY3Rpb24gaXNXb3JkTGlzdEVsZW1lbnQoZWwpIHtcbiAgcmV0dXJuIGlzRWxlbWVudChlbCkgJiYgZWwuY2xhc3NOYW1lID8gZWwuY2xhc3NOYW1lID09PSBcIk1zb0xpc3RQYXJhZ3JhcGhDeFNwRmlyc3RcIiB8fCBlbC5jbGFzc05hbWUgPT09IFwiTXNvTGlzdFBhcmFncmFwaEN4U3BNaWRkbGVcIiB8fCBlbC5jbGFzc05hbWUgPT09IFwiTXNvTGlzdFBhcmFncmFwaEN4U3BMYXN0XCIgOiAhMTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdvcmRSdWxlcygpIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBkZXNlcmlhbGl6ZShlbCwgbmV4dCkge1xuICAgICAgICBpZiAodGFnTmFtZShlbCkgPT09IFwicFwiICYmIGlzV29yZExpc3RFbGVtZW50KGVsKSlcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uREVGQVVMVF9CTE9DSyxcbiAgICAgICAgICAgIGxpc3RJdGVtOiBnZXRMaXN0SXRlbVN0eWxlKGVsKSxcbiAgICAgICAgICAgIGxldmVsOiBnZXRMaXN0SXRlbUxldmVsKGVsKSxcbiAgICAgICAgICAgIHN0eWxlOiBCTE9DS19ERUZBVUxUX1NUWUxFLFxuICAgICAgICAgICAgY2hpbGRyZW46IG5leHQoZWwuY2hpbGROb2RlcylcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgXTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGVzKGJsb2NrQ29udGVudFR5cGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIFtcbiAgICAuLi5jcmVhdGVXb3JkUnVsZXMoKSxcbiAgICAuLi5jcmVhdGVOb3Rpb25SdWxlcygpLFxuICAgIC4uLmNyZWF0ZUdEb2NzUnVsZXMoYmxvY2tDb250ZW50VHlwZSwgb3B0aW9ucyksXG4gICAgLi4uY3JlYXRlSFRNTFJ1bGVzKGJsb2NrQ29udGVudFR5cGUsIG9wdGlvbnMpXG4gIF07XG59XG5jbGFzcyBIdG1sRGVzZXJpYWxpemVyIHtcbiAgYmxvY2tDb250ZW50VHlwZTtcbiAgcnVsZXM7XG4gIHBhcnNlSHRtbDtcbiAgX21hcmtEZWZzID0gW107XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgc2VyaWFsaXplciByZXNwZWN0aW5nIGEgU2FuaXR5IGJsb2NrIGNvbnRlbnQgdHlwZSdzIHNjaGVtYVxuICAgKlxuICAgKiBAcGFyYW0gYmxvY2tDb250ZW50VHlwZSAtIFNjaGVtYSB0eXBlIGZvciBhcnJheSBjb250YWluaW5nIF9hdCBsZWFzdF8gYSBibG9jayBjaGlsZCB0eXBlXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGRlc2VyaWFsaXphdGlvbiBwcm9jZXNzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihibG9ja0NvbnRlbnRUeXBlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHJ1bGVzID0gW10sIHVuc3RhYmxlX3doaXRlc3BhY2VPblBhc3RlTW9kZSA9IFwicHJlc2VydmVcIiB9ID0gb3B0aW9ucztcbiAgICBpZiAoIWJsb2NrQ29udGVudFR5cGUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJhbWV0ZXIgJ2Jsb2NrQ29udGVudFR5cGUnIGlzIHJlcXVpcmVkXCIpO1xuICAgIGNvbnN0IHN0YW5kYXJkUnVsZXMgPSBjcmVhdGVSdWxlcyhibG9ja0NvbnRlbnRUeXBlLCB7XG4gICAgICAuLi5jcmVhdGVSdWxlT3B0aW9ucyhibG9ja0NvbnRlbnRUeXBlKSxcbiAgICAgIGtleUdlbmVyYXRvcjogb3B0aW9ucy5rZXlHZW5lcmF0b3JcbiAgICB9KTtcbiAgICB0aGlzLnJ1bGVzID0gWy4uLnJ1bGVzLCAuLi5zdGFuZGFyZFJ1bGVzXTtcbiAgICBjb25zdCBwYXJzZUh0bWwgPSBvcHRpb25zLnBhcnNlSHRtbCB8fCBkZWZhdWx0UGFyc2VIdG1sKCk7XG4gICAgdGhpcy5ibG9ja0NvbnRlbnRUeXBlID0gYmxvY2tDb250ZW50VHlwZSwgdGhpcy5wYXJzZUh0bWwgPSAoaHRtbCkgPT4gcHJlcHJvY2VzcyhodG1sLCBwYXJzZUh0bWwsIHsgdW5zdGFibGVfd2hpdGVzcGFjZU9uUGFzdGVNb2RlIH0pLmJvZHk7XG4gIH1cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplIEhUTUwuXG4gICAqXG4gICAqIEBwYXJhbSBodG1sIC0gVGhlIEhUTUwgdG8gZGVzZXJpYWxpemUsIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIGJsb2NrcyAtIGVpdGhlciBwb3J0YWJsZSB0ZXh0IGJsb2NrcyBvciBvdGhlciBhbGxvd2VkIGJsb2Nrc1xuICAgKi9cbiAgZGVzZXJpYWxpemUgPSAoaHRtbCkgPT4ge1xuICAgIHRoaXMuX21hcmtEZWZzID0gW107XG4gICAgY29uc3QgeyBwYXJzZUh0bWwgfSA9IHRoaXMsIGZyYWdtZW50ID0gcGFyc2VIdG1sKGh0bWwpLCBjaGlsZHJlbiA9IEFycmF5LmZyb20oZnJhZ21lbnQuY2hpbGROb2RlcyksIGJsb2NrczIgPSB0cmltV2hpdGVzcGFjZShcbiAgICAgIGZsYXR0ZW5OZXN0ZWRCbG9ja3MoXG4gICAgICAgIGVuc3VyZVJvb3RJc0Jsb2Nrcyh0aGlzLmRlc2VyaWFsaXplRWxlbWVudHMoY2hpbGRyZW4pKVxuICAgICAgKVxuICAgICk7XG4gICAgdGhpcy5fbWFya0RlZnMubGVuZ3RoID4gMCAmJiBibG9ja3MyLmZpbHRlcihcbiAgICAgIChibG9jaykgPT4gYmxvY2suX3R5cGUgPT09IFwiYmxvY2tcIlxuICAgICkuZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICAgIGJsb2NrLm1hcmtEZWZzID0gYmxvY2subWFya0RlZnMgfHwgW10sIGJsb2NrLm1hcmtEZWZzID0gYmxvY2subWFya0RlZnMuY29uY2F0KFxuICAgICAgICB0aGlzLl9tYXJrRGVmcy5maWx0ZXIoKGRlZikgPT4gZmxhdHRlbihcbiAgICAgICAgICBibG9jay5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBjaGlsZC5tYXJrcyB8fCBbXSlcbiAgICAgICAgKS5pbmNsdWRlcyhkZWYuX2tleSkpXG4gICAgICApO1xuICAgIH0pO1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLmJsb2NrQ29udGVudFR5cGUub2YuZmluZChmaW5kQmxvY2tUeXBlKTtcbiAgICByZXR1cm4gdHlwZSA/IGJsb2NrczIubWFwKChibG9jaykgPT4gKGJsb2NrLl90eXBlID09PSBcImJsb2NrXCIgJiYgKGJsb2NrLl90eXBlID0gdHlwZS5uYW1lKSwgYmxvY2spKSA6IGJsb2NrczI7XG4gIH07XG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZSBhbiBhcnJheSBvZiBET00gZWxlbWVudHMuXG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50cyAtIEFycmF5IG9mIERPTSBlbGVtZW50cyB0byBkZXNlcmlhbGl6ZVxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgZGVzZXJpYWxpemVFbGVtZW50cyA9IChlbGVtZW50cyA9IFtdKSA9PiB7XG4gICAgbGV0IG5vZGVzID0gW107XG4gICAgcmV0dXJuIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KHRoaXMuZGVzZXJpYWxpemVFbGVtZW50KGVsZW1lbnQpKTtcbiAgICB9KSwgbm9kZXM7XG4gIH07XG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZSBhIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50IC0gRGVzZXJpYWxpemUgYSBET00gZWxlbWVudFxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgZGVzZXJpYWxpemVFbGVtZW50ID0gKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBuZXh0ID0gKGVsZW1lbnRzKSA9PiB7XG4gICAgICBpZiAoaXNOb2RlTGlzdChlbGVtZW50cykpXG4gICAgICAgIHJldHVybiB0aGlzLmRlc2VyaWFsaXplRWxlbWVudHMoQXJyYXkuZnJvbShlbGVtZW50cykpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudHMpKVxuICAgICAgICByZXR1cm4gdGhpcy5kZXNlcmlhbGl6ZUVsZW1lbnRzKGVsZW1lbnRzKTtcbiAgICAgIGlmIChlbGVtZW50cylcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzZXJpYWxpemVFbGVtZW50KGVsZW1lbnRzKTtcbiAgICB9LCBibG9jayA9IChwcm9wcykgPT4gKHtcbiAgICAgIF90eXBlOiBcIl9fYmxvY2tcIixcbiAgICAgIGJsb2NrOiBwcm9wc1xuICAgIH0pO1xuICAgIGxldCBub2RlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcnVsZSA9IHRoaXMucnVsZXNbaV07XG4gICAgICBpZiAoIXJ1bGUuZGVzZXJpYWxpemUpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY29uc3QgcmV0ID0gcnVsZS5kZXNlcmlhbGl6ZShlbGVtZW50LCBuZXh0LCBibG9jayksIHR5cGUgPSByZXNvbHZlSnNUeXBlKHJldCk7XG4gICAgICBpZiAodHlwZSAhPT0gXCJhcnJheVwiICYmIHR5cGUgIT09IFwib2JqZWN0XCIgJiYgdHlwZSAhPT0gXCJudWxsXCIgJiYgdHlwZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBBIHJ1bGUgcmV0dXJuZWQgYW4gaW52YWxpZCBkZXNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb246IFwiJHtub2RlfVwiLmBcbiAgICAgICAgKTtcbiAgICAgIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgICAgICB7XG4gICAgICAgICAgaWYgKHJldCA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlc2VyaWFsaXplciBydWxlIHJldHVybmVkIGBudWxsYFwiKTtcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHJldCkgPyBub2RlID0gcmV0IDogaXNQbGFjZWhvbGRlckRlY29yYXRvcihyZXQpID8gbm9kZSA9IHRoaXMuZGVzZXJpYWxpemVEZWNvcmF0b3IocmV0KSA6IGlzUGxhY2Vob2xkZXJBbm5vdGF0aW9uKHJldCkgPyBub2RlID0gdGhpcy5kZXNlcmlhbGl6ZUFubm90YXRpb24ocmV0KSA6IG5vZGUgPSByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldCAmJiAhQXJyYXkuaXNBcnJheShyZXQpICYmIGlzTWluaW1hbEJsb2NrKHJldCkgJiYgXCJsaXN0SXRlbVwiIGluIHJldCkge1xuICAgICAgICAgIGxldCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU/LnBhcmVudE5vZGU7XG4gICAgICAgICAgZm9yICg7IHBhcmVudCAmJiB0YWdOYW1lKHBhcmVudCkgPT09IFwibGlcIjsgKVxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU/LnBhcmVudE5vZGUsIHJldC5sZXZlbCA9IHJldC5sZXZlbCA/IHJldC5sZXZlbCArIDEgOiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldCAmJiAhQXJyYXkuaXNBcnJheShyZXQpICYmIGlzTWluaW1hbEJsb2NrKHJldCkgJiYgcmV0LnN0eWxlID09PSBcImJsb2NrcXVvdGVcIiAmJiByZXQuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaXNNaW5pbWFsU3BhbihjaGlsZCkgJiYgY2hpbGQudGV4dCA9PT0gXCJcXHJcIiAmJiAoY2hpbGQudGV4dCA9IGBcblxuYCwgKGluZGV4ID09PSAwIHx8IGluZGV4ID09PSByZXQuY2hpbGRyZW4ubGVuZ3RoIC0gMSkgJiYgcmV0LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlIHx8IG5leHQoZWxlbWVudC5jaGlsZE5vZGVzKSB8fCBbXTtcbiAgfTtcbiAgLyoqXG4gICAqIERlc2VyaWFsaXplIGEgYF9fZGVjb3JhdG9yYCB0eXBlXG4gICAqIChhbiBpbnRlcm5hbCBtYWRlIHVwIHR5cGUgdG8gcHJvY2VzcyBkZWNvcmF0b3JzIGV4Y2x1c2l2ZWx5KVxuICAgKlxuICAgKiBAcGFyYW0gZGVjb3JhdG9yIC1cbiAgICogQHJldHVybnMgYXJyYXkgb2YgLi4uXG4gICAqL1xuICBkZXNlcmlhbGl6ZURlY29yYXRvciA9IChkZWNvcmF0b3IpID0+IHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IGRlY29yYXRvciwgYXBwbHlEZWNvcmF0b3IgPSAobm9kZSkgPT4ge1xuICAgICAgaWYgKGlzUGxhY2Vob2xkZXJEZWNvcmF0b3Iobm9kZSkpXG4gICAgICAgIHJldHVybiB0aGlzLmRlc2VyaWFsaXplRGVjb3JhdG9yKG5vZGUpO1xuICAgICAgaWYgKGlzTWluaW1hbFNwYW4obm9kZSkpXG4gICAgICAgIG5vZGUubWFya3MgPSBub2RlLm1hcmtzIHx8IFtdLCBub2RlLnRleHQudHJpbSgpICYmIG5vZGUubWFya3MudW5zaGlmdChuYW1lKTtcbiAgICAgIGVsc2UgaWYgKFwiY2hpbGRyZW5cIiBpbiBub2RlICYmIEFycmF5LmlzQXJyYXkobm9kZS5jaGlsZHJlbikpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBub2RlO1xuICAgICAgICBibG9jay5jaGlsZHJlbiA9IGJsb2NrLmNoaWxkcmVuLm1hcChhcHBseURlY29yYXRvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIHJldHVybiBkZWNvcmF0b3IuY2hpbGRyZW4ucmVkdWNlKChjaGlsZHJlbiwgbm9kZSkgPT4ge1xuICAgICAgY29uc3QgcmV0ID0gYXBwbHlEZWNvcmF0b3Iobm9kZSk7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXQpID8gY2hpbGRyZW4uY29uY2F0KHJldCkgOiAoY2hpbGRyZW4ucHVzaChyZXQpLCBjaGlsZHJlbik7XG4gICAgfSwgW10pO1xuICB9O1xuICAvKipcbiAgICogRGVzZXJpYWxpemUgYSBgX19hbm5vdGF0aW9uYCBvYmplY3QuXG4gICAqIChhbiBpbnRlcm5hbCBtYWRlIHVwIHR5cGUgdG8gcHJvY2VzcyBhbm5vdGF0aW9ucyBleGNsdXNpdmVseSlcbiAgICpcbiAgICogQHBhcmFtIGFubm90YXRpb24gLVxuICAgKiBAcmV0dXJucyBBcnJheSBvZi4uLlxuICAgKi9cbiAgZGVzZXJpYWxpemVBbm5vdGF0aW9uID0gKGFubm90YXRpb24pID0+IHtcbiAgICBjb25zdCB7IG1hcmtEZWYgfSA9IGFubm90YXRpb247XG4gICAgdGhpcy5fbWFya0RlZnMucHVzaChtYXJrRGVmKTtcbiAgICBjb25zdCBhcHBseUFubm90YXRpb24gPSAobm9kZSkgPT4ge1xuICAgICAgaWYgKGlzUGxhY2Vob2xkZXJBbm5vdGF0aW9uKG5vZGUpKVxuICAgICAgICByZXR1cm4gdGhpcy5kZXNlcmlhbGl6ZUFubm90YXRpb24obm9kZSk7XG4gICAgICBpZiAoaXNNaW5pbWFsU3Bhbihub2RlKSlcbiAgICAgICAgbm9kZS5tYXJrcyA9IG5vZGUubWFya3MgfHwgW10sIG5vZGUudGV4dC50cmltKCkgJiYgbm9kZS5tYXJrcy51bnNoaWZ0KG1hcmtEZWYuX2tleSk7XG4gICAgICBlbHNlIGlmIChcImNoaWxkcmVuXCIgaW4gbm9kZSAmJiBBcnJheS5pc0FycmF5KG5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gbm9kZTtcbiAgICAgICAgYmxvY2suY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5tYXAoYXBwbHlBbm5vdGF0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgcmV0dXJuIGFubm90YXRpb24uY2hpbGRyZW4ucmVkdWNlKChjaGlsZHJlbiwgbm9kZSkgPT4ge1xuICAgICAgY29uc3QgcmV0ID0gYXBwbHlBbm5vdGF0aW9uKG5vZGUpO1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmV0KSA/IGNoaWxkcmVuLmNvbmNhdChyZXQpIDogKGNoaWxkcmVuLnB1c2gocmV0KSwgY2hpbGRyZW4pO1xuICAgIH0sIFtdKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJsb2NrKG5vZGUsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAobm9kZS5fdHlwZSAhPT0gKG9wdGlvbnMuYmxvY2tUeXBlTmFtZSB8fCBcImJsb2NrXCIpKVxuICAgIHJldHVybiBcIl9rZXlcIiBpbiBub2RlID8gbm9kZSA6IHtcbiAgICAgIC4uLm5vZGUsXG4gICAgICBfa2V5OiBvcHRpb25zLmtleUdlbmVyYXRvciA/IG9wdGlvbnMua2V5R2VuZXJhdG9yKCkgOiBrZXlHZW5lcmF0b3IoKVxuICAgIH07XG4gIGNvbnN0IGJsb2NrID0ge1xuICAgIF9rZXk6IG9wdGlvbnMua2V5R2VuZXJhdG9yID8gb3B0aW9ucy5rZXlHZW5lcmF0b3IoKSA6IGtleUdlbmVyYXRvcigpLFxuICAgIGNoaWxkcmVuOiBbXSxcbiAgICBtYXJrRGVmczogW10sXG4gICAgLi4ubm9kZVxuICB9LCBsYXN0Q2hpbGQgPSBibG9jay5jaGlsZHJlbltibG9jay5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgaWYgKCFsYXN0Q2hpbGQpXG4gICAgcmV0dXJuIGJsb2NrLmNoaWxkcmVuID0gW1xuICAgICAge1xuICAgICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICAgIF9rZXk6IG9wdGlvbnMua2V5R2VuZXJhdG9yID8gb3B0aW9ucy5rZXlHZW5lcmF0b3IoKSA6IGtleUdlbmVyYXRvcigpLFxuICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICBtYXJrczogW11cbiAgICAgIH1cbiAgICBdLCBibG9jaztcbiAgY29uc3QgdXNlZE1hcmtEZWZzID0gW10sIGFsbG93ZWREZWNvcmF0b3JzID0gb3B0aW9ucy5hbGxvd2VkRGVjb3JhdG9ycyAmJiBBcnJheS5pc0FycmF5KG9wdGlvbnMuYWxsb3dlZERlY29yYXRvcnMpID8gb3B0aW9ucy5hbGxvd2VkRGVjb3JhdG9ycyA6ICExO1xuICByZXR1cm4gYmxvY2suY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5yZWR1Y2UoXG4gICAgKGFjYywgY2hpbGQpID0+IHtcbiAgICAgIGNvbnN0IHByZXZpb3VzQ2hpbGQgPSBhY2NbYWNjLmxlbmd0aCAtIDFdO1xuICAgICAgcmV0dXJuIHByZXZpb3VzQ2hpbGQgJiYgaXNQb3J0YWJsZVRleHRTcGFuKGNoaWxkKSAmJiBpc1BvcnRhYmxlVGV4dFNwYW4ocHJldmlvdXNDaGlsZCkgJiYgaXNFcXVhbChwcmV2aW91c0NoaWxkLm1hcmtzLCBjaGlsZC5tYXJrcykgPyAobGFzdENoaWxkICYmIGxhc3RDaGlsZCA9PT0gY2hpbGQgJiYgY2hpbGQudGV4dCA9PT0gXCJcIiAmJiBibG9jay5jaGlsZHJlbi5sZW5ndGggPiAxIHx8IChwcmV2aW91c0NoaWxkLnRleHQgKz0gY2hpbGQudGV4dCksIGFjYykgOiAoYWNjLnB1c2goY2hpbGQpLCBhY2MpO1xuICAgIH0sXG4gICAgW11cbiAgKS5tYXAoKGNoaWxkKSA9PiB7XG4gICAgaWYgKCFjaGlsZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgY2hpbGRcIik7XG4gICAgcmV0dXJuIGNoaWxkLl9rZXkgPSBvcHRpb25zLmtleUdlbmVyYXRvciA/IG9wdGlvbnMua2V5R2VuZXJhdG9yKCkgOiBrZXlHZW5lcmF0b3IoKSwgaXNQb3J0YWJsZVRleHRTcGFuKGNoaWxkKSAmJiAoY2hpbGQubWFya3MgPyBhbGxvd2VkRGVjb3JhdG9ycyAmJiAoY2hpbGQubWFya3MgPSBjaGlsZC5tYXJrcy5maWx0ZXIoKG1hcmspID0+IHtcbiAgICAgIGNvbnN0IGlzQWxsb3dlZCA9IGFsbG93ZWREZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspLCBpc1VzZWQgPSBibG9jay5tYXJrRGVmcz8uc29tZSgoZGVmKSA9PiBkZWYuX2tleSA9PT0gbWFyayk7XG4gICAgICByZXR1cm4gaXNBbGxvd2VkIHx8IGlzVXNlZDtcbiAgICB9KSkgOiBjaGlsZC5tYXJrcyA9IFtdLCB1c2VkTWFya0RlZnMucHVzaCguLi5jaGlsZC5tYXJrcykpLCBjaGlsZDtcbiAgfSksIGJsb2NrLm1hcmtEZWZzID0gKGJsb2NrLm1hcmtEZWZzIHx8IFtdKS5maWx0ZXIoXG4gICAgKG1hcmtEZWYpID0+IHVzZWRNYXJrRGVmcy5pbmNsdWRlcyhtYXJrRGVmLl9rZXkpXG4gICksIGJsb2NrO1xufVxuZnVuY3Rpb24gaHRtbFRvQmxvY2tzKGh0bWwsIGJsb2NrQ29udGVudFR5cGUsIG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gbmV3IEh0bWxEZXNlcmlhbGl6ZXIoYmxvY2tDb250ZW50VHlwZSwgb3B0aW9ucykuZGVzZXJpYWxpemUoaHRtbCkubWFwKChibG9jaykgPT4gbm9ybWFsaXplQmxvY2soYmxvY2ssIHsga2V5R2VuZXJhdG9yOiBvcHRpb25zLmtleUdlbmVyYXRvciB9KSk7XG59XG5mdW5jdGlvbiBnZXRCbG9ja0NvbnRlbnRGZWF0dXJlcyhibG9ja0NvbnRlbnRUeXBlKSB7XG4gIHJldHVybiBibG9ja0NvbnRlbnRGZWF0dXJlcyhibG9ja0NvbnRlbnRUeXBlKTtcbn1cbmV4cG9ydCB7XG4gIGdldEJsb2NrQ29udGVudEZlYXR1cmVzLFxuICBodG1sVG9CbG9ja3MsXG4gIG5vcm1hbGl6ZUJsb2NrLFxuICByYW5kb21LZXlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/block-tools/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coreBehavior: () => (/* binding */ coreBehavior),\n/* harmony export */   coreBehaviors: () => (/* binding */ coreBehaviors),\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   isCustomBehaviorEvent: () => (/* binding */ isCustomBehaviorEvent),\n/* harmony export */   isHotkey: () => (/* binding */ isHotkey),\n/* harmony export */   raise: () => (/* binding */ raise)\n/* harmony export */ });\n/* harmony import */ var _selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selector.is-at-the-start-of-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-at-the-start-of-block.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n\n\n\nfunction isCustomBehaviorEvent(event) {\n  return event.type.startsWith(\"custom.\");\n}\nfunction raise(event) {\n  return {\n    type: \"raise\",\n    event\n  };\n}\nfunction defineBehavior(behavior) {\n  return behavior;\n}\nconst toggleAnnotationOff = {\n  on: \"annotation.toggle\",\n  guard: ({\n    context,\n    event\n  }) => (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isActiveAnnotation)(event.annotation.name)({\n    context\n  }),\n  actions: [({\n    event\n  }) => [raise({\n    type: \"annotation.remove\",\n    annotation: event.annotation\n  })]]\n}, toggleAnnotationOn = {\n  on: \"annotation.toggle\",\n  guard: ({\n    context,\n    event\n  }) => !(0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isActiveAnnotation)(event.annotation.name)({\n    context\n  }),\n  actions: [({\n    event\n  }) => [raise({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n}, coreAnnotationBehaviors = {\n  toggleAnnotationOff,\n  toggleAnnotationOn\n}, IS_MAC = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {\n  alt: \"altKey\",\n  control: \"ctrlKey\",\n  meta: \"metaKey\",\n  shift: \"shiftKey\"\n}, aliases = {\n  add: \"+\",\n  break: \"pause\",\n  cmd: \"meta\",\n  command: \"meta\",\n  ctl: \"control\",\n  ctrl: \"control\",\n  del: \"delete\",\n  down: \"arrowdown\",\n  esc: \"escape\",\n  ins: \"insert\",\n  left: \"arrowleft\",\n  mod: IS_MAC ? \"meta\" : \"control\",\n  opt: \"alt\",\n  option: \"alt\",\n  return: \"enter\",\n  right: \"arrowright\",\n  space: \" \",\n  spacebar: \" \",\n  up: \"arrowup\",\n  win: \"meta\",\n  windows: \"meta\"\n}, keyCodes = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  \" \": 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  \";\": 186,\n  \"=\": 187,\n  \",\": 188,\n  \"-\": 189,\n  \".\": 190,\n  \"/\": 191,\n  \"`\": 192,\n  \"[\": 219,\n  \"\\\\\": 220,\n  \"]\": 221,\n  \"'\": 222,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  f13: 124,\n  f14: 125,\n  f15: 126,\n  f16: 127,\n  f17: 128,\n  f18: 129,\n  f19: 130,\n  f20: 131\n};\nfunction isHotkey(hotkey, event) {\n  return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n  const parsedHotkey = {\n    altKey: !1,\n    ctrlKey: !1,\n    metaKey: !1,\n    shiftKey: !1\n  }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code = keyCodes[keyName];\n    if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code === void 0)\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n    (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n  }\n  return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n  return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n  const keyName = toKeyName(name);\n  return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n  const keyName = name.toLowerCase();\n  return aliases[keyName] ?? keyName;\n}\nconst arrowDownOnLonelyBlockObject = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const isArrowDown = isHotkey(\"ArrowDown\", event.keyboardEvent), focusBlockObject = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    }), nextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)({\n      context\n    });\n    return isArrowDown && focusBlockObject && !nextBlock;\n  },\n  actions: [() => [raise({\n    type: \"insert.text block\",\n    placement: \"after\"\n  })]]\n}, arrowUpOnLonelyBlockObject = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const isArrowUp = isHotkey(\"ArrowUp\", event.keyboardEvent), focusBlockObject = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    }), previousBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)({\n      context\n    });\n    return isArrowUp && focusBlockObject && !previousBlock;\n  },\n  actions: [() => [raise({\n    type: \"insert.text block\",\n    placement: \"before\"\n  }), raise({\n    type: \"select.previous block\"\n  })]]\n}, breakingBlockObject = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const focusBlockObject = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    });\n    return (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }) && focusBlockObject !== void 0;\n  },\n  actions: [() => [raise({\n    type: \"insert.text block\",\n    placement: \"after\"\n  })]]\n}, deletingEmptyTextBlockAfterBlockObject = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), previousBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)({\n      context\n    });\n    return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(previousBlock.node) ? {\n      focusTextBlock,\n      previousBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlock\n  }) => [raise({\n    type: \"delete.block\",\n    blockPath: focusTextBlock.path\n  }), raise({\n    type: \"select\",\n    selection: {\n      anchor: {\n        path: previousBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: previousBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}, deletingEmptyTextBlockBeforeBlockObject = {\n  on: \"delete.forward\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), nextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)({\n      context\n    });\n    return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(nextBlock.node) ? {\n      focusTextBlock,\n      nextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlock\n  }) => [raise({\n    type: \"delete.block\",\n    blockPath: focusTextBlock.path\n  }), raise({\n    type: \"select\",\n    selection: {\n      anchor: {\n        path: nextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: nextBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}, coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject\n}, coreDecoratorBehaviors = {\n  toggleDecoratorOff: {\n    on: \"decorator.toggle\",\n    guard: ({\n      context,\n      event\n    }) => (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isActiveDecorator)(event.decorator)({\n      context\n    }),\n    actions: [({\n      event\n    }) => [raise({\n      type: \"decorator.remove\",\n      decorator: event.decorator\n    })]]\n  },\n  toggleDecoratorOn: {\n    on: \"decorator.toggle\",\n    guard: ({\n      context,\n      event\n    }) => !(0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isActiveDecorator)(event.decorator)({\n      context\n    }),\n    actions: [({\n      event\n    }) => [raise({\n      type: \"decorator.add\",\n      decorator: event.decorator\n    })]]\n  },\n  strongShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+b\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"strong\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"strong\"\n    })]]\n  },\n  emShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+i\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"em\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"em\"\n    })]]\n  },\n  underlineShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+u\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"underline\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"underline\"\n    })]]\n  },\n  codeShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+'\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"code\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"code\"\n    })]]\n  }\n}, coreDeserializeBehavior = {\n  on: \"deserialize\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const deserializeEvents = context.converters.flatMap((converter) => {\n      const data = event.dataTransfer.getData(converter.mimeType);\n      return data ? [converter.deserialize({\n        context,\n        event: {\n          type: \"deserialize\",\n          data\n        }\n      })] : [];\n    });\n    return deserializeEvents.find((deserializeEvent) => deserializeEvent.type === \"deserialization.success\") || {\n      type: \"deserialization.failure\",\n      mimeType: \"*/*\",\n      reason: deserializeEvents.map((deserializeEvent) => deserializeEvent.type === \"deserialization.failure\" ? deserializeEvent.reason : \"\").join(\", \")\n    };\n  },\n  actions: [({\n    event\n  }, deserializeEvent) => [raise({\n    ...deserializeEvent,\n    dataTransfer: event.dataTransfer\n  })]]\n}, atTheEndOfTextBlock = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    });\n    if (!context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const atTheEndOfBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isAtTheEndOfBlock)(focusTextBlock)({\n      context\n    }), focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return atTheEndOfBlock ? {\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    context\n  }, {\n    focusListItem,\n    focusLevel\n  }) => [raise({\n    type: \"insert.block\",\n    block: {\n      _type: context.schema.block.name,\n      _key: context.keyGenerator(),\n      children: [{\n        _key: context.keyGenerator(),\n        _type: context.schema.span.name,\n        text: \"\",\n        marks: []\n      }],\n      markDefs: [],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: context.schema.styles[0]?.value\n    },\n    placement: \"after\"\n  })]]\n}, atTheStartOfTextBlock = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    });\n    if (!context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const focusSpan = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)({\n      context\n    }), focusDecorators = focusSpan?.node.marks?.filter((mark) => context.schema.decorators.some((decorator) => decorator.value === mark) ?? []), focusAnnotations = focusSpan?.node.marks?.filter((mark) => !context.schema.decorators.some((decorator) => decorator.value === mark)) ?? [], focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isAtTheStartOfBlock)(focusTextBlock)({\n      context\n    }) ? {\n      focusAnnotations,\n      focusDecorators,\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    context\n  }, {\n    focusAnnotations,\n    focusDecorators,\n    focusListItem,\n    focusLevel\n  }) => [raise({\n    type: \"insert.block\",\n    block: {\n      _key: context.keyGenerator(),\n      _type: context.schema.block.name,\n      children: [{\n        _key: context.keyGenerator(),\n        _type: context.schema.span.name,\n        marks: focusAnnotations.length === 0 ? focusDecorators : [],\n        text: \"\"\n      }],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: context.schema.styles[0]?.value\n    },\n    placement: \"before\"\n  })]]\n}, coreInsertBreakBehaviors = {\n  atTheEndOfTextBlock,\n  atTheStartOfTextBlock\n}, MAX_LIST_LEVEL = 10, toggleListItemOff = {\n  on: \"list item.toggle\",\n  guard: ({\n    context,\n    event\n  }) => (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isActiveListItem)(event.listItem)({\n    context\n  }),\n  actions: [({\n    event\n  }) => [raise({\n    type: \"list item.remove\",\n    listItem: event.listItem\n  })]]\n}, toggleListItemOn = {\n  on: \"list item.toggle\",\n  guard: ({\n    context,\n    event\n  }) => !(0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isActiveListItem)(event.listItem)({\n    context\n  }),\n  actions: [({\n    event\n  }) => [raise({\n    type: \"list item.add\",\n    listItem: event.listItem\n  })]]\n}, clearListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), focusSpan = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)({\n      context\n    });\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level === 1 ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock\n  }) => [raise({\n    type: \"text block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusTextBlock.path\n  })]]\n}, unindentListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), focusSpan = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)({\n      context\n    });\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n      focusTextBlock,\n      level: focusTextBlock.node.level - 1\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    level\n  }) => [raise({\n    type: \"text block.set\",\n    level,\n    at: focusTextBlock.path\n  })]]\n}, clearListOnEnter = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusListBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getFocusListBlock)({\n      context\n    });\n    return !selectionCollapsed || !focusListBlock || !(0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusListBlock.node) ? !1 : {\n      focusListBlock\n    };\n  },\n  actions: [(_, {\n    focusListBlock\n  }) => [raise({\n    type: \"text block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusListBlock.path\n  })]]\n}, indentListOnTab = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    if (!isHotkey(\"Tab\", event.keyboardEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)({\n      context\n    }), guards = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => raise({\n    type: \"text block.set\",\n    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1)),\n    at: selectedListBlock.path\n  }))]\n}, unindentListOnShiftTab = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    if (!isHotkey(\"Shift+Tab\", event.keyboardEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)({\n      context\n    }), guards = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => raise({\n    type: \"text block.set\",\n    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1)),\n    at: selectedListBlock.path\n  }))]\n}, coreListBehaviors = {\n  toggleListItemOff,\n  toggleListItemOn,\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab\n}, coreSerializeBehaviors = {\n  serialize: {\n    on: \"serialize\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (context.converters.length === 0)\n        return !1;\n      const serializeEvents = context.converters.map((converter) => converter.serialize({\n        context,\n        event\n      }));\n      return serializeEvents.length === 0 ? !1 : serializeEvents;\n    },\n    actions: [({\n      event\n    }, serializeEvents) => serializeEvents.map((serializeEvent) => raise({\n      ...serializeEvent,\n      dataTransfer: event.dataTransfer\n    }))]\n  },\n  \"serialization.success\": {\n    on: \"serialization.success\",\n    actions: [({\n      event\n    }) => [raise({\n      type: \"data transfer.set\",\n      data: event.data,\n      dataTransfer: event.dataTransfer,\n      mimeType: event.mimeType\n    })]]\n  }\n}, toggleStyleOff = {\n  on: \"style.toggle\",\n  guard: ({\n    context,\n    event\n  }) => (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isActiveStyle)(event.style)({\n    context\n  }),\n  actions: [({\n    event\n  }) => [raise({\n    type: \"style.remove\",\n    style: event.style\n  })]]\n}, toggleStyleOn = {\n  on: \"style.toggle\",\n  guard: ({\n    context,\n    event\n  }) => !(0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_0__.isActiveStyle)(event.style)({\n    context\n  }),\n  actions: [({\n    event\n  }) => [raise({\n    type: \"style.add\",\n    style: event.style\n  })]]\n}, coreStyleBehaviors = {\n  toggleStyleOff,\n  toggleStyleOn\n}, softReturn = {\n  on: \"insert.soft break\",\n  actions: [() => [raise({\n    type: \"insert.text\",\n    text: `\n`\n  })]]\n}, coreBehaviors = [softReturn, coreAnnotationBehaviors.toggleAnnotationOff, coreAnnotationBehaviors.toggleAnnotationOn, coreDecoratorBehaviors.toggleDecoratorOff, coreDecoratorBehaviors.toggleDecoratorOn, coreDecoratorBehaviors.strongShortcut, coreDecoratorBehaviors.emShortcut, coreDecoratorBehaviors.underlineShortcut, coreDecoratorBehaviors.codeShortcut, coreDeserializeBehavior, coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject, coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject, coreBlockObjectBehaviors.breakingBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject, coreListBehaviors.toggleListItemOff, coreListBehaviors.toggleListItemOn, coreListBehaviors.clearListOnBackspace, coreListBehaviors.unindentListOnBackspace, coreListBehaviors.clearListOnEnter, coreListBehaviors.indentListOnTab, coreListBehaviors.unindentListOnShiftTab, coreInsertBreakBehaviors.atTheEndOfTextBlock, coreInsertBreakBehaviors.atTheStartOfTextBlock, coreSerializeBehaviors.serialize, coreSerializeBehaviors[\"serialization.success\"], coreStyleBehaviors.toggleStyleOff, coreStyleBehaviors.toggleStyleOn], coreBehavior = {\n  softReturn,\n  annotation: coreAnnotationBehaviors,\n  decorators: coreDecoratorBehaviors,\n  deserialize: coreDeserializeBehavior,\n  blockObjects: coreBlockObjectBehaviors,\n  insertBreak: coreInsertBreakBehaviors,\n  lists: coreListBehaviors,\n  ...coreSerializeBehaviors,\n  style: coreSerializeBehaviors\n};\n\n//# sourceMappingURL=behavior.core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvYmVoYXZpb3IuY29yZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBd1U7QUFDaFI7QUFDUztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxLQUFLLHlGQUFrQjtBQUMxQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxNQUFNLHlGQUFrQjtBQUMzQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwyQkFBMkIsd0ZBQWlCO0FBQzVDO0FBQ0EsS0FBSyxZQUFZLG1GQUFZO0FBQzdCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQU07QUFDTixHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxLQUFLLG9GQUFhO0FBQ3JCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLE1BQU0sb0ZBQWE7QUFDdEI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9saWIvX2NodW5rcy1lcy9iZWhhdmlvci5jb3JlLmpzP2QwYTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNBY3RpdmVBbm5vdGF0aW9uLCBnZXRGb2N1c0Jsb2NrT2JqZWN0LCBnZXROZXh0QmxvY2ssIGdldFByZXZpb3VzQmxvY2ssIGlzU2VsZWN0aW9uQ29sbGFwc2VkLCBnZXRGb2N1c1RleHRCbG9jaywgaXNBY3RpdmVEZWNvcmF0b3IsIGlzQXRUaGVFbmRPZkJsb2NrLCBnZXRGb2N1c1NwYW4sIGlzQXRUaGVTdGFydE9mQmxvY2ssIGlzQWN0aXZlTGlzdEl0ZW0sIGdldEZvY3VzTGlzdEJsb2NrLCBnZXRTZWxlY3RlZEJsb2NrcywgY3JlYXRlR3VhcmRzLCBpc0FjdGl2ZVN0eWxlIH0gZnJvbSBcIi4vc2VsZWN0b3IuaXMtYXQtdGhlLXN0YXJ0LW9mLWJsb2NrLmpzXCI7XG5pbXBvcnQgeyBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5pbXBvcnQgeyBpc0VtcHR5VGV4dEJsb2NrIH0gZnJvbSBcIi4vdXRpbC5pcy1lbXB0eS10ZXh0LWJsb2NrLmpzXCI7XG5mdW5jdGlvbiBpc0N1c3RvbUJlaGF2aW9yRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnR5cGUuc3RhcnRzV2l0aChcImN1c3RvbS5cIik7XG59XG5mdW5jdGlvbiByYWlzZShldmVudCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwicmFpc2VcIixcbiAgICBldmVudFxuICB9O1xufVxuZnVuY3Rpb24gZGVmaW5lQmVoYXZpb3IoYmVoYXZpb3IpIHtcbiAgcmV0dXJuIGJlaGF2aW9yO1xufVxuY29uc3QgdG9nZ2xlQW5ub3RhdGlvbk9mZiA9IHtcbiAgb246IFwiYW5ub3RhdGlvbi50b2dnbGVcIixcbiAgZ3VhcmQ6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiBpc0FjdGl2ZUFubm90YXRpb24oZXZlbnQuYW5ub3RhdGlvbi5uYW1lKSh7XG4gICAgY29udGV4dFxuICB9KSxcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImFubm90YXRpb24ucmVtb3ZlXCIsXG4gICAgYW5ub3RhdGlvbjogZXZlbnQuYW5ub3RhdGlvblxuICB9KV1dXG59LCB0b2dnbGVBbm5vdGF0aW9uT24gPSB7XG4gIG9uOiBcImFubm90YXRpb24udG9nZ2xlXCIsXG4gIGd1YXJkOiAoe1xuICAgIGNvbnRleHQsXG4gICAgZXZlbnRcbiAgfSkgPT4gIWlzQWN0aXZlQW5ub3RhdGlvbihldmVudC5hbm5vdGF0aW9uLm5hbWUpKHtcbiAgICBjb250ZXh0XG4gIH0pLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiYW5ub3RhdGlvbi5hZGRcIixcbiAgICBhbm5vdGF0aW9uOiBldmVudC5hbm5vdGF0aW9uXG4gIH0pXV1cbn0sIGNvcmVBbm5vdGF0aW9uQmVoYXZpb3JzID0ge1xuICB0b2dnbGVBbm5vdGF0aW9uT2ZmLFxuICB0b2dnbGVBbm5vdGF0aW9uT25cbn0sIElTX01BQyA9IHR5cGVvZiB3aW5kb3cgPCBcInVcIiAmJiAvTWFjfGlQb2R8aVBob25lfGlQYWQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLCBtb2RpZmllcnMgPSB7XG4gIGFsdDogXCJhbHRLZXlcIixcbiAgY29udHJvbDogXCJjdHJsS2V5XCIsXG4gIG1ldGE6IFwibWV0YUtleVwiLFxuICBzaGlmdDogXCJzaGlmdEtleVwiXG59LCBhbGlhc2VzID0ge1xuICBhZGQ6IFwiK1wiLFxuICBicmVhazogXCJwYXVzZVwiLFxuICBjbWQ6IFwibWV0YVwiLFxuICBjb21tYW5kOiBcIm1ldGFcIixcbiAgY3RsOiBcImNvbnRyb2xcIixcbiAgY3RybDogXCJjb250cm9sXCIsXG4gIGRlbDogXCJkZWxldGVcIixcbiAgZG93bjogXCJhcnJvd2Rvd25cIixcbiAgZXNjOiBcImVzY2FwZVwiLFxuICBpbnM6IFwiaW5zZXJ0XCIsXG4gIGxlZnQ6IFwiYXJyb3dsZWZ0XCIsXG4gIG1vZDogSVNfTUFDID8gXCJtZXRhXCIgOiBcImNvbnRyb2xcIixcbiAgb3B0OiBcImFsdFwiLFxuICBvcHRpb246IFwiYWx0XCIsXG4gIHJldHVybjogXCJlbnRlclwiLFxuICByaWdodDogXCJhcnJvd3JpZ2h0XCIsXG4gIHNwYWNlOiBcIiBcIixcbiAgc3BhY2ViYXI6IFwiIFwiLFxuICB1cDogXCJhcnJvd3VwXCIsXG4gIHdpbjogXCJtZXRhXCIsXG4gIHdpbmRvd3M6IFwibWV0YVwiXG59LCBrZXlDb2RlcyA9IHtcbiAgYmFja3NwYWNlOiA4LFxuICB0YWI6IDksXG4gIGVudGVyOiAxMyxcbiAgc2hpZnQ6IDE2LFxuICBjb250cm9sOiAxNyxcbiAgYWx0OiAxOCxcbiAgcGF1c2U6IDE5LFxuICBjYXBzbG9jazogMjAsXG4gIGVzY2FwZTogMjcsXG4gIFwiIFwiOiAzMixcbiAgcGFnZXVwOiAzMyxcbiAgcGFnZWRvd246IDM0LFxuICBlbmQ6IDM1LFxuICBob21lOiAzNixcbiAgYXJyb3dsZWZ0OiAzNyxcbiAgYXJyb3d1cDogMzgsXG4gIGFycm93cmlnaHQ6IDM5LFxuICBhcnJvd2Rvd246IDQwLFxuICBpbnNlcnQ6IDQ1LFxuICBkZWxldGU6IDQ2LFxuICBtZXRhOiA5MSxcbiAgbnVtbG9jazogMTQ0LFxuICBzY3JvbGxsb2NrOiAxNDUsXG4gIFwiO1wiOiAxODYsXG4gIFwiPVwiOiAxODcsXG4gIFwiLFwiOiAxODgsXG4gIFwiLVwiOiAxODksXG4gIFwiLlwiOiAxOTAsXG4gIFwiL1wiOiAxOTEsXG4gIFwiYFwiOiAxOTIsXG4gIFwiW1wiOiAyMTksXG4gIFwiXFxcXFwiOiAyMjAsXG4gIFwiXVwiOiAyMjEsXG4gIFwiJ1wiOiAyMjIsXG4gIGYxOiAxMTIsXG4gIGYyOiAxMTMsXG4gIGYzOiAxMTQsXG4gIGY0OiAxMTUsXG4gIGY1OiAxMTYsXG4gIGY2OiAxMTcsXG4gIGY3OiAxMTgsXG4gIGY4OiAxMTksXG4gIGY5OiAxMjAsXG4gIGYxMDogMTIxLFxuICBmMTE6IDEyMixcbiAgZjEyOiAxMjMsXG4gIGYxMzogMTI0LFxuICBmMTQ6IDEyNSxcbiAgZjE1OiAxMjYsXG4gIGYxNjogMTI3LFxuICBmMTc6IDEyOCxcbiAgZjE4OiAxMjksXG4gIGYxOTogMTMwLFxuICBmMjA6IDEzMVxufTtcbmZ1bmN0aW9uIGlzSG90a2V5KGhvdGtleSwgZXZlbnQpIHtcbiAgcmV0dXJuIGNvbXBhcmVIb3RrZXkocGFyc2VIb3RrZXkoaG90a2V5KSwgZXZlbnQpO1xufVxuZnVuY3Rpb24gcGFyc2VIb3RrZXkoaG90a2V5KSB7XG4gIGNvbnN0IHBhcnNlZEhvdGtleSA9IHtcbiAgICBhbHRLZXk6ICExLFxuICAgIGN0cmxLZXk6ICExLFxuICAgIG1ldGFLZXk6ICExLFxuICAgIHNoaWZ0S2V5OiAhMVxuICB9LCBob3RrZXlTZWdtZW50cyA9IGhvdGtleS5yZXBsYWNlKFwiKytcIiwgXCIrYWRkXCIpLnNwbGl0KFwiK1wiKTtcbiAgZm9yIChjb25zdCByYXdIb3RrZXlTZWdtZW50IG9mIGhvdGtleVNlZ21lbnRzKSB7XG4gICAgY29uc3Qgb3B0aW9uYWwgPSByYXdIb3RrZXlTZWdtZW50LmVuZHNXaXRoKFwiP1wiKSAmJiByYXdIb3RrZXlTZWdtZW50Lmxlbmd0aCA+IDEsIGhvdGtleVNlZ21lbnQgPSBvcHRpb25hbCA/IHJhd0hvdGtleVNlZ21lbnQuc2xpY2UoMCwgLTEpIDogcmF3SG90a2V5U2VnbWVudCwga2V5TmFtZSA9IHRvS2V5TmFtZShob3RrZXlTZWdtZW50KSwgbW9kaWZpZXIgPSBtb2RpZmllcnNba2V5TmFtZV0sIGFsaWFzID0gYWxpYXNlc1tob3RrZXlTZWdtZW50XSwgY29kZSA9IGtleUNvZGVzW2tleU5hbWVdO1xuICAgIGlmIChob3RrZXlTZWdtZW50Lmxlbmd0aCA+IDEgJiYgbW9kaWZpZXIgPT09IHZvaWQgMCAmJiBhbGlhcyA9PT0gdm9pZCAwICYmIGNvZGUgPT09IHZvaWQgMClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVua25vd24gbW9kaWZpZXI6IFwiJHtob3RrZXlTZWdtZW50fVwiYCk7XG4gICAgKGhvdGtleVNlZ21lbnRzLmxlbmd0aCA9PT0gMSB8fCBtb2RpZmllciA9PT0gdm9pZCAwKSAmJiAocGFyc2VkSG90a2V5LmtleSA9IGtleU5hbWUsIHBhcnNlZEhvdGtleS5rZXlDb2RlID0gdG9LZXlDb2RlKGhvdGtleVNlZ21lbnQpKSwgbW9kaWZpZXIgIT09IHZvaWQgMCAmJiAocGFyc2VkSG90a2V5W21vZGlmaWVyXSA9IG9wdGlvbmFsID8gbnVsbCA6ICEwKTtcbiAgfVxuICByZXR1cm4gcGFyc2VkSG90a2V5O1xufVxuZnVuY3Rpb24gY29tcGFyZUhvdGtleShwYXJzZWRIb3RrZXksIGV2ZW50KSB7XG4gIHJldHVybiAocGFyc2VkSG90a2V5LmFsdEtleSA9PSBudWxsIHx8IHBhcnNlZEhvdGtleS5hbHRLZXkgPT09IGV2ZW50LmFsdEtleSkgJiYgKHBhcnNlZEhvdGtleS5jdHJsS2V5ID09IG51bGwgfHwgcGFyc2VkSG90a2V5LmN0cmxLZXkgPT09IGV2ZW50LmN0cmxLZXkpICYmIChwYXJzZWRIb3RrZXkubWV0YUtleSA9PSBudWxsIHx8IHBhcnNlZEhvdGtleS5tZXRhS2V5ID09PSBldmVudC5tZXRhS2V5KSAmJiAocGFyc2VkSG90a2V5LnNoaWZ0S2V5ID09IG51bGwgfHwgcGFyc2VkSG90a2V5LnNoaWZ0S2V5ID09PSBldmVudC5zaGlmdEtleSkgPyBwYXJzZWRIb3RrZXkua2V5Q29kZSAhPT0gdm9pZCAwICYmIGV2ZW50LmtleUNvZGUgIT09IHZvaWQgMCA/IHBhcnNlZEhvdGtleS5rZXlDb2RlID09PSA5MSAmJiBldmVudC5rZXlDb2RlID09PSA5MyA/ICEwIDogcGFyc2VkSG90a2V5LmtleUNvZGUgPT09IGV2ZW50LmtleUNvZGUgOiBwYXJzZWRIb3RrZXkua2V5Q29kZSA9PT0gZXZlbnQua2V5Q29kZSB8fCBwYXJzZWRIb3RrZXkua2V5ID09PSBldmVudC5rZXkudG9Mb3dlckNhc2UoKSA6ICExO1xufVxuZnVuY3Rpb24gdG9LZXlDb2RlKG5hbWUpIHtcbiAgY29uc3Qga2V5TmFtZSA9IHRvS2V5TmFtZShuYW1lKTtcbiAgcmV0dXJuIGtleUNvZGVzW2tleU5hbWVdID8/IGtleU5hbWUudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApO1xufVxuZnVuY3Rpb24gdG9LZXlOYW1lKG5hbWUpIHtcbiAgY29uc3Qga2V5TmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIGFsaWFzZXNba2V5TmFtZV0gPz8ga2V5TmFtZTtcbn1cbmNvbnN0IGFycm93RG93bk9uTG9uZWx5QmxvY2tPYmplY3QgPSB7XG4gIG9uOiBcImtleS5kb3duXCIsXG4gIGd1YXJkOiAoe1xuICAgIGNvbnRleHQsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGlzQXJyb3dEb3duID0gaXNIb3RrZXkoXCJBcnJvd0Rvd25cIiwgZXZlbnQua2V5Ym9hcmRFdmVudCksIGZvY3VzQmxvY2tPYmplY3QgPSBnZXRGb2N1c0Jsb2NrT2JqZWN0KHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSwgbmV4dEJsb2NrID0gZ2V0TmV4dEJsb2NrKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KTtcbiAgICByZXR1cm4gaXNBcnJvd0Rvd24gJiYgZm9jdXNCbG9ja09iamVjdCAmJiAhbmV4dEJsb2NrO1xuICB9LFxuICBhY3Rpb25zOiBbKCkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC50ZXh0IGJsb2NrXCIsXG4gICAgcGxhY2VtZW50OiBcImFmdGVyXCJcbiAgfSldXVxufSwgYXJyb3dVcE9uTG9uZWx5QmxvY2tPYmplY3QgPSB7XG4gIG9uOiBcImtleS5kb3duXCIsXG4gIGd1YXJkOiAoe1xuICAgIGNvbnRleHQsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGlzQXJyb3dVcCA9IGlzSG90a2V5KFwiQXJyb3dVcFwiLCBldmVudC5rZXlib2FyZEV2ZW50KSwgZm9jdXNCbG9ja09iamVjdCA9IGdldEZvY3VzQmxvY2tPYmplY3Qoe1xuICAgICAgY29udGV4dFxuICAgIH0pLCBwcmV2aW91c0Jsb2NrID0gZ2V0UHJldmlvdXNCbG9jayh7XG4gICAgICBjb250ZXh0XG4gICAgfSk7XG4gICAgcmV0dXJuIGlzQXJyb3dVcCAmJiBmb2N1c0Jsb2NrT2JqZWN0ICYmICFwcmV2aW91c0Jsb2NrO1xuICB9LFxuICBhY3Rpb25zOiBbKCkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC50ZXh0IGJsb2NrXCIsXG4gICAgcGxhY2VtZW50OiBcImJlZm9yZVwiXG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJzZWxlY3QucHJldmlvdXMgYmxvY2tcIlxuICB9KV1dXG59LCBicmVha2luZ0Jsb2NrT2JqZWN0ID0ge1xuICBvbjogXCJpbnNlcnQuYnJlYWtcIixcbiAgZ3VhcmQ6ICh7XG4gICAgY29udGV4dFxuICB9KSA9PiB7XG4gICAgY29uc3QgZm9jdXNCbG9ja09iamVjdCA9IGdldEZvY3VzQmxvY2tPYmplY3Qoe1xuICAgICAgY29udGV4dFxuICAgIH0pO1xuICAgIHJldHVybiBpc1NlbGVjdGlvbkNvbGxhcHNlZCh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgJiYgZm9jdXNCbG9ja09iamVjdCAhPT0gdm9pZCAwO1xuICB9LFxuICBhY3Rpb25zOiBbKCkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcImluc2VydC50ZXh0IGJsb2NrXCIsXG4gICAgcGxhY2VtZW50OiBcImFmdGVyXCJcbiAgfSldXVxufSwgZGVsZXRpbmdFbXB0eVRleHRCbG9ja0FmdGVyQmxvY2tPYmplY3QgPSB7XG4gIG9uOiBcImRlbGV0ZS5iYWNrd2FyZFwiLFxuICBndWFyZDogKHtcbiAgICBjb250ZXh0XG4gIH0pID0+IHtcbiAgICBjb25zdCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSwgc2VsZWN0aW9uQ29sbGFwc2VkID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQoe1xuICAgICAgY29udGV4dFxuICAgIH0pLCBwcmV2aW91c0Jsb2NrID0gZ2V0UHJldmlvdXNCbG9jayh7XG4gICAgICBjb250ZXh0XG4gICAgfSk7XG4gICAgcmV0dXJuICFmb2N1c1RleHRCbG9jayB8fCAhc2VsZWN0aW9uQ29sbGFwc2VkIHx8ICFwcmV2aW91c0Jsb2NrID8gITEgOiBpc0VtcHR5VGV4dEJsb2NrKGZvY3VzVGV4dEJsb2NrLm5vZGUpICYmICFpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhwcmV2aW91c0Jsb2NrLm5vZGUpID8ge1xuICAgICAgZm9jdXNUZXh0QmxvY2ssXG4gICAgICBwcmV2aW91c0Jsb2NrXG4gICAgfSA6ICExO1xuICB9LFxuICBhY3Rpb25zOiBbKF8sIHtcbiAgICBmb2N1c1RleHRCbG9jayxcbiAgICBwcmV2aW91c0Jsb2NrXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJkZWxldGUuYmxvY2tcIixcbiAgICBibG9ja1BhdGg6IGZvY3VzVGV4dEJsb2NrLnBhdGhcbiAgfSksIHJhaXNlKHtcbiAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgIHNlbGVjdGlvbjoge1xuICAgICAgYW5jaG9yOiB7XG4gICAgICAgIHBhdGg6IHByZXZpb3VzQmxvY2sucGF0aCxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9LFxuICAgICAgZm9jdXM6IHtcbiAgICAgICAgcGF0aDogcHJldmlvdXNCbG9jay5wYXRoLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0pXV1cbn0sIGRlbGV0aW5nRW1wdHlUZXh0QmxvY2tCZWZvcmVCbG9ja09iamVjdCA9IHtcbiAgb246IFwiZGVsZXRlLmZvcndhcmRcIixcbiAgZ3VhcmQ6ICh7XG4gICAgY29udGV4dFxuICB9KSA9PiB7XG4gICAgY29uc3QgZm9jdXNUZXh0QmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayh7XG4gICAgICBjb250ZXh0XG4gICAgfSksIHNlbGVjdGlvbkNvbGxhcHNlZCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSwgbmV4dEJsb2NrID0gZ2V0TmV4dEJsb2NrKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KTtcbiAgICByZXR1cm4gIWZvY3VzVGV4dEJsb2NrIHx8ICFzZWxlY3Rpb25Db2xsYXBzZWQgfHwgIW5leHRCbG9jayA/ICExIDogaXNFbXB0eVRleHRCbG9jayhmb2N1c1RleHRCbG9jay5ub2RlKSAmJiAhaXNQb3J0YWJsZVRleHRUZXh0QmxvY2sobmV4dEJsb2NrLm5vZGUpID8ge1xuICAgICAgZm9jdXNUZXh0QmxvY2ssXG4gICAgICBuZXh0QmxvY2tcbiAgICB9IDogITE7XG4gIH0sXG4gIGFjdGlvbnM6IFsoXywge1xuICAgIGZvY3VzVGV4dEJsb2NrLFxuICAgIG5leHRCbG9ja1xuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiZGVsZXRlLmJsb2NrXCIsXG4gICAgYmxvY2tQYXRoOiBmb2N1c1RleHRCbG9jay5wYXRoXG4gIH0pLCByYWlzZSh7XG4gICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICBzZWxlY3Rpb246IHtcbiAgICAgIGFuY2hvcjoge1xuICAgICAgICBwYXRoOiBuZXh0QmxvY2sucGF0aCxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9LFxuICAgICAgZm9jdXM6IHtcbiAgICAgICAgcGF0aDogbmV4dEJsb2NrLnBhdGgsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfVxuICAgIH1cbiAgfSldXVxufSwgY29yZUJsb2NrT2JqZWN0QmVoYXZpb3JzID0ge1xuICBhcnJvd0Rvd25PbkxvbmVseUJsb2NrT2JqZWN0LFxuICBhcnJvd1VwT25Mb25lbHlCbG9ja09iamVjdCxcbiAgYnJlYWtpbmdCbG9ja09iamVjdCxcbiAgZGVsZXRpbmdFbXB0eVRleHRCbG9ja0FmdGVyQmxvY2tPYmplY3QsXG4gIGRlbGV0aW5nRW1wdHlUZXh0QmxvY2tCZWZvcmVCbG9ja09iamVjdFxufSwgY29yZURlY29yYXRvckJlaGF2aW9ycyA9IHtcbiAgdG9nZ2xlRGVjb3JhdG9yT2ZmOiB7XG4gICAgb246IFwiZGVjb3JhdG9yLnRvZ2dsZVwiLFxuICAgIGd1YXJkOiAoe1xuICAgICAgY29udGV4dCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gaXNBY3RpdmVEZWNvcmF0b3IoZXZlbnQuZGVjb3JhdG9yKSh7XG4gICAgICBjb250ZXh0XG4gICAgfSksXG4gICAgYWN0aW9uczogWyh7XG4gICAgICBldmVudFxuICAgIH0pID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlY29yYXRvci5yZW1vdmVcIixcbiAgICAgIGRlY29yYXRvcjogZXZlbnQuZGVjb3JhdG9yXG4gICAgfSldXVxuICB9LFxuICB0b2dnbGVEZWNvcmF0b3JPbjoge1xuICAgIG9uOiBcImRlY29yYXRvci50b2dnbGVcIixcbiAgICBndWFyZDogKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBldmVudFxuICAgIH0pID0+ICFpc0FjdGl2ZURlY29yYXRvcihldmVudC5kZWNvcmF0b3IpKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSxcbiAgICBhY3Rpb25zOiBbKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gW3JhaXNlKHtcbiAgICAgIHR5cGU6IFwiZGVjb3JhdG9yLmFkZFwiLFxuICAgICAgZGVjb3JhdG9yOiBldmVudC5kZWNvcmF0b3JcbiAgICB9KV1dXG4gIH0sXG4gIHN0cm9uZ1Nob3J0Y3V0OiB7XG4gICAgb246IFwia2V5LmRvd25cIixcbiAgICBndWFyZDogKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBldmVudFxuICAgIH0pID0+IGlzSG90a2V5KFwibW9kK2JcIiwgZXZlbnQua2V5Ym9hcmRFdmVudCkgJiYgY29udGV4dC5zY2hlbWEuZGVjb3JhdG9ycy5zb21lKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci52YWx1ZSA9PT0gXCJzdHJvbmdcIiksXG4gICAgYWN0aW9uczogWygpID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlY29yYXRvci50b2dnbGVcIixcbiAgICAgIGRlY29yYXRvcjogXCJzdHJvbmdcIlxuICAgIH0pXV1cbiAgfSxcbiAgZW1TaG9ydGN1dDoge1xuICAgIG9uOiBcImtleS5kb3duXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiBpc0hvdGtleShcIm1vZCtpXCIsIGV2ZW50LmtleWJvYXJkRXZlbnQpICYmIGNvbnRleHQuc2NoZW1hLmRlY29yYXRvcnMuc29tZSgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUgPT09IFwiZW1cIiksXG4gICAgYWN0aW9uczogWygpID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRlY29yYXRvci50b2dnbGVcIixcbiAgICAgIGRlY29yYXRvcjogXCJlbVwiXG4gICAgfSldXVxuICB9LFxuICB1bmRlcmxpbmVTaG9ydGN1dDoge1xuICAgIG9uOiBcImtleS5kb3duXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiBpc0hvdGtleShcIm1vZCt1XCIsIGV2ZW50LmtleWJvYXJkRXZlbnQpICYmIGNvbnRleHQuc2NoZW1hLmRlY29yYXRvcnMuc29tZSgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUgPT09IFwidW5kZXJsaW5lXCIpLFxuICAgIGFjdGlvbnM6IFsoKSA9PiBbcmFpc2Uoe1xuICAgICAgdHlwZTogXCJkZWNvcmF0b3IudG9nZ2xlXCIsXG4gICAgICBkZWNvcmF0b3I6IFwidW5kZXJsaW5lXCJcbiAgICB9KV1dXG4gIH0sXG4gIGNvZGVTaG9ydGN1dDoge1xuICAgIG9uOiBcImtleS5kb3duXCIsXG4gICAgZ3VhcmQ6ICh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiBpc0hvdGtleShcIm1vZCsnXCIsIGV2ZW50LmtleWJvYXJkRXZlbnQpICYmIGNvbnRleHQuc2NoZW1hLmRlY29yYXRvcnMuc29tZSgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUgPT09IFwiY29kZVwiKSxcbiAgICBhY3Rpb25zOiBbKCkgPT4gW3JhaXNlKHtcbiAgICAgIHR5cGU6IFwiZGVjb3JhdG9yLnRvZ2dsZVwiLFxuICAgICAgZGVjb3JhdG9yOiBcImNvZGVcIlxuICAgIH0pXV1cbiAgfVxufSwgY29yZURlc2VyaWFsaXplQmVoYXZpb3IgPSB7XG4gIG9uOiBcImRlc2VyaWFsaXplXCIsXG4gIGd1YXJkOiAoe1xuICAgIGNvbnRleHQsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGRlc2VyaWFsaXplRXZlbnRzID0gY29udGV4dC5jb252ZXJ0ZXJzLmZsYXRNYXAoKGNvbnZlcnRlcikgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKGNvbnZlcnRlci5taW1lVHlwZSk7XG4gICAgICByZXR1cm4gZGF0YSA/IFtjb252ZXJ0ZXIuZGVzZXJpYWxpemUoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZGVzZXJpYWxpemVcIixcbiAgICAgICAgICBkYXRhXG4gICAgICAgIH1cbiAgICAgIH0pXSA6IFtdO1xuICAgIH0pO1xuICAgIHJldHVybiBkZXNlcmlhbGl6ZUV2ZW50cy5maW5kKChkZXNlcmlhbGl6ZUV2ZW50KSA9PiBkZXNlcmlhbGl6ZUV2ZW50LnR5cGUgPT09IFwiZGVzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIikgfHwge1xuICAgICAgdHlwZTogXCJkZXNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgbWltZVR5cGU6IFwiKi8qXCIsXG4gICAgICByZWFzb246IGRlc2VyaWFsaXplRXZlbnRzLm1hcCgoZGVzZXJpYWxpemVFdmVudCkgPT4gZGVzZXJpYWxpemVFdmVudC50eXBlID09PSBcImRlc2VyaWFsaXphdGlvbi5mYWlsdXJlXCIgPyBkZXNlcmlhbGl6ZUV2ZW50LnJlYXNvbiA6IFwiXCIpLmpvaW4oXCIsIFwiKVxuICAgIH07XG4gIH0sXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0sIGRlc2VyaWFsaXplRXZlbnQpID0+IFtyYWlzZSh7XG4gICAgLi4uZGVzZXJpYWxpemVFdmVudCxcbiAgICBkYXRhVHJhbnNmZXI6IGV2ZW50LmRhdGFUcmFuc2ZlclxuICB9KV1dXG59LCBhdFRoZUVuZE9mVGV4dEJsb2NrID0ge1xuICBvbjogXCJpbnNlcnQuYnJlYWtcIixcbiAgZ3VhcmQ6ICh7XG4gICAgY29udGV4dFxuICB9KSA9PiB7XG4gICAgY29uc3QgZm9jdXNUZXh0QmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayh7XG4gICAgICBjb250ZXh0XG4gICAgfSksIHNlbGVjdGlvbkNvbGxhcHNlZCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KTtcbiAgICBpZiAoIWNvbnRleHQuc2VsZWN0aW9uIHx8ICFmb2N1c1RleHRCbG9jayB8fCAhc2VsZWN0aW9uQ29sbGFwc2VkKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IGF0VGhlRW5kT2ZCbG9jayA9IGlzQXRUaGVFbmRPZkJsb2NrKGZvY3VzVGV4dEJsb2NrKSh7XG4gICAgICBjb250ZXh0XG4gICAgfSksIGZvY3VzTGlzdEl0ZW0gPSBmb2N1c1RleHRCbG9jay5ub2RlLmxpc3RJdGVtLCBmb2N1c0xldmVsID0gZm9jdXNUZXh0QmxvY2subm9kZS5sZXZlbDtcbiAgICByZXR1cm4gYXRUaGVFbmRPZkJsb2NrID8ge1xuICAgICAgZm9jdXNMaXN0SXRlbSxcbiAgICAgIGZvY3VzTGV2ZWxcbiAgICB9IDogITE7XG4gIH0sXG4gIGFjdGlvbnM6IFsoe1xuICAgIGNvbnRleHRcbiAgfSwge1xuICAgIGZvY3VzTGlzdEl0ZW0sXG4gICAgZm9jdXNMZXZlbFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrXCIsXG4gICAgYmxvY2s6IHtcbiAgICAgIF90eXBlOiBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLFxuICAgICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICBfdHlwZTogY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lLFxuICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICBtYXJrczogW11cbiAgICAgIH1dLFxuICAgICAgbWFya0RlZnM6IFtdLFxuICAgICAgbGlzdEl0ZW06IGZvY3VzTGlzdEl0ZW0sXG4gICAgICBsZXZlbDogZm9jdXNMZXZlbCxcbiAgICAgIHN0eWxlOiBjb250ZXh0LnNjaGVtYS5zdHlsZXNbMF0/LnZhbHVlXG4gICAgfSxcbiAgICBwbGFjZW1lbnQ6IFwiYWZ0ZXJcIlxuICB9KV1dXG59LCBhdFRoZVN0YXJ0T2ZUZXh0QmxvY2sgPSB7XG4gIG9uOiBcImluc2VydC5icmVha1wiLFxuICBndWFyZDogKHtcbiAgICBjb250ZXh0XG4gIH0pID0+IHtcbiAgICBjb25zdCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSwgc2VsZWN0aW9uQ29sbGFwc2VkID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQoe1xuICAgICAgY29udGV4dFxuICAgIH0pO1xuICAgIGlmICghY29udGV4dC5zZWxlY3Rpb24gfHwgIWZvY3VzVGV4dEJsb2NrIHx8ICFzZWxlY3Rpb25Db2xsYXBzZWQpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgZm9jdXNTcGFuID0gZ2V0Rm9jdXNTcGFuKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSwgZm9jdXNEZWNvcmF0b3JzID0gZm9jdXNTcGFuPy5ub2RlLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+IGNvbnRleHQuc2NoZW1hLmRlY29yYXRvcnMuc29tZSgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUgPT09IG1hcmspID8/IFtdKSwgZm9jdXNBbm5vdGF0aW9ucyA9IGZvY3VzU3Bhbj8ubm9kZS5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhY29udGV4dC5zY2hlbWEuZGVjb3JhdG9ycy5zb21lKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci52YWx1ZSA9PT0gbWFyaykpID8/IFtdLCBmb2N1c0xpc3RJdGVtID0gZm9jdXNUZXh0QmxvY2subm9kZS5saXN0SXRlbSwgZm9jdXNMZXZlbCA9IGZvY3VzVGV4dEJsb2NrLm5vZGUubGV2ZWw7XG4gICAgcmV0dXJuIGlzQXRUaGVTdGFydE9mQmxvY2soZm9jdXNUZXh0QmxvY2spKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSA/IHtcbiAgICAgIGZvY3VzQW5ub3RhdGlvbnMsXG4gICAgICBmb2N1c0RlY29yYXRvcnMsXG4gICAgICBmb2N1c0xpc3RJdGVtLFxuICAgICAgZm9jdXNMZXZlbFxuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyh7XG4gICAgY29udGV4dFxuICB9LCB7XG4gICAgZm9jdXNBbm5vdGF0aW9ucyxcbiAgICBmb2N1c0RlY29yYXRvcnMsXG4gICAgZm9jdXNMaXN0SXRlbSxcbiAgICBmb2N1c0xldmVsXG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJpbnNlcnQuYmxvY2tcIixcbiAgICBibG9jazoge1xuICAgICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgIF90eXBlOiBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgIF90eXBlOiBjb250ZXh0LnNjaGVtYS5zcGFuLm5hbWUsXG4gICAgICAgIG1hcmtzOiBmb2N1c0Fubm90YXRpb25zLmxlbmd0aCA9PT0gMCA/IGZvY3VzRGVjb3JhdG9ycyA6IFtdLFxuICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICB9XSxcbiAgICAgIGxpc3RJdGVtOiBmb2N1c0xpc3RJdGVtLFxuICAgICAgbGV2ZWw6IGZvY3VzTGV2ZWwsXG4gICAgICBzdHlsZTogY29udGV4dC5zY2hlbWEuc3R5bGVzWzBdPy52YWx1ZVxuICAgIH0sXG4gICAgcGxhY2VtZW50OiBcImJlZm9yZVwiXG4gIH0pXV1cbn0sIGNvcmVJbnNlcnRCcmVha0JlaGF2aW9ycyA9IHtcbiAgYXRUaGVFbmRPZlRleHRCbG9jayxcbiAgYXRUaGVTdGFydE9mVGV4dEJsb2NrXG59LCBNQVhfTElTVF9MRVZFTCA9IDEwLCB0b2dnbGVMaXN0SXRlbU9mZiA9IHtcbiAgb246IFwibGlzdCBpdGVtLnRvZ2dsZVwiLFxuICBndWFyZDogKHtcbiAgICBjb250ZXh0LFxuICAgIGV2ZW50XG4gIH0pID0+IGlzQWN0aXZlTGlzdEl0ZW0oZXZlbnQubGlzdEl0ZW0pKHtcbiAgICBjb250ZXh0XG4gIH0pLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwibGlzdCBpdGVtLnJlbW92ZVwiLFxuICAgIGxpc3RJdGVtOiBldmVudC5saXN0SXRlbVxuICB9KV1dXG59LCB0b2dnbGVMaXN0SXRlbU9uID0ge1xuICBvbjogXCJsaXN0IGl0ZW0udG9nZ2xlXCIsXG4gIGd1YXJkOiAoe1xuICAgIGNvbnRleHQsXG4gICAgZXZlbnRcbiAgfSkgPT4gIWlzQWN0aXZlTGlzdEl0ZW0oZXZlbnQubGlzdEl0ZW0pKHtcbiAgICBjb250ZXh0XG4gIH0pLFxuICBhY3Rpb25zOiBbKHtcbiAgICBldmVudFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwibGlzdCBpdGVtLmFkZFwiLFxuICAgIGxpc3RJdGVtOiBldmVudC5saXN0SXRlbVxuICB9KV1dXG59LCBjbGVhckxpc3RPbkJhY2tzcGFjZSA9IHtcbiAgb246IFwiZGVsZXRlLmJhY2t3YXJkXCIsXG4gIGd1YXJkOiAoe1xuICAgIGNvbnRleHRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbkNvbGxhcHNlZCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSwgZm9jdXNUZXh0QmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayh7XG4gICAgICBjb250ZXh0XG4gICAgfSksIGZvY3VzU3BhbiA9IGdldEZvY3VzU3Bhbih7XG4gICAgICBjb250ZXh0XG4gICAgfSk7XG4gICAgcmV0dXJuICFzZWxlY3Rpb25Db2xsYXBzZWQgfHwgIWZvY3VzVGV4dEJsb2NrIHx8ICFmb2N1c1NwYW4gPyAhMSA6IGZvY3VzVGV4dEJsb2NrLm5vZGUuY2hpbGRyZW5bMF0uX2tleSA9PT0gZm9jdXNTcGFuLm5vZGUuX2tleSAmJiBjb250ZXh0LnNlbGVjdGlvbj8uZm9jdXMub2Zmc2V0ID09PSAwICYmIGZvY3VzVGV4dEJsb2NrLm5vZGUubGV2ZWwgPT09IDEgPyB7XG4gICAgICBmb2N1c1RleHRCbG9ja1xuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgZm9jdXNUZXh0QmxvY2tcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInRleHQgYmxvY2sudW5zZXRcIixcbiAgICBwcm9wczogW1wibGlzdEl0ZW1cIiwgXCJsZXZlbFwiXSxcbiAgICBhdDogZm9jdXNUZXh0QmxvY2sucGF0aFxuICB9KV1dXG59LCB1bmluZGVudExpc3RPbkJhY2tzcGFjZSA9IHtcbiAgb246IFwiZGVsZXRlLmJhY2t3YXJkXCIsXG4gIGd1YXJkOiAoe1xuICAgIGNvbnRleHRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbkNvbGxhcHNlZCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSwgZm9jdXNUZXh0QmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayh7XG4gICAgICBjb250ZXh0XG4gICAgfSksIGZvY3VzU3BhbiA9IGdldEZvY3VzU3Bhbih7XG4gICAgICBjb250ZXh0XG4gICAgfSk7XG4gICAgcmV0dXJuICFzZWxlY3Rpb25Db2xsYXBzZWQgfHwgIWZvY3VzVGV4dEJsb2NrIHx8ICFmb2N1c1NwYW4gPyAhMSA6IGZvY3VzVGV4dEJsb2NrLm5vZGUuY2hpbGRyZW5bMF0uX2tleSA9PT0gZm9jdXNTcGFuLm5vZGUuX2tleSAmJiBjb250ZXh0LnNlbGVjdGlvbj8uZm9jdXMub2Zmc2V0ID09PSAwICYmIGZvY3VzVGV4dEJsb2NrLm5vZGUubGV2ZWwgIT09IHZvaWQgMCAmJiBmb2N1c1RleHRCbG9jay5ub2RlLmxldmVsID4gMSA/IHtcbiAgICAgIGZvY3VzVGV4dEJsb2NrLFxuICAgICAgbGV2ZWw6IGZvY3VzVGV4dEJsb2NrLm5vZGUubGV2ZWwgLSAxXG4gICAgfSA6ICExO1xuICB9LFxuICBhY3Rpb25zOiBbKF8sIHtcbiAgICBmb2N1c1RleHRCbG9jayxcbiAgICBsZXZlbFxuICB9KSA9PiBbcmFpc2Uoe1xuICAgIHR5cGU6IFwidGV4dCBibG9jay5zZXRcIixcbiAgICBsZXZlbCxcbiAgICBhdDogZm9jdXNUZXh0QmxvY2sucGF0aFxuICB9KV1dXG59LCBjbGVhckxpc3RPbkVudGVyID0ge1xuICBvbjogXCJpbnNlcnQuYnJlYWtcIixcbiAgZ3VhcmQ6ICh7XG4gICAgY29udGV4dFxuICB9KSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0aW9uQ29sbGFwc2VkID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQoe1xuICAgICAgY29udGV4dFxuICAgIH0pLCBmb2N1c0xpc3RCbG9jayA9IGdldEZvY3VzTGlzdEJsb2NrKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KTtcbiAgICByZXR1cm4gIXNlbGVjdGlvbkNvbGxhcHNlZCB8fCAhZm9jdXNMaXN0QmxvY2sgfHwgIWlzRW1wdHlUZXh0QmxvY2soZm9jdXNMaXN0QmxvY2subm9kZSkgPyAhMSA6IHtcbiAgICAgIGZvY3VzTGlzdEJsb2NrXG4gICAgfTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgZm9jdXNMaXN0QmxvY2tcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInRleHQgYmxvY2sudW5zZXRcIixcbiAgICBwcm9wczogW1wibGlzdEl0ZW1cIiwgXCJsZXZlbFwiXSxcbiAgICBhdDogZm9jdXNMaXN0QmxvY2sucGF0aFxuICB9KV1dXG59LCBpbmRlbnRMaXN0T25UYWIgPSB7XG4gIG9uOiBcImtleS5kb3duXCIsXG4gIGd1YXJkOiAoe1xuICAgIGNvbnRleHQsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGlmICghaXNIb3RrZXkoXCJUYWJcIiwgZXZlbnQua2V5Ym9hcmRFdmVudCkpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3Qgc2VsZWN0ZWRCbG9ja3MgPSBnZXRTZWxlY3RlZEJsb2Nrcyh7XG4gICAgICBjb250ZXh0XG4gICAgfSksIGd1YXJkcyA9IGNyZWF0ZUd1YXJkcyhjb250ZXh0KSwgc2VsZWN0ZWRMaXN0QmxvY2tzID0gc2VsZWN0ZWRCbG9ja3MuZmxhdE1hcCgoYmxvY2spID0+IGd1YXJkcy5pc0xpc3RCbG9jayhibG9jay5ub2RlKSA/IFt7XG4gICAgICBub2RlOiBibG9jay5ub2RlLFxuICAgICAgcGF0aDogYmxvY2sucGF0aFxuICAgIH1dIDogW10pO1xuICAgIHJldHVybiBzZWxlY3RlZExpc3RCbG9ja3MubGVuZ3RoID09PSBzZWxlY3RlZEJsb2Nrcy5sZW5ndGggPyB7XG4gICAgICBzZWxlY3RlZExpc3RCbG9ja3NcbiAgICB9IDogITE7XG4gIH0sXG4gIGFjdGlvbnM6IFsoXywge1xuICAgIHNlbGVjdGVkTGlzdEJsb2Nrc1xuICB9KSA9PiBzZWxlY3RlZExpc3RCbG9ja3MubWFwKChzZWxlY3RlZExpc3RCbG9jaykgPT4gcmFpc2Uoe1xuICAgIHR5cGU6IFwidGV4dCBibG9jay5zZXRcIixcbiAgICBsZXZlbDogTWF0aC5taW4oTUFYX0xJU1RfTEVWRUwsIE1hdGgubWF4KDEsIHNlbGVjdGVkTGlzdEJsb2NrLm5vZGUubGV2ZWwgKyAxKSksXG4gICAgYXQ6IHNlbGVjdGVkTGlzdEJsb2NrLnBhdGhcbiAgfSkpXVxufSwgdW5pbmRlbnRMaXN0T25TaGlmdFRhYiA9IHtcbiAgb246IFwia2V5LmRvd25cIixcbiAgZ3VhcmQ6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgaWYgKCFpc0hvdGtleShcIlNoaWZ0K1RhYlwiLCBldmVudC5rZXlib2FyZEV2ZW50KSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBzZWxlY3RlZEJsb2NrcyA9IGdldFNlbGVjdGVkQmxvY2tzKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSwgZ3VhcmRzID0gY3JlYXRlR3VhcmRzKGNvbnRleHQpLCBzZWxlY3RlZExpc3RCbG9ja3MgPSBzZWxlY3RlZEJsb2Nrcy5mbGF0TWFwKChibG9jaykgPT4gZ3VhcmRzLmlzTGlzdEJsb2NrKGJsb2NrLm5vZGUpID8gW3tcbiAgICAgIG5vZGU6IGJsb2NrLm5vZGUsXG4gICAgICBwYXRoOiBibG9jay5wYXRoXG4gICAgfV0gOiBbXSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkTGlzdEJsb2Nrcy5sZW5ndGggPT09IHNlbGVjdGVkQmxvY2tzLmxlbmd0aCA/IHtcbiAgICAgIHNlbGVjdGVkTGlzdEJsb2Nrc1xuICAgIH0gOiAhMTtcbiAgfSxcbiAgYWN0aW9uczogWyhfLCB7XG4gICAgc2VsZWN0ZWRMaXN0QmxvY2tzXG4gIH0pID0+IHNlbGVjdGVkTGlzdEJsb2Nrcy5tYXAoKHNlbGVjdGVkTGlzdEJsb2NrKSA9PiByYWlzZSh7XG4gICAgdHlwZTogXCJ0ZXh0IGJsb2NrLnNldFwiLFxuICAgIGxldmVsOiBNYXRoLm1pbihNQVhfTElTVF9MRVZFTCwgTWF0aC5tYXgoMSwgc2VsZWN0ZWRMaXN0QmxvY2subm9kZS5sZXZlbCAtIDEpKSxcbiAgICBhdDogc2VsZWN0ZWRMaXN0QmxvY2sucGF0aFxuICB9KSldXG59LCBjb3JlTGlzdEJlaGF2aW9ycyA9IHtcbiAgdG9nZ2xlTGlzdEl0ZW1PZmYsXG4gIHRvZ2dsZUxpc3RJdGVtT24sXG4gIGNsZWFyTGlzdE9uQmFja3NwYWNlLFxuICB1bmluZGVudExpc3RPbkJhY2tzcGFjZSxcbiAgY2xlYXJMaXN0T25FbnRlcixcbiAgaW5kZW50TGlzdE9uVGFiLFxuICB1bmluZGVudExpc3RPblNoaWZ0VGFiXG59LCBjb3JlU2VyaWFsaXplQmVoYXZpb3JzID0ge1xuICBzZXJpYWxpemU6IHtcbiAgICBvbjogXCJzZXJpYWxpemVcIixcbiAgICBndWFyZDogKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBldmVudFxuICAgIH0pID0+IHtcbiAgICAgIGlmIChjb250ZXh0LmNvbnZlcnRlcnMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gITE7XG4gICAgICBjb25zdCBzZXJpYWxpemVFdmVudHMgPSBjb250ZXh0LmNvbnZlcnRlcnMubWFwKChjb252ZXJ0ZXIpID0+IGNvbnZlcnRlci5zZXJpYWxpemUoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUV2ZW50cy5sZW5ndGggPT09IDAgPyAhMSA6IHNlcmlhbGl6ZUV2ZW50cztcbiAgICB9LFxuICAgIGFjdGlvbnM6IFsoe1xuICAgICAgZXZlbnRcbiAgICB9LCBzZXJpYWxpemVFdmVudHMpID0+IHNlcmlhbGl6ZUV2ZW50cy5tYXAoKHNlcmlhbGl6ZUV2ZW50KSA9PiByYWlzZSh7XG4gICAgICAuLi5zZXJpYWxpemVFdmVudCxcbiAgICAgIGRhdGFUcmFuc2ZlcjogZXZlbnQuZGF0YVRyYW5zZmVyXG4gICAgfSkpXVxuICB9LFxuICBcInNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiOiB7XG4gICAgb246IFwic2VyaWFsaXphdGlvbi5zdWNjZXNzXCIsXG4gICAgYWN0aW9uczogWyh7XG4gICAgICBldmVudFxuICAgIH0pID0+IFtyYWlzZSh7XG4gICAgICB0eXBlOiBcImRhdGEgdHJhbnNmZXIuc2V0XCIsXG4gICAgICBkYXRhOiBldmVudC5kYXRhLFxuICAgICAgZGF0YVRyYW5zZmVyOiBldmVudC5kYXRhVHJhbnNmZXIsXG4gICAgICBtaW1lVHlwZTogZXZlbnQubWltZVR5cGVcbiAgICB9KV1dXG4gIH1cbn0sIHRvZ2dsZVN0eWxlT2ZmID0ge1xuICBvbjogXCJzdHlsZS50b2dnbGVcIixcbiAgZ3VhcmQ6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiBpc0FjdGl2ZVN0eWxlKGV2ZW50LnN0eWxlKSh7XG4gICAgY29udGV4dFxuICB9KSxcbiAgYWN0aW9uczogWyh7XG4gICAgZXZlbnRcbiAgfSkgPT4gW3JhaXNlKHtcbiAgICB0eXBlOiBcInN0eWxlLnJlbW92ZVwiLFxuICAgIHN0eWxlOiBldmVudC5zdHlsZVxuICB9KV1dXG59LCB0b2dnbGVTdHlsZU9uID0ge1xuICBvbjogXCJzdHlsZS50b2dnbGVcIixcbiAgZ3VhcmQ6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiAhaXNBY3RpdmVTdHlsZShldmVudC5zdHlsZSkoe1xuICAgIGNvbnRleHRcbiAgfSksXG4gIGFjdGlvbnM6IFsoe1xuICAgIGV2ZW50XG4gIH0pID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJzdHlsZS5hZGRcIixcbiAgICBzdHlsZTogZXZlbnQuc3R5bGVcbiAgfSldXVxufSwgY29yZVN0eWxlQmVoYXZpb3JzID0ge1xuICB0b2dnbGVTdHlsZU9mZixcbiAgdG9nZ2xlU3R5bGVPblxufSwgc29mdFJldHVybiA9IHtcbiAgb246IFwiaW5zZXJ0LnNvZnQgYnJlYWtcIixcbiAgYWN0aW9uczogWygpID0+IFtyYWlzZSh7XG4gICAgdHlwZTogXCJpbnNlcnQudGV4dFwiLFxuICAgIHRleHQ6IGBcbmBcbiAgfSldXVxufSwgY29yZUJlaGF2aW9ycyA9IFtzb2Z0UmV0dXJuLCBjb3JlQW5ub3RhdGlvbkJlaGF2aW9ycy50b2dnbGVBbm5vdGF0aW9uT2ZmLCBjb3JlQW5ub3RhdGlvbkJlaGF2aW9ycy50b2dnbGVBbm5vdGF0aW9uT24sIGNvcmVEZWNvcmF0b3JCZWhhdmlvcnMudG9nZ2xlRGVjb3JhdG9yT2ZmLCBjb3JlRGVjb3JhdG9yQmVoYXZpb3JzLnRvZ2dsZURlY29yYXRvck9uLCBjb3JlRGVjb3JhdG9yQmVoYXZpb3JzLnN0cm9uZ1Nob3J0Y3V0LCBjb3JlRGVjb3JhdG9yQmVoYXZpb3JzLmVtU2hvcnRjdXQsIGNvcmVEZWNvcmF0b3JCZWhhdmlvcnMudW5kZXJsaW5lU2hvcnRjdXQsIGNvcmVEZWNvcmF0b3JCZWhhdmlvcnMuY29kZVNob3J0Y3V0LCBjb3JlRGVzZXJpYWxpemVCZWhhdmlvciwgY29yZUJsb2NrT2JqZWN0QmVoYXZpb3JzLmFycm93RG93bk9uTG9uZWx5QmxvY2tPYmplY3QsIGNvcmVCbG9ja09iamVjdEJlaGF2aW9ycy5hcnJvd1VwT25Mb25lbHlCbG9ja09iamVjdCwgY29yZUJsb2NrT2JqZWN0QmVoYXZpb3JzLmJyZWFraW5nQmxvY2tPYmplY3QsIGNvcmVCbG9ja09iamVjdEJlaGF2aW9ycy5kZWxldGluZ0VtcHR5VGV4dEJsb2NrQWZ0ZXJCbG9ja09iamVjdCwgY29yZUJsb2NrT2JqZWN0QmVoYXZpb3JzLmRlbGV0aW5nRW1wdHlUZXh0QmxvY2tCZWZvcmVCbG9ja09iamVjdCwgY29yZUxpc3RCZWhhdmlvcnMudG9nZ2xlTGlzdEl0ZW1PZmYsIGNvcmVMaXN0QmVoYXZpb3JzLnRvZ2dsZUxpc3RJdGVtT24sIGNvcmVMaXN0QmVoYXZpb3JzLmNsZWFyTGlzdE9uQmFja3NwYWNlLCBjb3JlTGlzdEJlaGF2aW9ycy51bmluZGVudExpc3RPbkJhY2tzcGFjZSwgY29yZUxpc3RCZWhhdmlvcnMuY2xlYXJMaXN0T25FbnRlciwgY29yZUxpc3RCZWhhdmlvcnMuaW5kZW50TGlzdE9uVGFiLCBjb3JlTGlzdEJlaGF2aW9ycy51bmluZGVudExpc3RPblNoaWZ0VGFiLCBjb3JlSW5zZXJ0QnJlYWtCZWhhdmlvcnMuYXRUaGVFbmRPZlRleHRCbG9jaywgY29yZUluc2VydEJyZWFrQmVoYXZpb3JzLmF0VGhlU3RhcnRPZlRleHRCbG9jaywgY29yZVNlcmlhbGl6ZUJlaGF2aW9ycy5zZXJpYWxpemUsIGNvcmVTZXJpYWxpemVCZWhhdmlvcnNbXCJzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIl0sIGNvcmVTdHlsZUJlaGF2aW9ycy50b2dnbGVTdHlsZU9mZiwgY29yZVN0eWxlQmVoYXZpb3JzLnRvZ2dsZVN0eWxlT25dLCBjb3JlQmVoYXZpb3IgPSB7XG4gIHNvZnRSZXR1cm4sXG4gIGFubm90YXRpb246IGNvcmVBbm5vdGF0aW9uQmVoYXZpb3JzLFxuICBkZWNvcmF0b3JzOiBjb3JlRGVjb3JhdG9yQmVoYXZpb3JzLFxuICBkZXNlcmlhbGl6ZTogY29yZURlc2VyaWFsaXplQmVoYXZpb3IsXG4gIGJsb2NrT2JqZWN0czogY29yZUJsb2NrT2JqZWN0QmVoYXZpb3JzLFxuICBpbnNlcnRCcmVhazogY29yZUluc2VydEJyZWFrQmVoYXZpb3JzLFxuICBsaXN0czogY29yZUxpc3RCZWhhdmlvcnMsXG4gIC4uLmNvcmVTZXJpYWxpemVCZWhhdmlvcnMsXG4gIHN0eWxlOiBjb3JlU2VyaWFsaXplQmVoYXZpb3JzXG59O1xuZXhwb3J0IHtcbiAgY29yZUJlaGF2aW9yLFxuICBjb3JlQmVoYXZpb3JzLFxuICBkZWZpbmVCZWhhdmlvcixcbiAgaXNDdXN0b21CZWhhdmlvckV2ZW50LFxuICBpc0hvdGtleSxcbiAgcmFpc2Vcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZWhhdmlvci5jb3JlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMarkdownBehaviors: () => (/* binding */ createMarkdownBehaviors)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.is-at-the-start-of-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-at-the-start-of-block.js\");\n/* harmony import */ var _util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n/* harmony import */ var _selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selector.get-text-before.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\");\n/* harmony import */ var _behavior_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n\n\n\n\n\nfunction createMarkdownBehaviors(config) {\n  const automaticBlockquoteOnSpace = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_2__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_2__.getTextBlockText)(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(context);\n      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {\n        focusTextBlock,\n        style: blockquoteStyle\n      } : !1;\n    },\n    actions: [() => [{\n      type: \"insert.text\",\n      text: \" \"\n    }], (_, {\n      focusTextBlock,\n      style\n    }) => [{\n      type: \"text block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }, {\n      type: \"text block.set\",\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: 2\n      }\n    }]]\n  }), automaticHr = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const hrCharacter = event.text === \"-\" ? \"-\" : event.text === \"*\" ? \"*\" : event.text === \"_\" ? \"_\" : void 0;\n      if (hrCharacter === void 0)\n        return !1;\n      const hrObject = config.horizontalRuleObject?.(context), focusBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      });\n      if (!hrObject || !focusBlock || !selectionCollapsed)\n        return !1;\n      const textBefore = (0,_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      }), hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3\n        }\n      };\n      return textBefore === `${hrCharacter}${hrCharacter}` ? {\n        hrObject,\n        focusBlock,\n        hrCharacter,\n        hrBlockOffsets\n      } : !1;\n    },\n    actions: [(_, {\n      hrCharacter\n    }) => [{\n      type: \"insert.text\",\n      text: hrCharacter\n    }], (_, {\n      hrObject,\n      hrBlockOffsets\n    }) => [{\n      type: \"insert.block object\",\n      placement: \"before\",\n      blockObject: hrObject\n    }, {\n      type: \"delete.text\",\n      ...hrBlockOffsets\n    }]]\n  }), automaticHrOnPaste = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"paste\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const text = event.data.getData(\"text/plain\"), hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/gm, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(context), focusBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlock)({\n        context\n      });\n      return !hrCharacters || !hrObject || !focusBlock ? !1 : {\n        hrCharacters,\n        hrObject,\n        focusBlock\n      };\n    },\n    actions: [(_, {\n      hrCharacters\n    }) => [{\n      type: \"insert.text\",\n      text: hrCharacters\n    }], (_, {\n      hrObject,\n      focusBlock\n    }) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_4__.isPortableTextTextBlock)(focusBlock.node) ? [{\n      type: \"insert.text block\",\n      textBlock: {\n        children: focusBlock.node.children\n      },\n      placement: \"after\"\n    }, {\n      type: \"insert.block object\",\n      blockObject: hrObject,\n      placement: \"after\"\n    }, {\n      type: \"delete.block\",\n      blockPath: focusBlock.path\n    }] : [{\n      type: \"insert.block object\",\n      blockObject: hrObject,\n      placement: \"after\"\n    }]]\n  }), automaticHeadingOnSpace = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_2__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_2__.getTextBlockText)(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0;\n      if (blockOffset.offset !== level)\n        return !1;\n      const style = level !== void 0 ? config.headingStyle?.({\n        schema: context.schema,\n        level\n      }) : void 0;\n      return level !== void 0 && style !== void 0 ? {\n        focusTextBlock,\n        style,\n        level\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [event], (_, {\n      focusTextBlock,\n      style,\n      level\n    }) => [{\n      type: \"text block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }, {\n      type: \"text block.set\",\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: level + 1\n      }\n    }]]\n  }), clearStyleOnBackspace = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      context\n    }) => {\n      const selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(context);\n      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {\n        defaultStyle,\n        focusTextBlock\n      } : !1;\n    },\n    actions: [(_, {\n      defaultStyle,\n      focusTextBlock\n    }) => [{\n      type: \"text block.set\",\n      style: defaultStyle,\n      at: focusTextBlock.path\n    }]]\n  }), automaticListOnSpace = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_2__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_2__.getTextBlockText)(focusTextBlock.node), defaultStyle = config.defaultStyle?.(context), looksLikeUnorderedList = /^(-|\\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;\n      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle\n        };\n      const looksLikeOrderedList = /^1\\./.test(blockText), orderedListStyle = config.orderedListStyle?.(context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;\n      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {\n        focusTextBlock,\n        listItem: orderedListStyle,\n        listItemLength: 2,\n        style: defaultStyle\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [event], (_, {\n      focusTextBlock,\n      style,\n      listItem,\n      listItemLength\n    }) => [{\n      type: \"text block.set\",\n      listItem,\n      level: 1,\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: listItemLength + 1\n      }\n    }]]\n  });\n  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];\n}\n\n//# sourceMappingURL=behavior.markdown.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/plugin.event-listener.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/plugin.event-listener.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorActorContext: () => (/* binding */ EditorActorContext),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   EventListenerPlugin: () => (/* binding */ EventListenerPlugin),\n/* harmony export */   IS_DRAGGING: () => (/* binding */ IS_DRAGGING),\n/* harmony export */   IS_DRAGGING_BLOCK_ELEMENT: () => (/* binding */ IS_DRAGGING_BLOCK_ELEMENT),\n/* harmony export */   IS_DRAGGING_BLOCK_TARGET_POSITION: () => (/* binding */ IS_DRAGGING_BLOCK_TARGET_POSITION),\n/* harmony export */   IS_DRAGGING_ELEMENT_TARGET: () => (/* binding */ IS_DRAGGING_ELEMENT_TARGET),\n/* harmony export */   KEY_TO_VALUE_ELEMENT: () => (/* binding */ KEY_TO_VALUE_ELEMENT),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   debugWithName: () => (/* binding */ debugWithName),\n/* harmony export */   defaultKeyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   fromSlateValue: () => (/* binding */ fromSlateValue),\n/* harmony export */   isEqualToEmptyEditor: () => (/* binding */ isEqualToEmptyEditor),\n/* harmony export */   moveRangeByOperation: () => (/* binding */ moveRangeByOperation),\n/* harmony export */   toPortableTextRange: () => (/* binding */ toPortableTextRange),\n/* harmony export */   toSlateRange: () => (/* binding */ toSlateRange),\n/* harmony export */   toSlateValue: () => (/* binding */ toSlateValue),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/./node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/./node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/./node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _portabletext_block_tools__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @portabletext/block-tools */ \"(ssr)/./node_modules/@portabletext/block-tools/lib/index.js\");\n/* harmony import */ var _portabletext_to_html__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @portabletext/to-html */ \"(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs\");\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/./node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/./node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/./node_modules/lodash.startcase/index.js\");\n/* harmony import */ var _selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./selector.is-at-the-start-of-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-at-the-start-of-block.js\");\n/* harmony import */ var _util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n/* harmony import */ var _behavior_core_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createEditorSchema(portableTextType) {\n  if (!portableTextType)\n    throw new Error(\"Parameter 'portabletextType' missing (required)\");\n  const blockType = portableTextType.of?.find(findBlockType);\n  if (!blockType)\n    throw new Error(\"Block type is not defined in this schema (required)\");\n  const childrenField = blockType.fields?.find((field) => field.name === \"children\");\n  if (!childrenField)\n    throw new Error(\"Children field for block type found in schema (required)\");\n  const ofType = childrenField.type.of;\n  if (!ofType)\n    throw new Error(\"Valid types for block children not found in schema (required)\");\n  const spanType = ofType.find((memberType) => memberType.name === \"span\");\n  if (!spanType)\n    throw new Error(\"Span type not found in schema (required)\");\n  const inlineObjectTypes = ofType.filter((memberType) => memberType.name !== \"span\") || [], blockObjectTypes = portableTextType.of?.filter((field) => field.name !== blockType.name) || [];\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: spanType.annotations\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === \"style\");\n  if (!styleField)\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\");\n  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style) => style.value);\n  if (!textStyles || textStyles.length === 0)\n    throw new Error(\"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\");\n  return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields?.find((btField) => btField.name === \"listItem\");\n  if (!listField)\n    throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\");\n  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nfunction defineSchema(definition) {\n  return definition;\n}\nfunction compileSchemaDefinition(definition) {\n  const blockObjects = definition?.blockObjects?.map((blockObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.defineType)({\n    type: \"object\",\n    // Very naive way to work around `SanitySchema.compile` adding default\n    // fields to objects with the name `image`\n    name: blockObject.name === \"image\" ? \"tmp-image\" : blockObject.name,\n    title: blockObject.name === \"image\" && blockObject.title === void 0 ? \"Image\" : blockObject.title,\n    fields: []\n  })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.defineType)({\n    type: \"object\",\n    name: inlineObject.name,\n    title: inlineObject.title,\n    fields: []\n  })) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.defineField)({\n    type: \"array\",\n    name: \"portable-text\",\n    of: [...blockObjects.map((blockObject) => ({\n      type: blockObject.name\n    })), {\n      type: \"block\",\n      name: \"block\",\n      of: inlineObjects.map((inlineObject) => ({\n        type: inlineObject.name\n      })),\n      marks: {\n        decorators: definition?.decorators?.map((decorator) => ({\n          title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_11__(decorator.name),\n          value: decorator.name\n        })) ?? [],\n        annotations: definition?.annotations?.map((annotation) => ({\n          name: annotation.name,\n          type: \"object\",\n          title: annotation.title\n        })) ?? []\n      },\n      lists: definition?.lists?.map((list) => ({\n        value: list.name,\n        title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_11__(list.name)\n      })) ?? [],\n      styles: definition?.styles?.map((style) => ({\n        value: style.name,\n        title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_11__(style.name)\n      })) ?? []\n    }]\n  }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_13__.Schema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects]\n  }).get(\"portable-text\"), pteSchema = createEditorSchema(schema);\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) => blockObject.name === \"tmp-image\" ? {\n      ...blockObject,\n      name: \"image\",\n      type: {\n        ...blockObject.type,\n        name: \"image\"\n      }\n    } : blockObject)\n  };\n}\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_3__(rootName);\nfunction debugWithName(name) {\n  const namespace = `${rootName}${name}`;\n  return debug__WEBPACK_IMPORTED_MODULE_3__ && debug__WEBPACK_IMPORTED_MODULE_3__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_3__(namespace) : debug__WEBPACK_IMPORTED_MODULE_3__(rootName);\n}\nfunction createKeyedPath(point, value, types) {\n  const blockPath = [point.path[0]];\n  if (!value)\n    return null;\n  const block = value[blockPath[0]];\n  if (!block)\n    return null;\n  const keyedBlockPath = [{\n    _key: block._key\n  }];\n  if (block._type !== types.block.name)\n    return keyedBlockPath;\n  let keyedChildPath;\n  const childPath = point.path.slice(0, 2), child = Array.isArray(block.children) && block.children[childPath[1]];\n  return child && (keyedChildPath = [\"children\", {\n    _key: child._key\n  }]), keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath;\n}\nfunction toSlatePath(path, editor) {\n  if (!editor)\n    return [];\n  const [block, blockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: [],\n    match: (n) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isKeySegment)(path[0]) && n._key === path[0]._key\n  }))[0] || [void 0, void 0];\n  if (!block || !slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block))\n    return [];\n  if (editor.isVoid(block))\n    return [blockPath[0], 0];\n  const childPath = [path[2]], childIndex = block.children.findIndex((child) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__([{\n    _key: child._key\n  }], childPath));\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex];\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(child) && editor.isVoid(child) ? blockPath.concat(childIndex).concat(0) : blockPath.concat(childIndex);\n  }\n  return [blockPath[0], 0];\n}\nfunction toPortableTextRange(value, range, types) {\n  if (!range)\n    return null;\n  let anchor = null, focus = null;\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types);\n  anchorPath && range.anchor && (anchor = {\n    path: anchorPath,\n    offset: range.anchor.offset\n  });\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types);\n  focusPath && range.focus && (focus = {\n    path: focusPath,\n    offset: range.focus.offset\n  });\n  const backward = !!(slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(range) && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isBackward(range));\n  return anchor && focus ? {\n    anchor,\n    focus,\n    backward\n  } : null;\n}\nfunction toSlateRange(selection, editor) {\n  if (!selection || !editor)\n    return null;\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset\n  }, focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset\n  };\n  return focus.path.length === 0 || anchor.path.length === 0 ? null : focus ? {\n    anchor,\n    focus\n  } : null;\n}\nfunction moveRangeByOperation(range, operation) {\n  const anchor = slate__WEBPACK_IMPORTED_MODULE_14__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_14__.Point.transform(range.focus, operation);\n  return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_14__.Point.equals(focus, range.focus) ? range : {\n    anchor,\n    focus\n  };\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n  const value = keyMap[object._key];\n  return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, {\n  schemaTypes\n}, keyMap = {}) {\n  return value && Array.isArray(value) ? value.map((block) => {\n    const {\n      _type,\n      _key,\n      ...rest\n    } = block, voidChildren = [{\n      _key: VOID_CHILD_KEY,\n      _type: \"span\",\n      text: \"\",\n      marks: []\n    }];\n    if (block && block._type === schemaTypes.block.name) {\n      const textBlock = block;\n      let hasInlines = !1;\n      const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child) => {\n        const {\n          _type: cType,\n          _key: cKey,\n          ...cRest\n        } = child;\n        return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n          _type: cType,\n          _key: cKey,\n          children: voidChildren,\n          value: cRest,\n          __inline: !0\n        }, keyMap)) : child;\n      });\n      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].value), keepObjectEquality({\n        _type,\n        _key,\n        ...rest,\n        children\n      }, keyMap));\n    }\n    return keepObjectEquality({\n      _type,\n      _key,\n      children: voidChildren,\n      value: rest\n    }, keyMap);\n  }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n  return value.map((block) => {\n    const {\n      _key,\n      _type\n    } = block;\n    if (!_key || !_type)\n      throw new Error(\"Not a valid block\");\n    if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n      let hasInlines = !1;\n      const children = block.children.map((child) => {\n        const {\n          _type: _cType\n        } = child;\n        if (\"value\" in child && _cType !== \"span\") {\n          hasInlines = !0;\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child;\n          return keepObjectEquality({\n            ...rest,\n            ...v,\n            _key: k,\n            _type: t\n          }, keyMap);\n        }\n        return child;\n      });\n      return hasInlines ? keepObjectEquality({\n        ...block,\n        children,\n        _key,\n        _type\n      }, keyMap) : block;\n    }\n    const blockValue = \"value\" in block && block.value;\n    return keepObjectEquality({\n      _key,\n      _type,\n      ...typeof blockValue == \"object\" ? blockValue : {}\n    }, keyMap);\n  });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].value && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), IS_DRAGGING = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_ELEMENT = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_ELEMENT_TARGET = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_TARGET_POSITION = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), PortableTextEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null), usePortableTextEditor = () => {\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PortableTextEditorContext);\n  if (!editor)\n    throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n  return editor;\n};\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_13__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst FLUSH_PATCHES_THROTTLED_MS =  false ? 0 : 1e3, mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_15__.setup)({\n  types: {\n    context: {},\n    events: {},\n    input: {},\n    emitted: {}\n  },\n  actions: {\n    \"emit has pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)({\n      type: \"has pending patches\"\n    }),\n    \"emit mutation\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n      context\n    }) => ({\n      type: \"mutation\",\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(context.slateEditor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(context.slateEditor))\n    })),\n    \"clear pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      pendingPatches: []\n    }),\n    \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      pendingPatches: ({\n        context,\n        event\n      }) => [...context.pendingPatches, event.patch]\n    })\n  },\n  guards: {\n    \"slate is normalizing\": ({\n      context\n    }) => slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isNormalizing(context.slateEditor)\n  }\n}).createMachine({\n  id: \"mutation\",\n  context: ({\n    input\n  }) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      on: {\n        patch: {\n          actions: [\"defer patch\", \"emit has pending patches\"],\n          target: \"has pending patches\"\n        }\n      }\n    },\n    \"has pending patches\": {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [{\n          guard: \"slate is normalizing\",\n          target: \"idle\",\n          actions: [\"emit mutation\", \"clear pending patches\"]\n        }, {\n          reenter: !0\n        }]\n      },\n      on: {\n        patch: {\n          actions: [\"defer patch\"],\n          reenter: !0\n        }\n      }\n    }\n  }\n});\nfunction validateValue(value, types, keyGenerator) {\n  let resolution = null, valid = !0;\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)], validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)];\n  return value === void 0 ? {\n    valid: !0,\n    resolution: null,\n    value\n  } : !Array.isArray(value) || value.length === 0 ? {\n    valid: !1,\n    resolution: {\n      patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([])],\n      description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n      action: \"Unset the value\",\n      item: value,\n      i18n: {\n        description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n        action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n      }\n    },\n    value\n  } : (value.some((blk, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(blk))\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([index])],\n        description: `Block must be an object, got ${String(blk)}`,\n        action: \"Unset invalid item\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n          action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._key || typeof blk._key != \"string\")\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)({\n          ...blk,\n          _key: keyGenerator()\n        }, [index])],\n        description: `Block at index ${index} is missing required _key.`,\n        action: \"Set the block with a random _key value\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-key.description\",\n          action: \"inputs.portable-text.invalid-value.missing-key.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._type || !validBlockTypes.includes(blk._type)) {\n      if (blk._type === \"block\") {\n        const currentBlockTypeName = types.block.name;\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)({\n            ...blk,\n            _type: currentBlockTypeName\n          }, [{\n            _key: blk._key\n          }])],\n          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n          action: `Use type '${currentBlockTypeName}'`,\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n            action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n            values: {\n              key: blk._key,\n              expectedTypeName: currentBlockTypeName\n            }\n          }\n        }, !0;\n      }\n      return !blk._type && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextTextBlock)({\n        ...blk,\n        _type: types.block.name\n      }) ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)({\n          ...blk,\n          _type: types.block.name\n        }, [{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n        action: `Use type '${types.block.name}'`,\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n          values: {\n            key: blk._key,\n            expectedTypeName: types.block.name\n          }\n        }\n      }, !0) : blk._type ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n          action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n          values: {\n            key: blk._key,\n            typeName: blk._type\n          }\n        }\n      }, !0) : (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing an _type property`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-type.action\",\n          values: {\n            key: blk._key\n          }\n        }\n      }, !0);\n    }\n    if (blk._type === types.block.name) {\n      const textBlock = blk;\n      if (textBlock.children && !Array.isArray(textBlock.children))\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)({\n            children: []\n          }, [{\n            _key: textBlock._key\n          }])],\n          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n          action: \"Reset the children property\",\n          item: textBlock,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n            action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n            values: {\n              key: textBlock._key\n            }\n          }\n        }, !0;\n      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n        const newSpan = {\n          _type: types.span.name,\n          _key: keyGenerator(),\n          text: \"\",\n          marks: []\n        };\n        return resolution = {\n          autoResolve: !0,\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.setIfMissing)([], [{\n            _key: blk._key\n          }, \"children\"]), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)([newSpan], \"after\", [{\n            _key: blk._key\n          }, \"children\", 0])],\n          description: `Children for text block with _key '${blk._key}' is empty.`,\n          action: \"Insert an empty text\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.empty-children.description\",\n            action: \"inputs.portable-text.invalid-value.empty-children.action\",\n            values: {\n              key: blk._key\n            }\n          }\n        }, !0;\n      }\n      const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_5__(textBlock.children.filter((cld) => cld._type === types.span.name).map((cld) => cld.marks || [])));\n      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key)));\n        if (unusedMarkDefs.length > 0)\n          return resolution = {\n            autoResolve: !0,\n            patches: unusedMarkDefs.map((markDefKey) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n              _key: blk._key\n            }, \"markDefs\", {\n              _key: markDefKey\n            }])),\n            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n            action: \"Remove unused mark definition item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n              values: {\n                key: blk._key,\n                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())\n              }\n            }\n          }, !0;\n      }\n      const orphanedMarks = allUsedMarks.filter((mark) => !types.decorators.map((dec) => dec.value).includes(mark)).filter((mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark));\n      if (orphanedMarks.length > 0) {\n        const spanChildren = textBlock.children.filter((cld) => cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark)));\n        if (spanChildren) {\n          const orphaned = orphanedMarks.join(\", \");\n          return resolution = {\n            autoResolve: !0,\n            patches: spanChildren.map((child) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)((child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)), [{\n              _key: blk._key\n            }, \"children\", {\n              _key: child._key\n            }, \"marks\"])),\n            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n            action: \"Remove invalid marks\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n              values: {\n                key: blk._key,\n                orphanedMarks: orphanedMarks.map((m) => m.toString())\n              }\n            }\n          }, !0;\n        }\n      }\n      textBlock.children.some((child, cIndex) => {\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(child))\n          return resolution = {\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n            action: \"Remove the item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n              action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        if (!child._key || typeof child._key != \"string\") {\n          const newChild = {\n            ...child,\n            _key: keyGenerator()\n          };\n          return resolution = {\n            autoResolve: !0,\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)(newChild, [{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n            action: \"Set a new random _key on the object\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n              action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        }\n        return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)({\n            ...child,\n            text: \"\"\n          }, [{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n          action: \"Write an empty text property to the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n            action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0) : !1 : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key,\n              childType: child._type\n            }\n          }\n        }, !0) : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0);\n      }) && (valid = !1);\n    }\n    return !1;\n  }) && (valid = !1), {\n    valid,\n    resolution,\n    value\n  });\n}\nfunction withRemoteChanges(editor, fn) {\n  const prev = isChangingRemotely(editor) || !1;\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n  const prev = isPatching(editor);\n  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n  return PATCHING.get(editor);\n}\nfunction cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1) return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); ) x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;\n      else if (y1 > text2Length) k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); ) x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;\n      else if (y2 > text2Length) k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n    checkLines: !1,\n    deadline\n  }), diffsb = doDiff(text1b, text2b, {\n    checkLines: !1,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0) return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2) return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch) throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++) text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) return [[DIFF_INSERT, text2]];\n  if (!text2) return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1) return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1) return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2) return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText2, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText2, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++) diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; ) switch (diffs[pointer][0]) {\n    case DIFF_INSERT:\n      countInsert++, textInsert += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_DELETE:\n      countDelete++, textDelete += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_EQUAL:\n      countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n      break;\n    default:\n      throw new Error(\"Unknown diff operation\");\n  }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; ) diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1) throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; ) getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);\n        else break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null) throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern) return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++) lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\") throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\") return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) adjusted.push({\n    diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n    start1: advanceTo(patch.start1),\n    start2: advanceTo(patch.start2),\n    utf8Start1: patch.utf8Start1,\n    utf8Start2: patch.utf8Start2,\n    length1: patch.length1,\n    length2: patch.length2,\n    utf8Length1: patch.utf8Length1,\n    utf8Length2: patch.utf8Length2\n  });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) nullPadding += String.fromCharCode(x);\n  for (const p of patches) p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\") throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0) return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, {\n          checkLines: !1\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\") break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\") patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \") patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n  const prev = isUndoing(editor);\n  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n  return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n  IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n  const prev = isRedoing(editor);\n  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n  return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n  IS_REDOING.set(editor, isRedoing2);\n}\nconst debug$e = debugWithName(\"plugin:withUndoRedo\"), SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {\n  const state = SAVING.get(editor);\n  return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n  const {\n    editorActor,\n    blockSchemaType\n  } = options;\n  return (editor) => {\n    let previousSnapshot = fromSlateValue(editor.children, blockSchemaType.name);\n    const remotePatches = getRemotePatches(editor);\n    options.subscriptions.push(() => {\n      debug$e(\"Subscribing to patches\");\n      const sub = editorActor.on(\"patches\", ({\n        patches,\n        snapshot\n      }) => {\n        let reset = !1;\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== \"local\" && remotePatches) {\n            if (patch.type === \"unset\" && patch.path.length === 0) {\n              debug$e(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                undos: [],\n                redos: []\n              }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n              return;\n            }\n            remotePatches.push({\n              patch,\n              time: /* @__PURE__ */ new Date(),\n              snapshot,\n              previousSnapshot\n            });\n          }\n        }), previousSnapshot = snapshot;\n      });\n      return () => {\n        debug$e(\"Unsubscribing to patches\"), sub.unsubscribe();\n      };\n    }), editor.history = {\n      undos: [],\n      redos: []\n    };\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      const {\n        operations,\n        history\n      } = editor, {\n        undos\n      } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor);\n      let merge = !0;\n      if (save) {\n        if (step ? operations.length === 0 && (merge = shouldMerge(op, lastOp) || overwrite) : merge = !1, step && merge)\n          step.operations.push(op);\n        else {\n          const newStep = {\n            operations: [...editor.selection === null ? [] : [createSelectOperation(editor)], op],\n            timestamp: /* @__PURE__ */ new Date()\n          };\n          undos.push(newStep), debug$e(\"Created new undo step\", step);\n        }\n        for (; undos.length > UNDO_STEP_LIMIT; )\n          undos.shift();\n        shouldClear(op) && (history.redos = []);\n      }\n      apply2(op);\n    }, editor.undo = () => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }))\n        return;\n      const {\n        undos\n      } = editor.history;\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1];\n        if (debug$e(\"Undoing\", step), step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n          let transformedOperations = step.operations;\n          otherPatches.forEach((item) => {\n            transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_5__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n          });\n          const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_14__.Operation.inverse).reverse();\n          try {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op);\n                  });\n                });\n              });\n            }), editor.normalize(), editor.onChange();\n          } catch (err) {\n            debug$e(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.history = {\n              undos: [],\n              redos: []\n            }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n            return;\n          }\n          editor.history.redos.push(step), editor.history.undos.pop();\n        }\n      }\n    }, editor.redo = () => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }))\n        return;\n      const {\n        redos\n      } = editor.history;\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1];\n        if (debug$e(\"Redoing\", step), step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n          let transformedOperations = step.operations;\n          otherPatches.forEach((item) => {\n            transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_5__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n          });\n          try {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op);\n                  });\n                });\n              });\n            }), editor.normalize(), editor.onChange();\n          } catch (err) {\n            debug$e(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.history = {\n              undos: [],\n              redos: []\n            }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n            return;\n          }\n          editor.history.undos.push(step), editor.history.redos.pop();\n        }\n      }\n    }, editor;\n  };\n}\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (patch.type === \"insert\" && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__({\n      _key: blk._key\n    }, patch.path[0]));\n    return debug$e(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__({\n      _key: blk._key\n    }, patch.path[0]));\n    return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$e(\"Skipping transformation that targeted removed block\"), []) : [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 0)\n    return debug$e(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n  if (patch.type === \"diffMatchPatch\") {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n    return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__({\n      _key: operationTargetBlock._key\n    }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {\n      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n      const {\n        diffs\n      } = diffPatch;\n      if (diffs.forEach((diff2, index) => {\n        const [diffType, text] = diff2;\n        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));\n      }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n          ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n          ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n          ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n          ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor\n        }));\n      }\n    }), [transformedOperation]);\n  }\n  return [transformedOperation];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)];\n    transformedOperation.path = newPath;\n  }\n  if (transformedOperation.type === \"set_selection\") {\n    const currentFocus = transformedOperation.properties?.focus ? {\n      ...transformedOperation.properties.focus\n    } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n      ...transformedOperation.properties.anchor\n    } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n      ...transformedOperation.newProperties.focus\n    } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n      ...transformedOperation.newProperties.anchor\n    } : void 0;\n    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);\n    }), currentFocus && currentAnchor && (transformedOperation.properties = {\n      focus: currentFocus,\n      anchor: currentAnchor\n    }), newFocus && newAnchor && (transformedOperation.newProperties = {\n      focus: newFocus,\n      anchor: newAnchor\n    }));\n  }\n  return transformedOperation;\n}\nconst shouldMerge = (op, prev) => !!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op) => op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n  const prev = isSaving(editor);\n  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n  return {\n    type: \"set_selection\",\n    properties: {\n      ...editor.selection\n    },\n    newProperties: {\n      ...editor.selection\n    }\n  };\n}\nfunction findOperationTargetBlock(editor, operation) {\n  let block;\n  return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst syncValueCallback = ({\n  sendBack,\n  input\n}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks\n  });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_18__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_15__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      initialValueSynced: !0\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      readOnly: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n    }),\n    \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      pendingValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"update value\"), event.value)\n    }),\n    \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      pendingValue: void 0\n    }),\n    \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      previousValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"done syncing\"), event.value)\n    }),\n    \"emit done syncing initial value\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)({\n      type: \"done syncing initial value\"\n    })\n  },\n  guards: {\n    \"initial value synced\": ({\n      context\n    }) => context.initialValueSynced,\n    \"is busy\": ({\n      context\n    }) => !context.readOnly && (context.isProcessingLocalChanges || (isChangingRemotely(context.slateEditor) ?? !1)),\n    \"value changed while syncing\": ({\n      context,\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n    \"pending value equals previous value\": ({\n      context\n    }) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(context.pendingValue, context.previousValue)\n  },\n  actors: {\n    \"sync value\": syncValueLogic\n  }\n}).createMachine({\n  id: \"sync\",\n  context: ({\n    input\n  }) => ({\n    initialValueSynced: !1,\n    isProcessingLocalChanges: !1,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: void 0,\n    previousValue: void 0\n  }),\n  on: {\n    \"has pending patches\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n        isProcessingLocalChanges: !0\n      })\n    },\n    mutation: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n        isProcessingLocalChanges: !1\n      })\n    },\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"setting up\": {\n      initial: \"syncing initial value\",\n      states: {\n        \"syncing initial value\": {\n          always: {\n            guard: \"initial value synced\",\n            target: \"done syncing initial value\"\n          }\n        },\n        \"done syncing initial value\": {\n          entry: [\"emit done syncing initial value\"],\n          type: \"final\"\n        }\n      }\n    },\n    syncing: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          on: {\n            \"update value\": [{\n              guard: \"is busy\",\n              target: \"busy\",\n              actions: [\"assign pending value\"]\n            }, {\n              target: \"syncing\",\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        busy: {\n          after: {\n            1e3: [{\n              guard: \"is busy\",\n              reenter: !0\n            }, {\n              target: \"syncing\"\n            }]\n          },\n          on: {\n            \"update value\": [{\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        syncing: {\n          always: {\n            guard: \"pending value equals previous value\",\n            target: \"idle\",\n            actions: [\"clear pending value\", \"assign initial value synced\"]\n          },\n          invoke: {\n            src: \"sync value\",\n            id: \"sync value\",\n            input: ({\n              context\n            }) => ({\n              context: {\n                keyGenerator: context.keyGenerator,\n                previousValue: context.previousValue,\n                readOnly: context.readOnly,\n                schema: context.schema\n              },\n              slateEditor: context.slateEditor,\n              streamBlocks: !context.initialValueSynced,\n              value: context.pendingValue\n            })\n          },\n          on: {\n            \"update value\": {\n              actions: [\"assign pending value\"]\n            },\n            patch: {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)]\n            },\n            \"invalid value\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)]\n            },\n            \"value changed\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)]\n            },\n            \"done syncing\": [{\n              guard: \"value changed while syncing\",\n              actions: [\"assign previous value\", \"assign initial value synced\"],\n              reenter: !0\n            }, {\n              target: \"idle\",\n              actions: [\"clear pending value\", \"assign previous value\", \"assign initial value synced\"]\n            }]\n          }\n        }\n      }\n    }\n  }\n}), debug$d = debugWithName(\"hook:useSyncValue\");\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value\n}) {\n  let isChanged = !1, isValid = !0;\n  const hadSelection = !!slateEditor.selection;\n  if ((!value || value.length === 0) && (debug$d(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n    withoutSaving(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        hadSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(slateEditor);\n        const childrenLength = slateEditor.children.length;\n        slateEditor.children.forEach((_, index) => {\n          slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n            at: [childrenLength - 1 - index]\n          });\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n          decorators: []\n        }), {\n          at: [0]\n        }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, [0, 0]);\n      });\n    });\n  }), isChanged = !0), value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema\n    });\n    await new Promise((resolve) => {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length;\n            if (slateValueFromProps.length < childrenLength) {\n              for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)\n                slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n                  at: [i]\n                });\n              isChanged = !0;\n            }\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks\n            })) {\n              const {\n                blockChanged,\n                blockValid\n              } = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value\n              });\n              isChanged = blockChanged || isChanged, isValid = isValid && blockValid;\n            }\n            resolve();\n          });\n        });\n      });\n    });\n  }\n  if (!isValid) {\n    debug$d(\"Invalid value, returning\"), sendBack({\n      type: \"done syncing\",\n      value\n    });\n    return;\n  }\n  if (isChanged) {\n    debug$d(\"Server value changed, syncing editor\");\n    try {\n      slateEditor.onChange();\n    } catch (err) {\n      console.error(err), sendBack({\n        type: \"invalid value\",\n        resolution: null,\n        value\n      }), sendBack({\n        type: \"done syncing\",\n        value\n      });\n      return;\n    }\n    hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), slateEditor.onChange()), sendBack({\n      type: \"value changed\",\n      value\n    });\n  } else\n    debug$d(\"Server value and editor value is equal, no need to sync.\");\n  sendBack({\n    type: \"done syncing\",\n    value\n  });\n}\nasync function* getBlocks({\n  slateValue,\n  streamBlocks\n}) {\n  let index = 0;\n  for await (const block of slateValue)\n    streamBlocks && await new Promise((resolve) => setTimeout(resolve, 0)), yield [block, index], index++;\n}\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value\n}) {\n  let blockChanged = !1, blockValid = !0;\n  const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(currentBlock, oldBlock);\n  return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch) => {\n            sendBack({\n              type: \"patch\",\n              patch\n            });\n          })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$d.enabled && debug$d(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$d.enabled && debug$d(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          debug$d.enabled && debug$d(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlock, {\n            at: [currentBlockIndex]\n          }) : (debug$d(\"Invalid\", validation), sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n      });\n    });\n  }), {\n    blockChanged,\n    blockValid\n  };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n  selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n    at: [currentBlockIndex]\n  }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n  if (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length;\n    currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index) => {\n      const childIndex = oldBlockChildrenLength - 1 - index;\n      childIndex > 0 && (debug$d(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n        at: [currentBlockIndex, childIndex]\n      }));\n    }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(currentBlockChild.text, oldBlockChild?.text), path = [currentBlockIndex, currentBlockChildIndex];\n      if (isChildChanged)\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug$d(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, currentBlockChild, {\n            at: path\n          });\n          const isSpanNode = slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n          isSpanNode && isTextChanged ? (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.delete(slateEditor, {\n            at: {\n              focus: {\n                path,\n                offset: 0\n              },\n              anchor: {\n                path,\n                offset: oldBlockChild.text.length\n              }\n            }\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n            at: path\n          }), slateEditor.onChange()) : isSpanNode || (debug$d(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(slateEditor, {\n            _key: VOID_CHILD_KEY\n          }, {\n            at: [...path, 0],\n            voids: !0\n          }));\n        } else oldBlockChild ? (debug$d(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(slateEditor, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange()) : oldBlockChild || (debug$d(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange());\n    });\n  }\n}\nconst debug$c = debugWithName(\"component:PortableTextEditor:Synchronizer\");\nfunction Synchronizer(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(40), {\n    editorActor,\n    slateEditor\n  } = props, value = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_19__.useSelector)(props.editorActor, _temp), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_19__.useSelector)(props.editorActor, _temp2);\n  let t0;\n  $[0] !== props.editorActor ? (t0 = props.editorActor.getSnapshot(), $[0] = props.editorActor, $[1] = t0) : t0 = $[1];\n  const t1 = t0.context.keyGenerator;\n  let t2;\n  $[2] !== props.editorActor ? (t2 = props.editorActor.getSnapshot().matches({\n    \"edit mode\": \"read only\"\n  }), $[2] = props.editorActor, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== props.editorActor ? (t3 = props.editorActor.getSnapshot(), $[4] = props.editorActor, $[5] = t3) : t3 = $[5];\n  let t4;\n  $[6] !== slateEditor || $[7] !== t0.context.keyGenerator || $[8] !== t2 || $[9] !== t3.context.schema ? (t4 = {\n    input: {\n      keyGenerator: t1,\n      readOnly: t2,\n      schema: t3.context.schema,\n      slateEditor\n    }\n  }, $[6] = slateEditor, $[7] = t0.context.keyGenerator, $[8] = t2, $[9] = t3.context.schema, $[10] = t4) : t4 = $[10];\n  const syncActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_19__.useActorRef)(syncMachine, t4);\n  let t5;\n  $[11] !== editorActor ? (t5 = editorActor.getSnapshot(), $[11] = editorActor, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== slateEditor || $[14] !== t5.context.schema ? (t6 = {\n    input: {\n      schema: t5.context.schema,\n      slateEditor\n    }\n  }, $[13] = slateEditor, $[14] = t5.context.schema, $[15] = t6) : t6 = $[15];\n  const mutationActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_19__.useActorRef)(mutationMachine, t6);\n  let t7, t8;\n  $[16] !== editorActor || $[17] !== mutationActorRef || $[18] !== syncActorRef ? (t7 = () => {\n    const subscription = mutationActorRef.on(\"*\", (event) => {\n      event.type === \"has pending patches\" && syncActorRef.send({\n        type: \"has pending patches\"\n      }), event.type === \"mutation\" && (syncActorRef.send({\n        type: \"mutation\"\n      }), editorActor.send({\n        type: \"mutation\",\n        patches: event.patches,\n        snapshot: event.snapshot,\n        value: event.snapshot\n      }));\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t8 = [mutationActorRef, syncActorRef, editorActor], $[16] = editorActor, $[17] = mutationActorRef, $[18] = syncActorRef, $[19] = t7, $[20] = t8) : (t7 = $[19], t8 = $[20]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t7, t8);\n  let t10, t9;\n  $[21] !== props.editorActor || $[22] !== syncActorRef ? (t9 = () => {\n    const subscription_0 = syncActorRef.on(\"*\", (event_0) => {\n      bb15: switch (event_0.type) {\n        case \"invalid value\": {\n          props.editorActor.send({\n            ...event_0,\n            type: \"notify.invalid value\"\n          });\n          break bb15;\n        }\n        case \"value changed\": {\n          props.editorActor.send({\n            ...event_0,\n            type: \"notify.value changed\"\n          });\n          break bb15;\n        }\n        default:\n          props.editorActor.send(event_0);\n      }\n    });\n    return () => {\n      subscription_0.unsubscribe();\n    };\n  }, t10 = [props.editorActor, syncActorRef], $[21] = props.editorActor, $[22] = syncActorRef, $[23] = t10, $[24] = t9) : (t10 = $[23], t9 = $[24]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t9, t10);\n  let t11, t12;\n  $[25] !== readOnly || $[26] !== syncActorRef ? (t11 = () => {\n    syncActorRef.send({\n      type: \"update readOnly\",\n      readOnly\n    });\n  }, t12 = [syncActorRef, readOnly], $[25] = readOnly, $[26] = syncActorRef, $[27] = t11, $[28] = t12) : (t11 = $[27], t12 = $[28]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t11, t12);\n  let t13, t14;\n  $[29] !== syncActorRef || $[30] !== value ? (t13 = () => {\n    debug$c(\"Value from props changed, syncing new value\"), syncActorRef.send({\n      type: \"update value\",\n      value\n    });\n  }, t14 = [syncActorRef, value], $[29] = syncActorRef, $[30] = value, $[31] = t13, $[32] = t14) : (t13 = $[31], t14 = $[32]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t13, t14);\n  let t15;\n  $[33] !== editorActor || $[34] !== mutationActorRef ? (t15 = () => {\n    debug$c(\"Subscribing to patch events\");\n    const sub = editorActor.on(\"patch\", (event_1) => {\n      mutationActorRef.send(event_1);\n    });\n    return () => {\n      debug$c(\"Unsubscribing to patch events\"), sub.unsubscribe();\n    };\n  }, $[33] = editorActor, $[34] = mutationActorRef, $[35] = t15) : t15 = $[35];\n  let t16;\n  return $[36] !== editorActor || $[37] !== mutationActorRef || $[38] !== slateEditor ? (t16 = [editorActor, mutationActorRef, slateEditor], $[36] = editorActor, $[37] = mutationActorRef, $[38] = slateEditor, $[39] = t16) : t16 = $[39], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t15, t16), null;\n}\nfunction _temp2(s_0) {\n  return s_0.matches({\n    \"edit mode\": \"read only\"\n  });\n}\nfunction _temp(s) {\n  return s.context.value;\n}\nSynchronizer.displayName = \"Synchronizer\";\nconst converterJson = {\n  mimeType: \"application/json\",\n  serialize: ({\n    context,\n    event\n  }) => {\n    const portableTextConverter = context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.serialize({\n        context,\n        event\n      }),\n      mimeType: \"application/json\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.failure\",\n      mimeType: \"application/json\",\n      originEvent: event.originEvent,\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  },\n  deserialize: ({\n    context,\n    event\n  }) => {\n    const portableTextConverter = context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.deserialize({\n        context,\n        event\n      }),\n      mimeType: \"application/json\"\n    } : {\n      type: \"deserialization.failure\",\n      mimeType: \"application/json\",\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  }\n};\nfunction isTypedObject(object) {\n  return isRecord(object) && typeof object._type == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction parseBlock({\n  context,\n  block,\n  options\n}) {\n  if (!isTypedObject(block) || block._type !== context.schema.block.name && !context.schema.blockObjects.some((blockObject) => blockObject.name === block._type))\n    return;\n  if (block._type !== context.schema.block.name) {\n    const _key = options.refreshKeys ? context.keyGenerator() : typeof block._key == \"string\" ? block._key : context.keyGenerator();\n    return {\n      ...block,\n      _key\n    };\n  }\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextTextBlock)(block))\n    return {\n      _type: context.schema.block.name,\n      _key: options.refreshKeys ? context.keyGenerator() : typeof block._key == \"string\" ? block._key : context.keyGenerator(),\n      children: [{\n        _key: context.keyGenerator(),\n        _type: context.schema.span.name,\n        text: \"\",\n        marks: []\n      }],\n      markDefs: [],\n      style: context.schema.styles[0].value\n    };\n  const markDefKeyMap = /* @__PURE__ */ new Map(), markDefs = (block.markDefs ?? []).flatMap((markDef) => {\n    if (context.schema.annotations.some((annotation) => annotation.name === markDef._type)) {\n      const _key = options.refreshKeys ? context.keyGenerator() : markDef._key;\n      return markDefKeyMap.set(markDef._key, _key), [{\n        ...markDef,\n        _key\n      }];\n    }\n    return [];\n  }), children = block.children.flatMap((child) => {\n    if (!isTypedObject(child))\n      return [];\n    if (child._type !== context.schema.span.name && !context.schema.inlineObjects.some((inlineObject) => inlineObject.name === child._type))\n      return [];\n    if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextSpan)(child))\n      return [{\n        ...child,\n        _key: options.refreshKeys ? context.keyGenerator() : child._key\n      }];\n    const marks = (child.marks ?? []).flatMap((mark) => markDefKeyMap.has(mark) ? [markDefKeyMap.get(mark)] : context.schema.decorators.some((decorator) => decorator.value === mark) ? [mark] : []);\n    return [{\n      ...child,\n      _key: options.refreshKeys ? context.keyGenerator() : child._key,\n      marks\n    }];\n  }), parsedBlock = {\n    ...block,\n    _key: options.refreshKeys ? context.keyGenerator() : block._key,\n    children: children.length > 0 ? children : [{\n      _key: context.keyGenerator(),\n      _type: context.schema.span.name,\n      text: \"\",\n      marks: []\n    }],\n    markDefs\n  };\n  if (!context.schema.styles.find((style) => style.value === block.style)) {\n    const defaultStyle = context.schema.styles[0].value;\n    defaultStyle !== void 0 ? parsedBlock.style = defaultStyle : delete parsedBlock.style;\n  }\n  return context.schema.lists.find((list) => list.value === block.listItem) || (delete parsedBlock.listItem, delete parsedBlock.level), parsedBlock;\n}\nconst converterPortableText = {\n  mimeType: \"application/x-portable-text\",\n  serialize: ({\n    context,\n    event\n  }) => {\n    if (!context.selection)\n      return {\n        type: \"serialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        originEvent: event.originEvent,\n        reason: \"No selection\"\n      };\n    const blocks = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_20__.sliceBlocks)({\n      blocks: context.value,\n      selection: context.selection\n    });\n    return {\n      type: \"serialization.success\",\n      data: JSON.stringify(blocks),\n      mimeType: \"application/x-portable-text\",\n      originEvent: event.originEvent\n    };\n  },\n  deserialize: ({\n    context,\n    event\n  }) => {\n    const blocks = JSON.parse(event.data);\n    if (!Array.isArray(blocks))\n      return {\n        type: \"deserialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        reason: \"Data is not an array\"\n      };\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context,\n        block,\n        options: {\n          refreshKeys: !0\n        }\n      });\n      return parsedBlock ? [parsedBlock] : [];\n    });\n    return parsedBlocks.length === 0 && blocks.length > 0 ? {\n      type: \"deserialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks were parsed\"\n    } : {\n      type: \"deserialization.success\",\n      data: parsedBlocks,\n      mimeType: \"application/x-portable-text\"\n    };\n  }\n}, converterTextHtml = {\n  mimeType: \"text/html\",\n  serialize: ({\n    context,\n    event\n  }) => {\n    if (!context.selection)\n      return {\n        type: \"serialization.failure\",\n        mimeType: \"text/html\",\n        originEvent: event.originEvent,\n        reason: \"No selection\"\n      };\n    const blocks = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_20__.sliceBlocks)({\n      blocks: context.value,\n      selection: context.selection\n    }), html = (0,_portabletext_to_html__WEBPACK_IMPORTED_MODULE_21__.toHTML)(blocks, {\n      onMissingComponent: !1,\n      components: {\n        unknownType: ({\n          children\n        }) => children !== void 0 ? `${children}` : \"\"\n      }\n    });\n    return html === \"\" ? {\n      type: \"serialization.failure\",\n      mimeType: \"text/html\",\n      originEvent: event.originEvent,\n      reason: \"Serialized HTML is empty\"\n    } : {\n      type: \"serialization.success\",\n      data: html,\n      mimeType: \"text/html\",\n      originEvent: event.originEvent\n    };\n  },\n  deserialize: ({\n    context,\n    event\n  }) => ({\n    type: \"deserialization.success\",\n    data: (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_22__.htmlToBlocks)(event.data, context.schema.portableText, {\n      keyGenerator: context.keyGenerator,\n      unstable_whitespaceOnPasteMode: context.schema.block.options.unstable_whitespaceOnPasteMode\n    }),\n    mimeType: \"text/html\"\n  })\n}, converterTextPlain = {\n  mimeType: \"text/plain\",\n  serialize: ({\n    context,\n    event\n  }) => context.selection ? {\n    type: \"serialization.success\",\n    data: (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_20__.sliceBlocks)({\n      blocks: context.value,\n      selection: context.selection\n    }).map((block) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextTextBlock)(block) ? block.children.map((child) => child._type === context.schema.span.name ? child.text : `[${context.schema.inlineObjects.find((inlineObjectType) => inlineObjectType.name === child._type)?.title ?? \"Object\"}]`).join(\"\") : `[${context.schema.blockObjects.find((blockObjectType) => blockObjectType.name === block._type)?.title ?? \"Object\"}]`).join(`\n\n`),\n    mimeType: \"text/plain\",\n    originEvent: event.originEvent\n  } : {\n    type: \"serialization.failure\",\n    mimeType: \"text/plain\",\n    originEvent: event.originEvent,\n    reason: \"No selection\"\n  },\n  deserialize: ({\n    context,\n    event\n  }) => {\n    const textToHtml = `<html><body>${escapeHtml(event.data).split(/\\n{2,}/).map((line) => line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`;\n    return {\n      type: \"deserialization.success\",\n      data: (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_22__.htmlToBlocks)(textToHtml, context.schema.portableText, {\n        keyGenerator: context.keyGenerator\n      }),\n      mimeType: \"text/plain\"\n    };\n  }\n}, entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s) => entityMap[s]);\n}\nconst coreConverters = [converterJson, converterPortableText, converterTextHtml, converterTextPlain], debug$b = debugWithName(\"operationToPatches\");\nfunction createOperationToPatches(types) {\n  const textBlockName = types.block.name;\n  function insertTextPatch(editor, operation, beforeValue) {\n    debug$b.enabled && debug$b(\"Operation\", JSON.stringify(operation, null, 2));\n    const block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const textChild = editor.isTextBlock(block) && editor.isTextSpan(block.children[operation.path[1]]) && block.children[operation.path[1]];\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], prevBlock = beforeValue[operation.path[0]], prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.diffMatchPatch)(prevText, textChild.text, path);\n    return patch.value.length ? [patch] : [];\n  }\n  function removeTextPatch(editor, operation, beforeValue) {\n    const block = editor && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const child = editor.isTextBlock(block) && block.children[operation.path[1]] || void 0, textChild = editor.isTextSpan(child) ? child : void 0;\n    if (child && !textChild)\n      throw new Error(\"Expected span\");\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], beforeBlock = beforeValue[operation.path[0]], prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n    return patch.value ? [patch] : [];\n  }\n  function setNodePatch(editor, operation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]];\n      if (typeof block._key != \"string\")\n        throw new Error(\"Expected block to have a _key\");\n      const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_10__({\n        ...editor.children[operation.path[0]],\n        ...operation.newProperties\n      }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_9__);\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)(fromSlateValue([setNode], textBlockName)[0], [{\n        _key: block._key\n      }])];\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]];\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]];\n        if (child) {\n          const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n          return keys.forEach((keyName) => {\n            if (keys.length === 1 && keyName === \"_key\") {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_8__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)(val, [{\n                _key: blockKey\n              }, \"children\", block.children.indexOf(child), keyName]));\n            } else {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_8__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)(val, [{\n                _key: blockKey\n              }, \"children\", {\n                _key: childKey\n              }, keyName]));\n            }\n          }), patches;\n        }\n        throw new Error(\"Could not find a valid child\");\n      }\n      throw new Error(\"Could not find a valid block\");\n    } else\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n  }\n  function insertNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]], isTextBlock = editor.isTextBlock(block);\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n      return targetKey ? [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)([fromSlateValue([operation.node], textBlockName)[0]], position, [{\n        _key: targetKey\n      }])] : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.setIfMissing)(beforeValue, []), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)([fromSlateValue([operation.node], textBlockName)[0]], \"before\", [operation.path[0]])];\n    } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {\n      const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n        ...operation.node\n      };\n      !node._type && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n      const child = fromSlateValue([{\n        _key: \"bogus\",\n        _type: textBlockName,\n        children: [node]\n      }], textBlockName)[0].children[0];\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)([child], position, [{\n        _key: block._key\n      }, \"children\", block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n        _key: block.children[operation.path[1] - 1]._key\n      }])];\n    }\n    return debug$b(\"Something was inserted into a void block. Not producing editor patches.\"), [];\n  }\n  function splitNodePatch(editor, operation, beforeValue) {\n    const patches = [], splitBlock = editor.children[operation.path[0]];\n    if (!editor.isTextBlock(splitBlock))\n      throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]];\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue([editor.children[operation.path[0] + 1]], textBlockName)[0];\n        targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)([targetValue], \"after\", [{\n          _key: splitBlock._key\n        }])), oldBlock.children.slice(operation.position).forEach((span) => {\n          const path = [{\n            _key: oldBlock._key\n          }, \"children\", {\n            _key: span._key\n          }];\n          patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)(path));\n        }));\n      }\n      return patches;\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]];\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = fromSlateValue([{\n          ...splitBlock,\n          children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n        }], textBlockName)[0].children;\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)(targetSpans, \"after\", [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)(splitSpan.text, [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }, \"text\"]));\n      }\n      return patches;\n    }\n    return patches;\n  }\n  function removeNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]];\n    if (operation.path.length === 1) {\n      if (block && block._key)\n        return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n          _key: block._key\n        }])];\n      throw new Error(\"Block not found\");\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]];\n      return spanToRemove ? block.children.filter((span) => span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: spanToRemove._key\n      }])] : (debug$b(\"Span not found in editor trying to remove node\"), []);\n    } else\n      return debug$b(\"Not creating patch inside object block\"), [];\n  }\n  function mergeNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], updatedBlock = editor.children[operation.path[0]];\n    if (operation.path.length === 1)\n      if (block?._key) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0];\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)(newBlock, [{\n          _key: newBlock._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n          _key: block._key\n        }]));\n      } else\n        throw new Error(\"Target key not found!\");\n    else if (editor.isTextBlock(block) && editor.isTextBlock(updatedBlock) && operation.path.length === 2) {\n      const updatedSpan = updatedBlock.children[operation.path[1] - 1] && editor.isTextSpan(updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && editor.isTextSpan(block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n      updatedSpan && (block.children.filter((span) => span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.set)(updatedSpan.text, [{\n        _key: block._key\n      }, \"children\", {\n        _key: updatedSpan._key\n      }, \"text\"])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span) => span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: removedSpan._key\n      }])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n    } else\n      debug$b(\"Void nodes can't be merged, not creating any patches\");\n    return patches;\n  }\n  function moveNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n    if (!targetBlock)\n      return patches;\n    if (operation.path.length === 1) {\n      const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n        _key: block._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)([fromSlateValue([block], textBlockName)[0]], position, [{\n        _key: targetBlock._key\n      }]));\n    } else if (operation.path.length === 2 && editor.isTextBlock(block) && editor.isTextBlock(targetBlock)) {\n      const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([block], textBlockName)[0].children[operation.path[1]];\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: child._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)([childToInsert], position, [{\n        _key: targetBlock._key\n      }, \"children\", {\n        _key: targetChild._key\n      }]));\n    }\n    return patches;\n  }\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch\n  };\n}\nconst IS_APPLYING_BEHAVIOR_ACTIONS = /* @__PURE__ */ new WeakMap();\nfunction withApplyingBehaviorActions(editor, fn) {\n  const prev = isApplyingBehaviorActions(editor);\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, !0), fn(), IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, prev);\n}\nfunction isApplyingBehaviorActions(editor) {\n  return IS_APPLYING_BEHAVIOR_ACTIONS.get(editor) ?? !1;\n}\nfunction createWithEventListeners(editorActor, subscriptions) {\n  return function(editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== void 0)\n      return editor;\n    subscriptions.push(() => {\n      const subscription = editorActor.on(\"*\", (event) => {\n        switch (event.type) {\n          // These events are not relevant for Behaviors\n          case \"blurred\":\n          case \"done loading\":\n          case \"editable\":\n          case \"error\":\n          case \"focused\":\n          case \"invalid value\":\n          case \"loading\":\n          case \"mutation\":\n          case \"patch\":\n          case \"patches\":\n          case \"read only\":\n          case \"ready\":\n          case \"selection\":\n          case \"value changed\":\n          case \"unset\":\n            break;\n          case \"custom.*\":\n            editorActor.send({\n              type: \"custom behavior event\",\n              behaviorEvent: event.event,\n              editor\n            });\n            break;\n          default:\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: event,\n              editor\n            });\n            break;\n        }\n      });\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n    const {\n      deleteBackward: deleteBackward2,\n      deleteForward: deleteForward2,\n      insertBreak,\n      insertData,\n      insertSoftBreak,\n      insertText: insertText2,\n      select,\n      setFragmentData\n    } = editor;\n    return editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward2(unit);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.backward\",\n          unit\n        },\n        editor\n      });\n    }, editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward2(unit);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.forward\",\n          unit\n        },\n        editor\n      });\n    }, editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak();\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.break\"\n        },\n        editor\n      });\n    }, editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertData(dataTransfer);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"deserialize\",\n          dataTransfer\n        },\n        editor\n      });\n    }, editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertSoftBreak();\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.soft break\"\n        },\n        editor\n      });\n    }, editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText2(text, options);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.text\",\n          text,\n          options\n        },\n        editor,\n        defaultActionCallback: () => {\n          insertText2(text, options);\n        }\n      });\n    }, editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location);\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.range(editor, location);\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"select\",\n          selection: toPortableTextRange(fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), range, editorActor.getSnapshot().context.schema)\n        },\n        editor,\n        defaultActionCallback: () => {\n          select(location);\n        }\n      });\n    }, editor.setFragmentData = (dataTransfer, originEvent) => {\n      if (originEvent === \"drag\") {\n        setFragmentData(dataTransfer);\n        return;\n      }\n      if (isApplyingBehaviorActions(editor)) {\n        setFragmentData(dataTransfer);\n        return;\n      }\n      dataTransfer.clearData(), editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"serialize\",\n          dataTransfer,\n          originEvent: originEvent ?? \"unknown\"\n        },\n        editor\n      });\n    }, editor;\n  };\n}\nfunction createWithMaxBlocks(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(operation);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n      rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n    }, editor;\n  };\n}\nfunction createWithObjectKeys(editorActor, schemaTypes) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor;\n    return editor.apply = (operation) => {\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (operation.type === \"split_node\") {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: operation.properties._key === void 0 || existingKeys.includes(operation.properties._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.properties._key\n          }\n        });\n        return;\n      }\n      if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(operation.node)) {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          node: {\n            ...operation.node,\n            _key: operation.node._key === void 0 || existingKeys.includes(operation.node._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.node._key\n          }\n        });\n        return;\n      }\n      apply2(operation);\n    }, editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node) && node._type === schemaTypes.block.name) {\n        if (!node._key) {\n          editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path))\n          if (!child._key) {\n            editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              _key: editorActor.getSnapshot().context.keyGenerator()\n            }, {\n              at: childPath\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$a = debugWithName(\"applyPatches\"), debugVerbose = debug$a.enabled && !0;\nfunction createApplyPatch(schemaTypes) {\n  return (editor, patch) => {\n    let changed = !1;\n    debugVerbose && (debug$a(`\n\nNEW PATCH =============================================================`), debug$a(JSON.stringify(patch, null, 2)));\n    try {\n      switch (patch.type) {\n        case \"insert\":\n          changed = insertPatch(editor, patch, schemaTypes);\n          break;\n        case \"unset\":\n          changed = unsetPatch(editor, patch);\n          break;\n        case \"set\":\n          changed = setPatch(editor, patch);\n          break;\n        case \"diffMatchPatch\":\n          changed = diffMatchPatch(editor, patch);\n          break;\n        default:\n          debug$a(\"Unhandled patch\", patch.type);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return changed;\n  };\n}\nfunction diffMatchPatch(editor, patch) {\n  const {\n    block,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$a(\"Block not found\"), !1;\n  if (!child || !childPath)\n    return debug$a(\"Child not found\"), !1;\n  if (!(block && editor.isTextBlock(block) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child))\n    return !1;\n  const patches = parse(patch.value), [newValue] = apply(patches, child.text, {\n    allowExceedingIndices: !0\n  }), diff$1 = cleanupEfficiency(diff(child.text, newValue), 5);\n  debugState(editor, \"before\");\n  let offset = 0;\n  for (const [op, text] of diff$1)\n    op === DIFF_INSERT ? (editor.apply({\n      type: \"insert_text\",\n      path: childPath,\n      offset,\n      text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset,\n      text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n  return debugState(editor, \"after\"), !0;\n}\nfunction insertPatch(editor, patch, schemaTypes) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!targetBlock || !targetBlockPath)\n    return debug$a(\"Block not found\"), !1;\n  if (patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$a(\"Ignoring patch targeting void value\"), !1;\n  if (patch.path.length === 1) {\n    const {\n      items: items2,\n      position: position2\n    } = patch, blocksToInsert = toSlateValue(items2, {\n      schemaTypes\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = targetBlockPath[0], normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex;\n    return debug$a(`Inserting blocks at path [${normalizedIdx2}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, blocksToInsert, {\n      at: [normalizedIdx2]\n    }), debugState(editor, \"after\"), !0;\n  }\n  const {\n    items,\n    position\n  } = patch;\n  if (!targetChild || !targetChildPath)\n    return debug$a(\"Child not found\"), !1;\n  const childrenToInsert = targetBlock && toSlateValue([{\n    ...targetBlock,\n    children: items\n  }], {\n    schemaTypes\n  }, KEY_TO_SLATE_ELEMENT.get(editor)), targetChildIndex = targetChildPath[1], normalizedIdx = position === \"after\" ? targetChildIndex + 1 : targetChildIndex, childInsertPath = [targetChildPath[0], normalizedIdx];\n  return debug$a(`Inserting children at path ${childInsertPath}`), debugState(editor, \"before\"), childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n    at: childInsertPath\n  }), debugState(editor, \"after\"), !0;\n}\nfunction setPatch(editor, patch) {\n  let value = patch.value;\n  typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$a(\"Block not found\"), !1;\n  const isTextBlock = editor.isTextBlock(block);\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$a(\"Ignoring setting void value\"), !1;\n  if (debugState(editor, \"before\"), isTextBlock && child && childPath) {\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(value) && slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child)) {\n      const newText = child.text;\n      value.text !== newText && (debug$a(\"Setting text property\"), editor.apply({\n        type: \"remove_text\",\n        path: childPath,\n        offset: 0,\n        text: newText\n      }), editor.apply({\n        type: \"insert_text\",\n        path: childPath,\n        offset: 0,\n        text: value.text\n      }), editor.onChange());\n    } else\n      debug$a(\"Setting non-text property\"), editor.apply({\n        type: \"set_node\",\n        path: childPath,\n        properties: {},\n        newProperties: value\n      });\n    return !0;\n  } else if (slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug$a(\"Setting block property\");\n    const {\n      children,\n      ...nextRest\n    } = value, {\n      children: prevChildren,\n      ...prevRest\n    } = block || {\n      children: void 0\n    };\n    editor.apply({\n      type: \"set_node\",\n      path: blockPath,\n      properties: {\n        ...prevRest\n      },\n      newProperties: nextRest\n    }), debug$a(\"Setting children\"), block.children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"remove_node\",\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c2\n      });\n    }), Array.isArray(children) && children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"insert_node\",\n        path: blockPath.concat(cIndex),\n        node: c2\n      });\n    });\n  } else if (block && \"value\" in block) {\n    const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.applyAll)([block.value], [patch])[0];\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n      ...block,\n      value: newVal\n    }, {\n      at: blockPath\n    }), !0;\n  }\n  return debugState(editor, \"after\"), !0;\n}\nfunction unsetPatch(editor, patch) {\n  if (patch.path.length === 0) {\n    debug$a(\"Removing everything\"), debugState(editor, \"before\");\n    const previousSelection = editor.selection;\n    return slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.children.forEach((_child, i) => {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n        at: [i]\n      });\n    }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n      decorators: []\n    })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), editor.onChange(), debugState(editor, \"after\"), !0;\n  }\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (patch.path.length === 1) {\n    if (!block || !blockPath)\n      return debug$a(\"Block not found\"), !1;\n    const blockIndex = blockPath[0];\n    return debug$a(`Removing block at path [${blockIndex}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: [blockIndex]\n    }), debugState(editor, \"after\"), !0;\n  }\n  return editor.isTextBlock(block) && patch.path[1] === \"children\" && patch.path.length === 3 ? !child || !childPath ? (debug$a(\"Child not found\"), !1) : (debug$a(`Unsetting child at path ${JSON.stringify(childPath)}`), debugState(editor, \"before\"), debugVerbose && debug$a(`Removing child at path ${JSON.stringify(childPath)}`), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n    at: childPath\n  }), debugState(editor, \"after\"), !0) : !1;\n}\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction debugState(editor, stateName) {\n  debugVerbose && (debug$a(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2)), debug$a(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2)));\n}\nfunction findBlockFromPath(editor, path) {\n  let blockIndex = -1;\n  const block = editor.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0];\n    return isMatch && (blockIndex = index), isMatch;\n  });\n  return block ? {\n    block,\n    path: [blockIndex]\n  } : {};\n}\nfunction findBlockAndChildFromPath(editor, path) {\n  const {\n    block,\n    path: blockPath\n  } = findBlockFromPath(editor, path);\n  if (!(slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block) && path[1] === \"children\"))\n    return {\n      block,\n      blockPath,\n      child: void 0,\n      childPath: void 0\n    };\n  let childIndex = -1;\n  const child = block.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2];\n    return isMatch && (childIndex = index), isMatch;\n  });\n  return child ? {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex)\n  } : {\n    block,\n    blockPath,\n    child: void 0,\n    childPath: void 0\n  };\n}\nconst debug$9 = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions\n}) {\n  let previousChildren;\n  const applyPatch = createApplyPatch(schemaTypes);\n  return function(editor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];\n    const {\n      apply: apply2\n    } = editor;\n    let bufferedPatches = [];\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0)\n        return;\n      const patches = bufferedPatches;\n      bufferedPatches = [];\n      let changed = !1;\n      withRemoteChanges(editor, () => {\n        slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                debug$9.enabled && debug$9(`Handling remote patch ${JSON.stringify(patch)}`), changed = applyPatch(editor, patch);\n              });\n            });\n          });\n        }), changed && (editor.normalize(), editor.onChange());\n      });\n    }, handlePatches = ({\n      patches\n    }) => {\n      const remotePatches = patches.filter((p) => p.origin !== \"local\");\n      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n    };\n    return subscriptions.push(() => {\n      debug$9(\"Subscribing to remote patches\");\n      const sub = editorActor.on(\"patches\", handlePatches);\n      return () => {\n        debug$9(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n      };\n    }), editor.apply = (operation) => {\n      let patches = [];\n      previousChildren = editor.children;\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes);\n      apply2(operation);\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes);\n      if (!isPatching(editor))\n        return editor;\n      switch (editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.insert)(previousChildren, \"before\", [0])), operation.type) {\n        case \"insert_text\":\n          patches = [...patches, ...patchFunctions.insertTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_text\":\n          patches = [...patches, ...patchFunctions.removeTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_node\":\n          patches = [...patches, ...patchFunctions.removeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"split_node\":\n          patches = [...patches, ...patchFunctions.splitNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"insert_node\":\n          patches = [...patches, ...patchFunctions.insertNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"set_node\":\n          patches = [...patches, ...patchFunctions.setNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"merge_node\":\n          patches = [...patches, ...patchFunctions.mergeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"move_node\":\n          patches = [...patches, ...patchFunctions.moveNodePatch(editor, operation, previousChildren)];\n          break;\n      }\n      return !editorWasEmpty && editorIsEmpty && [\"merge_node\", \"set_node\", \"remove_text\", \"remove_node\"].includes(operation.type) && (patches = [...patches, (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.unset)([])], editorActor.send({\n        type: \"notify.unset\",\n        previousValue: fromSlateValue(previousChildren, schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      })), editorWasEmpty && patches.length > 0 && (patches = [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_17__.setIfMissing)([], []), ...patches]), patches.length > 0 && patches.forEach((patch) => {\n        editorActor.send({\n          type: \"patch\",\n          patch: {\n            ...patch,\n            origin: \"local\"\n          }\n        });\n      }), editor;\n    }, editor;\n  };\n}\nconst debug$8 = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"remove_node\") {\n        const node = op.node;\n        if (op.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isVoid(editor, node)) {\n          const nextPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(op.path);\n          editor.children[nextPath[0]] || (debug$8(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_14__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n            decorators: []\n          })));\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst debug$7 = debugWithName(\"plugin:withPortableTextBlockStyle\");\nfunction createWithPortableTextBlockStyle(editorActor, types) {\n  const defaultStyle = types.styles[0].value;\n  return function(editor) {\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry;\n      for (const op of editor.operations)\n        if (op.type === \"split_node\" && op.path.length === 1 && editor.isTextBlock(op.properties) && op.properties.style !== defaultStyle && op.path[0] === path[0] && !slate__WEBPACK_IMPORTED_MODULE_14__.Path.equals(path, op.path)) {\n          const [child] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, [op.path[0] + 1, 0]);\n          if (slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child) && child.text === \"\") {\n            debug$7(`Normalizing split node to ${defaultStyle} style`, op), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              style: defaultStyle\n            }, {\n              at: [op.path[0] + 1],\n              voids: !1\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      normalizeNode(nodeEntry);\n    }, editor;\n  };\n}\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def) => typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let previousSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath, {\n    reverse: !0\n  }))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isBefore(childPath, spanPath)) {\n      previousSpan = child;\n      break;\n    }\n  return previousSpan;\n}\nfunction getNextSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let nextSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isAfter(childPath, spanPath)) {\n      nextSpan = child;\n      break;\n    }\n  return nextSpan;\n}\nconst debug$6 = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor, types) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor, decorators = types.decorators.map((t) => t.value);\n    return editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry;\n      if (editor.isTextBlock(node)) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path);\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1];\n          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark) => nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark) => child.marks?.includes(mark))) {\n            debug$6(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: !0\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug$6(\"Adding .markDefs to block node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          markDefs: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug$6(\"Adding .marks to span node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, blockPath), decorators2 = types.decorators.map((decorator) => decorator.value), annotations = node.marks?.filter((mark) => !decorators2.includes(mark));\n        if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n          debug$6(\"Removing annotations from empty span node\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            marks: node.marks?.filter((mark) => decorators2.includes(mark))\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const decorators2 = types.decorators.map((decorator) => decorator.value);\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, path))\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));\n            if (orphanedAnnotations.length > 0) {\n              debug$6(\"Removing orphaned annotations from span node\"), editorActor.send({\n                type: \"normalizing\"\n              }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n                marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n              }, {\n                at: childPath\n              }), editorActor.send({\n                type: \"done normalizing\"\n              });\n              return;\n            }\n          }\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, blockPath);\n        if (editor.isTextBlock(block)) {\n          const decorators2 = types.decorators.map((decorator) => decorator.value), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));\n          if (orphanedAnnotations.length > 0) {\n            debug$6(\"Removing orphaned annotations from span node\"), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n              marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n            }, {\n              at: path\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n        for (const markDef of markDefs)\n          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n        if (markDefs.length !== newMarkDefs.length) {\n          debug$6(\"Removing duplicate markDefs\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node) && !editor.operations.some((op) => op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n        if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(newMarkDefs, node.markDefs)) {\n          debug$6(\"Removing markDef not in use\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      normalizeNode(nodeEntry);\n    }, editor.apply = (op) => {\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"set_selection\" && slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(editor) && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n        const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed({\n          anchor: op.properties.anchor,\n          focus: op.properties.focus\n        }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed({\n          anchor: op.newProperties.anchor,\n          focus: op.newProperties.focus\n        });\n        if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n          const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.properties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.newProperties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n          if (movedToNextSpan || movedToPreviousSpan)\n            return;\n        }\n      }\n      if (op.type === \"insert_node\") {\n        const {\n          selection\n        } = editor;\n        if (selection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n            depth: 1\n          }), previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path\n          }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1]\n          }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation) => !nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;\n          if (atTheEndOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsEnding.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: op.node.marks?.filter((mark) => !annotationsEnding.includes(mark)) ?? []\n            });\n            return;\n          }\n          const annotationsStarting = nextSpanAnnotations?.filter((annotation) => !previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;\n          if (atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsStarting.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: op.node.marks?.filter((mark) => !annotationsStarting.includes(mark)) ?? []\n            });\n            return;\n          }\n          const nextSpanDecorators = nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? [];\n          if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.length === 0) {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"insert_text\") {\n        const {\n          selection\n        } = editor, collapsedSelection = selection ? slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(selection) : !1;\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: selection.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0], marks = span.marks ?? [], marksWithoutAnnotations = marks.filter((mark) => decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = span.text.length === 0, atTheBeginningOfSpan = selection.anchor.offset === 0, atTheEndOfSpan = selection.anchor.offset === span.text.length, previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpanAnnotations = nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark) => !decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)).every((mark) => marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) => nextSpanAnnotations?.includes(mark));\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotation) {\n                apply2(op);\n                return;\n              } else if (!previousSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n            if (atTheEndOfSpan) {\n              if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? []\n                });\n                return;\n              }\n              if (!nextSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n          }\n          if (atTheBeginningOfSpan && !spanIsEmpty && previousSpan) {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n              _type: \"span\",\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations ? [] : (previousSpan.marks ?? []).filter((mark) => decorators.includes(mark))\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"remove_text\") {\n        const {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection)) {\n          const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: {\n              path: op.path,\n              offset: op.offset\n            },\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0];\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark) => markDefs.find((markDef) => markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), nextSpan = getNextSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1;\n            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n              const marksWithoutAnnotationMarks = ({\n                ...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(editor) || {}\n              }.marks || []).filter((mark) => decorators.includes(mark));\n              slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n                apply2(op), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n                  marks: marksWithoutAnnotationMarks\n                }, {\n                  at: op.path\n                });\n              }), editor.onChange();\n              return;\n            }\n          }\n        }\n      }\n      if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === types.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n        const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, [op.path[0] - 1]);\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...oldDefs, ...op.properties.markDefs]);\n          debug$6(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: targetPath,\n            voids: !1\n          }), apply2(op);\n          return;\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst addDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator;\n  if (editor.selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n        split: !0,\n        hanging: !0\n      });\n      const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(editor.selection) ? [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText\n      })] : [];\n      splitTextNodes.length > 1 && splitTextNodes.every((node) => node[0].marks?.includes(mark)) ? editor.removeMark(mark) : splitTextNodes.forEach(([node, path]) => {\n        const marks = [...(Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark), mark];\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks\n        }, {\n          at: path,\n          match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n          split: !0,\n          hanging: !0\n        });\n      });\n    } else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(editor) || {},\n          marks: [...existingMarks, mark]\n        };\n        editor.marks = marks;\n      }\n    }\n    if (editor.selection) {\n      const selection = editor.selection;\n      editor.selection = {\n        ...selection\n      };\n    }\n  }\n}, removeDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator, {\n    selection\n  } = editor;\n  if (selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection))\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n        split: !0,\n        hanging: !0\n      }), editor.selection && [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText\n      })].forEach(([node, path]) => {\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),\n          _type: \"span\"\n        }, {\n          at: path\n        });\n      });\n    else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(editor) || {},\n          marks: existingMarks.filter((eMark) => eMark !== mark)\n        };\n        editor.marks = {\n          marks: marks.marks,\n          _type: \"span\"\n        };\n      }\n    }\n    if (editor.selection) {\n      const selection2 = editor.selection;\n      editor.selection = {\n        ...selection2\n      };\n    }\n  }\n};\nfunction isDecoratorActive({\n  editor,\n  decorator\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedTextNodes = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n    at: editor.selection\n  }));\n  return selectedTextNodes.length === 0 ? !1 : slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(editor.selection) ? selectedTextNodes.every((n) => {\n    const [node] = n;\n    return node.marks?.includes(decorator);\n  }) : ({\n    ...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(editor) || {}\n  }.marks || []).includes(decorator);\n}\nconst toggleDecoratorActionImplementation = ({\n  context,\n  action\n}) => {\n  isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator\n  }) ? removeDecoratorActionImplementation({\n    context,\n    action: {\n      type: \"decorator.remove\",\n      editor: action.editor,\n      decorator: action.decorator\n    }\n  }) : addDecoratorActionImplementation({\n    context,\n    action: {\n      type: \"decorator.add\",\n      editor: action.editor,\n      decorator: action.decorator\n    }\n  });\n};\ndebugWithName(\"plugin:withPortableTextSelections\");\nfunction createWithPortableTextSelections(editorActor, types) {\n  let prevSelection = null;\n  return function(editor) {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange = null;\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n          if (existing)\n            ptRange = existing;\n          else {\n            const value = editor.children;\n            ptRange = toPortableTextRange(value, editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n          }\n        }\n        ptRange ? editorActor.send({\n          type: \"notify.selection\",\n          selection: ptRange\n        }) : editorActor.send({\n          type: \"notify.selection\",\n          selection: null\n        });\n      }\n      prevSelection = editor.selection;\n    }, {\n      onChange\n    } = editor;\n    return editor.onChange = () => {\n      onChange(), editorActor.getSnapshot().matches({\n        setup: \"setting up\"\n      }) || emitPortableTextSelection();\n    }, editor;\n  };\n}\nconst debug$5 = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({\n  editorActor,\n  schemaTypes\n}) {\n  return function(editor) {\n    editor.isTextBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextTextBlock)(value) && value._type === schemaTypes.block.name, editor.isTextSpan = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextSpan)(value) && value._type === schemaTypes.span.name, editor.isListBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextListBlock)(value) && value._type === schemaTypes.block.name, editor.isVoid = (element) => schemaTypes.block.name !== element._type && (schemaTypes.blockObjects.map((obj) => obj.name).includes(element._type) || schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (node._type === void 0 && path.length === 2) {\n        debug$5(\"Setting span type on text node without a type\");\n        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          ...span,\n          _type: schemaTypes.span.name,\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n        debug$5(\"Setting missing key on child node without a key\");\n        const key = editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$4 = debugWithName(\"plugin:withUtils\");\nfunction createWithUtils({\n  editorActor,\n  schemaTypes\n}) {\n  return function(editor) {\n    return editor.pteExpandToWord = () => {\n      const {\n        selection\n      } = editor;\n      if (selection && !slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(selection)) {\n        const [textNode] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, selection.focus, {\n          depth: 2\n        });\n        if (!textNode || !slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(textNode) || textNode.text.length === 0) {\n          debug$4(\"pteExpandToWord: Can't expand to word here\");\n          return;\n        }\n        const {\n          focus\n        } = selection, focusOffset = focus.offset, charsBefore = textNode.text.slice(0, focusOffset), charsAfter = textNode.text.slice(focusOffset, -1), isEmpty = (str) => str.match(/\\s/g), whiteSpaceBeforeIndex = charsBefore.split(\"\").reverse().findIndex((str) => isEmpty(str)), newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0, whiteSpaceAfterIndex = charsAfter.split(\"\").findIndex((obj) => isEmpty(obj)), newEndOffset = charsBefore.length + (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);\n        if (!(newStartOffset === newEndOffset || Number.isNaN(newStartOffset) || Number.isNaN(newEndOffset))) {\n          debug$4(\"pteExpandToWord: Expanding to focused word\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setSelection(editor, {\n            anchor: {\n              ...selection.anchor,\n              offset: newStartOffset\n            },\n            focus: {\n              ...selection.focus,\n              offset: newEndOffset\n            }\n          });\n          return;\n        }\n        debug$4(\"pteExpandToWord: Can't expand to word here\");\n      }\n    }, editor.pteCreateTextBlock = (options) => toSlateValue([{\n      _type: schemaTypes.block.name,\n      _key: editorActor.getSnapshot().context.keyGenerator(),\n      style: schemaTypes.styles[0].value || \"normal\",\n      ...options.listItem ? {\n        listItem: options.listItem\n      } : {},\n      ...options.level ? {\n        level: options.level\n      } : {},\n      markDefs: [],\n      children: [{\n        _type: \"span\",\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        text: \"\",\n        marks: options.decorators.filter((decorator) => schemaTypes.decorators.find(({\n          value\n        }) => value === decorator))\n      }]\n    }], {\n      schemaTypes\n    })[0], editor;\n  };\n}\nconst withPlugins = (editor, options) => {\n  const e = editor, {\n    editorActor\n  } = options, schemaTypes = editorActor.getSnapshot().context.schema, operationToPatches = createOperationToPatches(schemaTypes), withObjectKeys = createWithObjectKeys(editorActor, schemaTypes), withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes\n  }), withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions\n  }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions\n  }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor, schemaTypes), withPortableTextBlockStyle = createWithPortableTextBlockStyle(editorActor, schemaTypes), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n    editorActor,\n    schemaTypes\n  }), withPortableTextSelections = createWithPortableTextSelections(editorActor, schemaTypes);\n  return createWithEventListeners(editorActor, options.subscriptions)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPortableTextBlockStyle(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(withPortableTextSelections(e)))))))))));\n}, debug$3 = debugWithName(\"component:PortableTextEditor:SlateContainer\"), slateEditors = /* @__PURE__ */ new WeakMap();\nfunction createSlateEditor(config) {\n  const existingSlateEditor = slateEditors.get(config.editorActor);\n  if (existingSlateEditor)\n    return debug$3(\"Reusing existing Slate editor instance\", config.editorActor.id), existingSlateEditor;\n  debug$3(\"Creating new Slate editor instance\", config.editorActor.id);\n  const unsubscriptions = [], subscriptions = [], instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_23__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_14__.createEditor)()), {\n    editorActor: config.editorActor,\n    subscriptions\n  });\n  KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {});\n  for (const subscription of subscriptions)\n    unsubscriptions.push(subscription());\n  const initialValue = [instance.pteCreateTextBlock({\n    decorators: []\n  })], slateEditor = {\n    instance,\n    initialValue\n  };\n  return slateEditors.set(config.editorActor, slateEditor), slateEditor;\n}\nconst toggleListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem\n  }) ? removeListItemActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"list item.remove\"\n    }\n  }) : addListItemActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"list item.add\"\n    }\n  });\n}, removeListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_24__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isListBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.unsetNodes(action.editor, [\"listItem\", \"level\"], {\n      at\n    });\n}, addListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_24__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(action.editor, {\n      level: 1,\n      listItem: action.listItem\n    }, {\n      at\n    });\n};\nfunction isListItemActive({\n  editor,\n  listItem\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nconst toggleStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  isStyleActive({\n    editor: action.editor,\n    style: action.style\n  }) ? removeStyleActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"style.remove\"\n    }\n  }) : addStyleActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"style.add\"\n    }\n  });\n}, removeStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const defaultStyle = context.schema.styles[0].value, guards = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_24__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(action.editor, {\n      style: defaultStyle\n    }, {\n      at\n    });\n}, addStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_selector_is_at_the_start_of_block_js__WEBPACK_IMPORTED_MODULE_24__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(action.editor, {\n      style: action.style\n    }, {\n      at\n    });\n};\nfunction isStyleActive({\n  editor,\n  style\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => node.style === style) : !1;\n}\nconst debug$2 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n  const types = editorActor.getSnapshot().context.schema;\n  return {\n    focus: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"focus\"\n        },\n        editor\n      });\n    },\n    blur: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"blur\"\n        },\n        editor\n      });\n    },\n    toggleMark: (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.toggle\",\n          decorator: mark\n        },\n        editor\n      });\n    },\n    toggleList: (listItem) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"list item.toggle\",\n          listItem\n        },\n        editor\n      });\n    },\n    toggleBlockStyle: (style) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"style.toggle\",\n          style\n        },\n        editor\n      });\n    },\n    isMarkActive: (mark) => {\n      try {\n        return isDecoratorActive({\n          editor,\n          decorator: mark\n        });\n      } catch (err) {\n        return console.warn(err), !1;\n      }\n    },\n    marks: () => ({\n      ...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(editor) || {}\n    }).marks || [],\n    undo: () => editor.undo(),\n    redo: () => editor.redo(),\n    select: (selection) => {\n      const slateSelection = toSlateRange(selection, editor);\n      slateSelection ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(editor), editor.onChange();\n    },\n    focusBlock: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block)\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n      }\n    },\n    focusChild: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block && editor.isTextBlock(block))\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n      }\n    },\n    insertChild: (type, value) => {\n      if (type.name !== types.span.name)\n        return editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.inline object\",\n            inlineObject: {\n              name: type.name,\n              value\n            }\n          },\n          editor\n        }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? [];\n      if (!editor.selection)\n        throw new Error(\"The editor has no selection\");\n      const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => n._type === types.block.name\n      }))[0] || [void 0];\n      if (!focusBlock)\n        throw new Error(\"No focused text block\");\n      if (type.name !== types.span.name && !types.inlineObjects.some((t) => t.name === type.name))\n        throw new Error(\"This type cannot be inserted as a child to a text block\");\n      const child = toSlateValue([{\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        _type: types.block.name,\n        children: [{\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          _type: type.name,\n          ...value || {}\n        }]\n      }], {\n        schemaTypes: editorActor.getSnapshot().context.schema\n      })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_14__.Node.get(editor, focusChildPath);\n      return isSpanNode && focusNode._type !== types.span.name && (debug$2(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n        distance: 1,\n        unit: \"character\"\n      })), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, child, {\n        select: !0,\n        at: editor.selection\n      }), editor.onChange(), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path || [];\n    },\n    insertBlock: (type, value) => (editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"insert.block object\",\n        blockObject: {\n          name: type.name,\n          value\n        },\n        placement: \"auto\"\n      },\n      editor\n    }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? []),\n    hasBlockStyle: (style) => {\n      try {\n        return isStyleActive({\n          editor,\n          style\n        });\n      } catch {\n        return !1;\n      }\n    },\n    hasListStyle: (listItem) => {\n      try {\n        return isListItemActive({\n          editor,\n          listItem\n        });\n      } catch {\n        return !1;\n      }\n    },\n    isVoid: (element) => ![types.block.name, types.span.name].includes(element._type),\n    findByPath: (path) => {\n      const slatePath = toSlateRange({\n        focus: {\n          path,\n          offset: 0\n        },\n        anchor: {\n          path,\n          offset: 0\n        }\n      }, editor);\n      if (slatePath) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n        if (block && blockPath && typeof block._key == \"string\") {\n          if (path.length === 1 && slatePath.focus.path.length === 1)\n            return [fromSlateValue([block], types.block.name)[0], [{\n              _key: block._key\n            }]];\n          const ptBlock = fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]];\n            if (ptChild)\n              return [ptChild, [{\n                _key: block._key\n              }, \"children\", {\n                _key: ptChild._key\n              }]];\n          }\n        }\n      }\n      return [void 0, void 0];\n    },\n    findDOMNode: (element) => {\n      let node;\n      try {\n        const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n          at: [],\n          match: (n) => n._key === element._key\n        }) || [])[0] || [void 0];\n        node = slate_react__WEBPACK_IMPORTED_MODULE_23__.ReactEditor.toDOMNode(editor, item);\n      } catch {\n      }\n      return node;\n    },\n    activeAnnotations: () => {\n      if (!editor.selection || editor.selection.focus.path.length < 2)\n        return [];\n      try {\n        const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n        });\n        for (const [span, path] of spans) {\n          const [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, path, {\n            depth: 1\n          });\n          editor.isTextBlock(block) && block.markDefs?.forEach((def) => {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n          });\n        }\n        return activeAnnotations;\n      } catch {\n        return [];\n      }\n    },\n    isAnnotationActive: (annotationType) => isAnnotationActive({\n      editor,\n      annotation: {\n        name: annotationType\n      }\n    }),\n    addAnnotation: (type, value) => {\n      let paths;\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types\n          },\n          action: {\n            type: \"annotation.add\",\n            annotation: {\n              name: type.name,\n              value: value ?? {}\n            },\n            editor\n          }\n        });\n      }), editor.onChange(), paths;\n    },\n    delete: (selection, options) => {\n      if (selection) {\n        const range = toSlateRange(selection, editor);\n        if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))\n          throw new Error(\"Invalid range\");\n        if (range) {\n          if (!options?.mode || options?.mode === \"selected\") {\n            debug$2(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.delete(editor, {\n              at: range,\n              hanging: !0,\n              voids: !0\n            }), editor.onChange();\n            return;\n          }\n          options?.mode === \"blocks\" && (debug$2(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node)\n          })), options?.mode === \"children\" && (debug$2(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => node._type === types.span.name || // Text children\n            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_14__.Element.isElement(node)\n          })), editor.children.length === 0 && (editor.children = [editor.pteCreateTextBlock({\n            decorators: []\n          })]), editor.onChange();\n        }\n      }\n    },\n    removeAnnotation: (type) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.remove\",\n          annotation: {\n            name: type.name\n          }\n        },\n        editor\n      });\n    },\n    getSelection: () => {\n      let ptRange = null;\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n        if (existing)\n          return existing;\n        ptRange = toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n      }\n      return ptRange;\n    },\n    getValue: () => fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n    isCollapsedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection),\n    isExpandedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isExpanded(editor.selection),\n    insertBreak: () => {\n      editor.insertBreak(), editor.onChange();\n    },\n    getFragment: () => fromSlateValue(editor.getFragment(), types.block.name),\n    isSelectionsOverlapping: (selectionA, selectionB) => {\n      const rangeA = toSlateRange(selectionA, editor), rangeB = toSlateRange(selectionB, editor);\n      return slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_14__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(rangeA, rangeB);\n    }\n  };\n}\nfunction isAnnotationActive({\n  editor,\n  annotation\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2)\n    return !1;\n  try {\n    const spans = [...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText(node)\n    })];\n    if (spans.length === 0 || spans.some(([span]) => !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextSpan)(span) || !span.marks || span.marks?.length === 0)) return !1;\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, path, {\n        depth: 1\n      });\n      return editor.isTextBlock(block) && block.markDefs ? [...accMarkDefs, ...block.markDefs] : accMarkDefs;\n    }, []);\n    return spans.every(([span]) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_12__.isPortableTextSpan)(span) ? span.marks?.map((markKey) => selectionMarkDefs.find((def) => def?._key === markKey)?._type)?.includes(annotation.name) : !1);\n  } catch {\n    return !1;\n  }\n}\nconst addAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  const editor = action.editor, {\n    selection: originalSelection\n  } = editor;\n  let paths;\n  if (originalSelection && (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(originalSelection) && (editor.pteExpandToWord(), editor.onChange()), editor.selection)) {\n    let spanPath, markDefPath;\n    const markDefPaths = [];\n    if (!editor.selection)\n      return;\n    const selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n      reverse: slate__WEBPACK_IMPORTED_MODULE_14__.Range.isBackward(editor.selection)\n    });\n    for (const [block, blockPath] of selectedBlocks) {\n      if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\")\n        continue;\n      const annotationKey = context.keyGenerator(), markDefs = block.markDefs ?? [];\n      markDefs.find((markDef) => markDef._type === action.annotation.name && markDef._key === annotationKey) === void 0 && (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        markDefs: [...markDefs, {\n          _type: action.annotation.name,\n          _key: annotationKey,\n          ...action.annotation.value\n        }]\n      }, {\n        at: blockPath\n      }), markDefPath = [{\n        _key: block._key\n      }, \"markDefs\", {\n        _key: annotationKey\n      }], slate__WEBPACK_IMPORTED_MODULE_14__.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_14__.Text.isText,\n        split: !0\n      });\n      const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath);\n      for (const [span, path] of children) {\n        if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(editor.selection, path))\n          continue;\n        const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark) => markDefs.some((markDef) => markDef._key === mark && markDef._type === action.annotation.name));\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: [...marks.filter((mark) => !existingSameTypeAnnotations.includes(mark)), annotationKey]\n        }, {\n          at: path\n        }), spanPath = [{\n          _key: block._key\n        }, \"children\", {\n          _key: span._key\n        }];\n      }\n    }\n    markDefPath && spanPath && (paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath\n    });\n  }\n  return paths;\n}, removeAnnotationActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor;\n  if (debug$2(\"Removing annotation\", action.annotation.name), !!editor.selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_14__.Range.isCollapsed(editor.selection)) {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection, {\n        depth: 1\n      });\n      if (!editor.isTextBlock(block))\n        return;\n      const potentialAnnotations = (block.markDefs ?? []).filter((markDef) => markDef._type === action.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, editor.selection, {\n        depth: 2\n      });\n      if (!editor.isTextSpan(selectedChild))\n        return;\n      const annotationToRemove = selectedChild.marks?.find((mark) => potentialAnnotations.some((markDef) => markDef._key === mark));\n      if (!annotationToRemove)\n        return;\n      const previousSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath, {\n        reverse: !0\n      }))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isBefore(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            previousSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      const nextSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_14__.Path.isAfter(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            nextSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      for (const [child, childPath] of [...previousSpansWithSameAnnotation, [selectedChild, selectedChildPath], ...nextSpansWithSameAnnotation])\n        slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove)\n        }, {\n          at: childPath\n        });\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {}, {\n        match: (node) => editor.isTextSpan(node),\n        split: !0,\n        hanging: !0\n      });\n      const blocks = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node)\n      });\n      for (const [block, blockPath] of blocks) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, blockPath);\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_14__.Range.includes(editor.selection, childPath))\n            continue;\n          const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find((markDef2) => markDef2._key === mark)?._type !== action.annotation.name);\n          marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n            marks: marksWithoutAnnotation\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n}, toggleAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  if (isAnnotationActive({\n    editor: action.editor,\n    annotation: {\n      name: action.annotation.name\n    }\n  }))\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: \"annotation.remove\",\n        annotation: action.annotation,\n        editor: action.editor\n      }\n    });\n  else\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: \"annotation.add\",\n        annotation: action.annotation,\n        editor: action.editor\n      }\n    });\n};\nfunction insertBlock({\n  block,\n  placement,\n  editor,\n  schema\n}) {\n  if (editor.selection) {\n    const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n      at: editor.selection.focus.path.slice(0, 1),\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(n)\n    }))[0] ?? [void 0, void 0];\n    if (placement === \"after\") {\n      const nextPath = [focusBlockPath[0] + 1];\n      slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, block, {\n        at: nextPath\n      }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(editor, {\n        anchor: {\n          path: [nextPath[0], 0],\n          offset: 0\n        },\n        focus: {\n          path: [nextPath[0], 0],\n          offset: 0\n        }\n      });\n    } else placement === \"before\" ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, block, {\n      at: focusBlockPath\n    }) : (slate__WEBPACK_IMPORTED_MODULE_14__.Editor.insertNode(editor, block), focusBlock && isEqualToEmptyEditor([focusBlock], schema) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: focusBlockPath\n    }));\n  } else {\n    const lastBlock = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(editor, {\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_14__.Editor.isEditor(n),\n      at: [],\n      reverse: !0\n    }))[0];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Editor.insertNode(editor, block), lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(editor, {\n      at: lastBlock[1]\n    });\n  }\n}\nconst blockSetBehaviorActionImplementation = ({\n  action\n}) => {\n  const location = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  if (!location)\n    return;\n  const {\n    at,\n    editor,\n    type,\n    ...payload\n  } = action;\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(action.editor, payload, {\n    at: location\n  });\n}, blockUnsetBehaviorActionImplementation = ({\n  action\n}) => {\n  const location = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  location && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.unsetNodes(action.editor, action.props, {\n    at: location\n  });\n}, dataTransferSetActionImplementation = ({\n  action\n}) => {\n  action.dataTransfer.setData(action.mimeType, action.data);\n}, insertBlockObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  const block = toSlateValue([{\n    _key: context.keyGenerator(),\n    _type: action.blockObject.name,\n    ...action.blockObject.value ? action.blockObject.value : {}\n  }], {\n    schemaTypes: context.schema\n  })[0];\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema\n  });\n}, insertBlocksActionImplementation = ({\n  context,\n  action\n}) => {\n  const fragment = toSlateValue(action.blocks, {\n    schemaTypes: context.schema\n  });\n  if (!action.editor.selection)\n    return;\n  const [focusBlock, focusPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(action.editor, action.editor.selection, {\n    depth: 1\n  });\n  if (action.editor.isTextBlock(focusBlock) && action.editor.isTextBlock(fragment[0])) {\n    const {\n      markDefs\n    } = focusBlock;\n    lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(markDefs, fragment[0].markDefs) || slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(action.editor, {\n      markDefs: lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...fragment[0].markDefs || [], ...markDefs || []])\n    }, {\n      at: focusPath,\n      mode: \"lowest\",\n      voids: !1\n    });\n  }\n  isEqualToEmptyEditor(action.editor.children, context.schema) ? (slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.splitNodes(action.editor, {\n    at: [0, 0]\n  }), action.editor.insertFragment(fragment), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(action.editor, {\n    at: [0]\n  })) : action.editor.insertFragment(fragment);\n}, insertBreakActionImplementation = ({\n  context,\n  action\n}) => {\n  const keyGenerator = context.keyGenerator, schema = context.schema, editor = action.editor;\n  if (!editor.selection)\n    return;\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1), focusBlockPath = editor.selection.focus.path.slice(0, 1), focusBlock = slate__WEBPACK_IMPORTED_MODULE_14__.Node.descendant(editor, focusBlockPath);\n  if (editor.isTextBlock(focusBlock) && anchorBlockPath[0] === focusBlockPath[0]) {\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.splitNodes(editor, {\n      at: editor.selection\n    });\n    const [nextBlock, nextBlockPath] = slate__WEBPACK_IMPORTED_MODULE_14__.Editor.node(editor, slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(focusBlockPath), {\n      depth: 1\n    }), nextChild = slate__WEBPACK_IMPORTED_MODULE_14__.Node.child(nextBlock, 0);\n    if (!editor.isTextSpan(nextChild) && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(editor, {\n      _key: context.keyGenerator(),\n      _type: \"span\",\n      text: \"\",\n      marks: []\n    }, {\n      at: [nextBlockPath[0], 0]\n    }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setSelection(editor, {\n      anchor: {\n        path: [...nextBlockPath, 0],\n        offset: 0\n      },\n      focus: {\n        path: [...nextBlockPath, 0],\n        offset: 0\n      }\n    }), editor.isTextBlock(nextBlock) && nextBlock.markDefs && nextBlock.markDefs.length > 0) {\n      const newMarkDefKeys = /* @__PURE__ */ new Map(), prevNodeSpans = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, focusBlockPath)).map((entry) => entry[0]).filter((node) => editor.isTextSpan(node)), children = slate__WEBPACK_IMPORTED_MODULE_14__.Node.children(editor, nextBlockPath);\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child))\n          continue;\n        const marks = child.marks ?? [];\n        for (const mark of marks)\n          schema.decorators.some((decorator) => decorator.value === mark) || prevNodeSpans.some((prevNodeSpan) => prevNodeSpan.marks?.includes(mark)) && !newMarkDefKeys.has(mark) && newMarkDefKeys.set(mark, keyGenerator());\n        const newMarks = marks.map((mark) => newMarkDefKeys.get(mark) ?? mark);\n        lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(marks, newMarks) || slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n          marks: newMarks\n        }, {\n          at: childPath\n        });\n      }\n      const newMarkDefs = nextBlock.markDefs.map((markDef) => ({\n        ...markDef,\n        _key: newMarkDefKeys.get(markDef._key) ?? markDef._key\n      }));\n      lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(nextBlock.markDefs, newMarkDefs) || slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(editor, {\n        markDefs: newMarkDefs\n      }, {\n        at: nextBlockPath,\n        match: (node) => editor.isTextBlock(node)\n      });\n    }\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.splitNodes(editor, {\n    always: !0\n  });\n}, insertSoftBreakActionImplementation = ({\n  context,\n  action\n}) => {\n  insertBreakActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"insert.break\"\n    }\n  });\n}, insertInlineObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!context.schema.inlineObjects.some((inlineObject) => inlineObject.name === action.inlineObject.name)) {\n    console.error(\"Unable to insert unknown inline object\");\n    return;\n  }\n  if (!action.editor.selection) {\n    console.error(\"Unable to insert inline object without selection\");\n    return;\n  }\n  const [focusTextBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  })).at(0) ?? [void 0, void 0];\n  if (!focusTextBlock) {\n    console.error(\"Unable to perform action without focus text block\");\n    return;\n  }\n  const child = toSlateValue([{\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    children: [{\n      _type: action.inlineObject.name,\n      _key: context.keyGenerator(),\n      ...action.inlineObject.value ?? {}\n    }]\n  }], {\n    schemaTypes: context.schema\n  }).at(0)?.children.at(0);\n  if (!child) {\n    console.error(\"Unable to insert inline object\");\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(action.editor, child);\n}, insertSpanActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection) {\n    console.error(\"Unable to perform action without selection\", action);\n    return;\n  }\n  const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_14__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  }))[0] ?? [void 0, void 0];\n  if (!focusBlock || !focusBlockPath) {\n    console.error(\"Unable to perform action without focus block\", action);\n    return;\n  }\n  const markDefs = focusBlock.markDefs ?? [], annotations = action.annotations ? action.annotations.map((annotation) => ({\n    _type: annotation.name,\n    _key: context.keyGenerator(),\n    ...annotation.value\n  })) : void 0;\n  annotations && annotations.length > 0 && slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(action.editor, {\n    markDefs: [...markDefs, ...annotations]\n  }), slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.insertNodes(action.editor, {\n    _type: \"span\",\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [...annotations?.map((annotation) => annotation._key) ?? [], ...action.decorators ?? []]\n  });\n}, insertBlockActionImplementation = ({\n  context,\n  action\n}) => {\n  const parsedBlock = parseBlock({\n    block: action.block,\n    context,\n    options: {\n      refreshKeys: !1\n    }\n  });\n  if (!parsedBlock)\n    throw new Error(`Failed to parse block ${JSON.stringify(action.block)}`);\n  const fragment = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema\n  })[0];\n  if (!fragment)\n    throw new Error(`Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`);\n  insertBlock({\n    block: fragment,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema\n  });\n}, textBlockSetActionImplementation = ({\n  action\n}) => {\n  const at = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.setNodes(action.editor, {\n    ...action.style ? {\n      style: action.style\n    } : {},\n    ...action.listItem ? {\n      listItem: action.listItem\n    } : {},\n    ...action.level ? {\n      level: action.level\n    } : {}\n  }, {\n    at\n  });\n}, textBlockUnsetActionImplementation = ({\n  action\n}) => {\n  const at = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.unsetNodes(action.editor, action.props, {\n    at\n  });\n}, behaviorActionImplementations = {\n  \"annotation.add\": addAnnotationActionImplementation,\n  \"annotation.remove\": removeAnnotationActionImplementation,\n  \"annotation.toggle\": toggleAnnotationActionImplementation,\n  \"block.set\": blockSetBehaviorActionImplementation,\n  \"block.unset\": blockUnsetBehaviorActionImplementation,\n  blur: ({\n    action\n  }) => {\n    slate_react__WEBPACK_IMPORTED_MODULE_23__.ReactEditor.blur(action.editor);\n  },\n  \"data transfer.set\": dataTransferSetActionImplementation,\n  \"decorator.add\": addDecoratorActionImplementation,\n  \"decorator.remove\": removeDecoratorActionImplementation,\n  \"decorator.toggle\": toggleDecoratorActionImplementation,\n  focus: ({\n    action\n  }) => {\n    slate_react__WEBPACK_IMPORTED_MODULE_23__.ReactEditor.focus(action.editor);\n  },\n  \"delete.backward\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_14__.deleteBackward)(action.editor, action.unit);\n  },\n  \"delete.forward\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_14__.deleteForward)(action.editor, action.unit);\n  },\n  \"delete.block\": ({\n    action\n  }) => {\n    const range = toSlateRange({\n      anchor: {\n        path: action.blockPath,\n        offset: 0\n      },\n      focus: {\n        path: action.blockPath,\n        offset: 0\n      }\n    }, action.editor);\n    if (!range) {\n      console.error(\"Unable to find Slate range from selection points\");\n      return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.removeNodes(action.editor, {\n      at: range\n    });\n  },\n  \"delete.text\": ({\n    context,\n    action\n  }) => {\n    const value = fromSlateValue(action.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)), anchor = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_25__.blockOffsetToSpanSelectionPoint)({\n      value,\n      blockOffset: action.anchor\n    }), focus = (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_25__.blockOffsetToSpanSelectionPoint)({\n      value,\n      blockOffset: action.focus\n    });\n    if (!anchor || !focus) {\n      console.error(\"Unable to find anchor or focus selection point\");\n      return;\n    }\n    const range = toSlateRange({\n      anchor,\n      focus\n    }, action.editor);\n    if (!range) {\n      console.error(\"Unable to find Slate range from selection points\");\n      return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.delete(action.editor, {\n      at: range\n    });\n  },\n  \"deserialization.failure\": ({\n    action\n  }) => {\n    console.error(`Deserialization of ${action.mimeType} failed with reason ${action.reason}`);\n  },\n  \"deserialization.success\": ({\n    context,\n    action\n  }) => {\n    insertBlocksActionImplementation({\n      context,\n      action: {\n        type: \"insert.blocks\",\n        blocks: action.data,\n        editor: action.editor\n      }\n    });\n  },\n  \"insert.block\": insertBlockActionImplementation,\n  \"insert.blocks\": insertBlocksActionImplementation,\n  \"insert.block object\": insertBlockObjectActionImplementation,\n  \"insert.break\": insertBreakActionImplementation,\n  \"insert.inline object\": insertInlineObjectActionImplementation,\n  \"insert.soft break\": insertSoftBreakActionImplementation,\n  \"insert.span\": insertSpanActionImplementation,\n  \"insert.text\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_14__.insertText)(action.editor, action.text);\n  },\n  \"insert.text block\": ({\n    context,\n    action\n  }) => {\n    const block = toSlateValue([{\n      _key: context.keyGenerator(),\n      _type: context.schema.block.name,\n      style: context.schema.styles[0].value ?? \"normal\",\n      markDefs: [],\n      children: action.textBlock?.children?.map((child) => ({\n        ...child,\n        _key: context.keyGenerator()\n      })) ?? [{\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: \"\"\n      }]\n    }], {\n      schemaTypes: context.schema\n    })[0];\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement\n    });\n  },\n  effect: ({\n    action\n  }) => {\n    action.effect();\n  },\n  \"list item.add\": addListItemActionImplementation,\n  \"list item.remove\": removeListItemActionImplementation,\n  \"list item.toggle\": toggleListItemActionImplementation,\n  \"move.block\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]], to = [toSlatePath(action.to, action.editor)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  \"move.block down\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]], to = [slate__WEBPACK_IMPORTED_MODULE_14__.Path.next(at)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  \"move.block up\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]];\n    if (!slate__WEBPACK_IMPORTED_MODULE_14__.Path.hasPrevious(at))\n      return;\n    const to = [slate__WEBPACK_IMPORTED_MODULE_14__.Path.previous(at)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  noop: () => {\n  },\n  select: ({\n    action\n  }) => {\n    const newSelection = toSlateRange(action.selection, action.editor);\n    newSelection ? slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(action.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.deselect(action.editor);\n  },\n  \"select.previous block\": ({\n    action\n  }) => {\n    if (!action.editor.selection) {\n      console.error(\"Unable to select previous block without a selection\");\n      return;\n    }\n    const blockPath = action.editor.selection.focus.path.slice(0, 1);\n    if (!slate__WEBPACK_IMPORTED_MODULE_14__.Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\");\n      return;\n    }\n    const previousBlockPath = slate__WEBPACK_IMPORTED_MODULE_14__.Path.previous(blockPath);\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(action.editor, previousBlockPath);\n  },\n  \"select.next block\": ({\n    action\n  }) => {\n    if (!action.editor.selection) {\n      console.error(\"Unable to select next block without a selection\");\n      return;\n    }\n    const nextBlockPath = [action.editor.selection.focus.path.slice(0, 1)[0] + 1];\n    slate__WEBPACK_IMPORTED_MODULE_14__.Transforms.select(action.editor, nextBlockPath);\n  },\n  \"serialization.failure\": ({\n    action\n  }) => {\n    console.error(`Serialization of ${action.mimeType} failed with reason ${action.reason}`);\n  },\n  \"serialization.success\": ({\n    context,\n    action\n  }) => {\n    dataTransferSetActionImplementation({\n      context,\n      action: {\n        ...action,\n        type: \"data transfer.set\"\n      }\n    });\n  },\n  \"style.toggle\": toggleStyleActionImplementation,\n  \"style.add\": addStyleActionImplementation,\n  \"style.remove\": removeStyleActionImplementation,\n  \"text block.set\": textBlockSetActionImplementation,\n  \"text block.unset\": textBlockUnsetActionImplementation\n};\nfunction performAction({\n  context,\n  action\n}) {\n  switch (action.type) {\n    case \"noop\":\n      break;\n    case \"effect\": {\n      behaviorActionImplementations.effect({\n        context,\n        action\n      });\n      break;\n    }\n    default:\n      performDefaultAction({\n        context,\n        action\n      });\n  }\n}\nfunction performDefaultAction({\n  context,\n  action\n}) {\n  switch (action.type) {\n    case \"annotation.add\": {\n      behaviorActionImplementations[\"annotation.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"annotation.remove\": {\n      behaviorActionImplementations[\"annotation.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"annotation.toggle\": {\n      behaviorActionImplementations[\"annotation.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"block.set\": {\n      behaviorActionImplementations[\"block.set\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"block.unset\": {\n      behaviorActionImplementations[\"block.unset\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"blur\": {\n      behaviorActionImplementations.blur({\n        context,\n        action\n      });\n      break;\n    }\n    case \"data transfer.set\": {\n      behaviorActionImplementations[\"data transfer.set\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.add\": {\n      behaviorActionImplementations[\"decorator.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.remove\": {\n      behaviorActionImplementations[\"decorator.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.toggle\": {\n      behaviorActionImplementations[\"decorator.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.backward\": {\n      behaviorActionImplementations[\"delete.backward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.block\": {\n      behaviorActionImplementations[\"delete.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.forward\": {\n      behaviorActionImplementations[\"delete.forward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.text\": {\n      behaviorActionImplementations[\"delete.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"deserialization.failure\": {\n      behaviorActionImplementations[\"deserialization.failure\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"deserialization.success\": {\n      behaviorActionImplementations[\"deserialization.success\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"focus\": {\n      behaviorActionImplementations.focus({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.block\": {\n      behaviorActionImplementations[\"insert.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.blocks\": {\n      behaviorActionImplementations[\"insert.blocks\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.block object\": {\n      behaviorActionImplementations[\"insert.block object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.inline object\": {\n      behaviorActionImplementations[\"insert.inline object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.break\": {\n      behaviorActionImplementations[\"insert.break\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.soft break\": {\n      behaviorActionImplementations[\"insert.soft break\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.span\": {\n      behaviorActionImplementations[\"insert.span\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text\": {\n      behaviorActionImplementations[\"insert.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text block\": {\n      behaviorActionImplementations[\"insert.text block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.add\": {\n      behaviorActionImplementations[\"list item.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.remove\": {\n      behaviorActionImplementations[\"list item.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.toggle\": {\n      behaviorActionImplementations[\"list item.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block\": {\n      behaviorActionImplementations[\"move.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block down\": {\n      behaviorActionImplementations[\"move.block down\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block up\": {\n      behaviorActionImplementations[\"move.block up\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select\": {\n      behaviorActionImplementations.select({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select.previous block\": {\n      behaviorActionImplementations[\"select.previous block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select.next block\": {\n      behaviorActionImplementations[\"select.next block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"serialization.failure\": {\n      behaviorActionImplementations[\"serialization.failure\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"serialization.success\": {\n      behaviorActionImplementations[\"serialization.success\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.add\": {\n      behaviorActionImplementations[\"style.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.remove\": {\n      behaviorActionImplementations[\"style.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.toggle\": {\n      behaviorActionImplementations[\"style.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"text block.set\": {\n      behaviorActionImplementations[\"text block.set\"]({\n        context,\n        action\n      });\n      break;\n    }\n    default:\n      behaviorActionImplementations[\"text block.unset\"]({\n        context,\n        action\n      });\n  }\n}\nfunction getActiveDecorators({\n  schema,\n  slateEditorInstance\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value);\n  return ({\n    ...slate__WEBPACK_IMPORTED_MODULE_14__.Editor.marks(slateEditorInstance) ?? {}\n  }.marks ?? []).filter((mark) => decorators.includes(mark));\n}\nfunction createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  schema\n}) {\n  const value = fromSlateValue(editor.children, schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), selection = toPortableTextRange(value, editor.selection, schema);\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema,\n        slateEditorInstance: editor\n      }),\n      converters,\n      keyGenerator,\n      schema,\n      selection,\n      value\n    }\n  };\n}\nconst editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_15__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {},\n    input: {}\n  },\n  actions: {\n    \"add behavior to context\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"add behavior\"), /* @__PURE__ */ new Set([...context.behaviors, event.behavior]))\n    }),\n    \"remove behavior from context\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"remove behavior\"), context.behaviors.delete(event.behavior), /* @__PURE__ */ new Set([...context.behaviors]))\n    }),\n    \"assign behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      behaviors: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"update behaviors\"), new Set(event.behaviors))\n    }),\n    \"assign schema\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      schema: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"update schema\"), event.schema)\n    }),\n    \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"patch\"), event)),\n    \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, \"mutation\"), event)),\n    \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)({\n      type: \"read only\"\n    }),\n    \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)({\n      type: \"editable\"\n    }),\n    \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      pendingEvents: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, [\"patch\", \"mutation\"]), [...context.pendingEvents, event])\n    }),\n    \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.b)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingEvents)\n        enqueue((0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(event));\n    }),\n    \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)({\n      type: \"ready\"\n    }),\n    \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n      pendingEvents: []\n    }),\n    \"handle behavior event\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.b)(({\n      context,\n      event,\n      enqueue\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_15__.assertEvent)(event, [\"behavior event\", \"custom behavior event\"]);\n      const defaultAction = event.type === \"custom behavior event\" || event.behaviorEvent.type === \"copy\" || event.behaviorEvent.type === \"deserialize\" || event.behaviorEvent.type === \"key.down\" || event.behaviorEvent.type === \"key.up\" || event.behaviorEvent.type === \"paste\" || event.behaviorEvent.type === \"serialize\" ? void 0 : {\n        ...event.behaviorEvent,\n        editor: event.editor\n      }, defaultActionCallback = event.type === \"behavior event\" ? event.defaultActionCallback : void 0, eventBehaviors = [...context.behaviors.values()].filter((behavior) => behavior.on === event.behaviorEvent.type);\n      if (eventBehaviors.length === 0) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback();\n              } catch (error) {\n                console.error(new Error(`Performing action \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n              }\n            });\n          });\n          return;\n        }\n        if (!defaultAction)\n          return;\n        withApplyingBehaviorActions(event.editor, () => {\n          slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction\n              });\n            } catch (error) {\n              console.error(new Error(`Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n            }\n          });\n        }), event.editor.onChange();\n        return;\n      }\n      const editorSnapshot = createEditorSnapshot({\n        converters: [...context.converters],\n        editor: event.editor,\n        keyGenerator: context.keyGenerator,\n        schema: context.schema\n      });\n      let behaviorOverwritten = !1;\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n          context: editorSnapshot.context,\n          event: event.behaviorEvent\n        });\n        if (!shouldRun)\n          continue;\n        const actionIntendSets = eventBehavior.actions.map((actionSet) => actionSet({\n          context: editorSnapshot.context,\n          event: event.behaviorEvent\n        }, shouldRun));\n        for (const actionIntends of actionIntendSets)\n          behaviorOverwritten = behaviorOverwritten || actionIntends.length > 0 && actionIntends.some((actionIntend) => actionIntend.type !== \"effect\"), withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(event.editor, () => {\n              for (const actionIntend of actionIntends) {\n                if (actionIntend.type === \"raise\") {\n                  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_26__.isCustomBehaviorEvent)(actionIntend.event) ? enqueue.raise({\n                    type: \"custom behavior event\",\n                    behaviorEvent: actionIntend.event,\n                    editor: event.editor\n                  }) : enqueue.raise({\n                    type: \"behavior event\",\n                    behaviorEvent: actionIntend.event,\n                    editor: event.editor\n                  });\n                  continue;\n                }\n                const action = {\n                  ...actionIntend,\n                  editor: event.editor\n                };\n                try {\n                  performAction({\n                    context,\n                    action\n                  });\n                } catch (error) {\n                  console.error(new Error(`Performing action \"${action.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n                  break;\n                }\n              }\n            });\n          }), event.editor.onChange();\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault();\n          break;\n        }\n      }\n      if (!behaviorOverwritten) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback();\n              } catch (error) {\n                console.error(new Error(`Performing \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n              }\n            });\n          });\n          return;\n        }\n        if (!defaultAction)\n          return;\n        withApplyingBehaviorActions(event.editor, () => {\n          slate__WEBPACK_IMPORTED_MODULE_14__.Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction\n              });\n            } catch (error) {\n              console.error(new Error(`Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n            }\n          });\n        }), event.editor.onChange();\n      }\n    })\n  }\n}).createMachine({\n  id: \"editor\",\n  context: ({\n    input\n  }) => ({\n    behaviors: new Set(input.behaviors ?? _behavior_core_js__WEBPACK_IMPORTED_MODULE_26__.coreBehaviors),\n    converters: new Set(input.converters ?? []),\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? !1,\n    maxBlocks: input.maxBlocks,\n    value: input.value\n  }),\n  on: {\n    \"notify.blurred\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"blurred\"\n      }))\n    },\n    \"notify.done loading\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)({\n        type: \"done loading\"\n      })\n    },\n    \"notify.error\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"error\"\n      }))\n    },\n    \"notify.invalid value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"invalid value\"\n      }))\n    },\n    \"notify.focused\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"focused\"\n      }))\n    },\n    \"notify.selection\": {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n        selection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"selection\"\n      }))]\n    },\n    \"notify.unset\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"unset\"\n      }))\n    },\n    \"notify.loading\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)({\n        type: \"loading\"\n      })\n    },\n    \"notify.value changed\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"value changed\"\n      }))\n    },\n    \"add behavior\": {\n      actions: \"add behavior to context\"\n    },\n    \"remove behavior\": {\n      actions: \"remove behavior from context\"\n    },\n    patches: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n        event\n      }) => event)\n    },\n    \"update behaviors\": {\n      actions: \"assign behaviors\"\n    },\n    \"update key generator\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n        keyGenerator: ({\n          event\n        }) => event.keyGenerator\n      })\n    },\n    \"update schema\": {\n      actions: \"assign schema\"\n    },\n    \"update value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n        value: ({\n          event\n        }) => event.value\n      })\n    },\n    \"update maxBlocks\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.a)({\n        maxBlocks: ({\n          event\n        }) => event.maxBlocks\n      })\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"edit mode\": {\n      initial: \"read only\",\n      states: {\n        \"read only\": {\n          initial: \"determine initial edit mode\",\n          on: {\n            \"behavior event\": {\n              actions: \"handle behavior event\",\n              guard: ({\n                event\n              }) => event.behaviorEvent.type === \"copy\" || event.behaviorEvent.type === \"data transfer.set\" || event.behaviorEvent.type === \"serialize\" || event.behaviorEvent.type === \"serialization.failure\" || event.behaviorEvent.type === \"serialization.success\" || event.behaviorEvent.type === \"select\"\n            }\n          },\n          states: {\n            \"determine initial edit mode\": {\n              on: {\n                \"done syncing initial value\": [{\n                  target: \"#editor.edit mode.read only.read only\",\n                  guard: ({\n                    context\n                  }) => context.initialReadOnly\n                }, {\n                  target: \"#editor.edit mode.editable\"\n                }]\n              }\n            },\n            \"read only\": {\n              on: {\n                \"update readOnly\": {\n                  guard: ({\n                    event\n                  }) => !event.readOnly,\n                  target: \"#editor.edit mode.editable\",\n                  actions: [\"emit editable\"]\n                }\n              }\n            }\n          }\n        },\n        editable: {\n          on: {\n            \"update readOnly\": {\n              guard: ({\n                event\n              }) => event.readOnly,\n              target: \"#editor.edit mode.read only.read only\",\n              actions: [\"emit read only\"]\n            },\n            \"behavior event\": {\n              actions: \"handle behavior event\"\n            },\n            \"custom behavior event\": {\n              actions: \"handle behavior event\"\n            },\n            \"annotation.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"block.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            blur: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"custom.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => ({\n                type: \"custom.*\",\n                event\n              }))\n            },\n            \"decorator.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"delete.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            focus: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"insert.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"list item.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"move.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            select: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"select.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"style.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            },\n            \"text block.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_16__.e)(({\n                event\n              }) => event)\n            }\n          }\n        }\n      }\n    },\n    setup: {\n      initial: \"setting up\",\n      states: {\n        \"setting up\": {\n          exit: [\"emit ready\"],\n          on: {\n            patch: {\n              actions: \"defer event\"\n            },\n            mutation: {\n              actions: \"defer event\"\n            },\n            \"done syncing initial value\": {\n              target: \"pristine\"\n            }\n          }\n        },\n        pristine: {\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: \"normalizing\"\n                },\n                patch: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                },\n                mutation: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                }\n              }\n            },\n            normalizing: {\n              on: {\n                \"done normalizing\": {\n                  target: \"idle\"\n                },\n                patch: {\n                  actions: \"defer event\"\n                },\n                mutation: {\n                  actions: \"defer event\"\n                }\n              }\n            }\n          }\n        },\n        dirty: {\n          entry: [\"emit pending events\", \"clear pending events\"],\n          on: {\n            patch: {\n              actions: \"emit patch event\"\n            },\n            mutation: {\n              actions: \"emit mutation event\"\n            }\n          }\n        }\n      }\n    }\n  }\n});\nfunction getValue({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return fromSlateValue(slateEditorInstance.children, editorActorSnapshot.context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditorInstance));\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n  let t1;\n  return $[0] !== editor._internal.slateEditor.instance || $[1] !== selector ? (t1 = (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: editor._internal.slateEditor.instance\n    });\n    return selector(snapshot);\n  }, $[0] = editor._internal.slateEditor.instance, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_19__.useSelector)(editor._internal.editorActor, t1, compare);\n}\nfunction getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({\n        editorActorSnapshot,\n        slateEditorInstance\n      })\n    }\n  };\n}\nconst defaultKeyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_27__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nfunction createEditor(config) {\n  const editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_28__.A)(editorMachine, {\n    input: editorConfigToMachineInput(config)\n  });\n  return editorActor.start(), createEditorFromActor(editorActor);\n}\nfunction useCreateEditor(config) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(6);\n  let t0;\n  $[0] !== config ? (t0 = editorConfigToMachineInput(config), $[0] = config, $[1] = t0) : t0 = $[1];\n  let t1;\n  $[2] !== t0 ? (t1 = {\n    input: t0\n  }, $[2] = t0, $[3] = t1) : t1 = $[3];\n  const editorActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_19__.useActorRef)(editorMachine, t1);\n  let t2, t3;\n  return $[4] !== editorActor ? (t3 = createEditorFromActor(editorActor), $[4] = editorActor, $[5] = t3) : t3 = $[5], t2 = t3, t2;\n}\nfunction editorConfigToMachineInput(config) {\n  return {\n    behaviors: config.behaviors,\n    converters: coreConverters,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition ? compileSchemaDefinition(config.schemaDefinition) : createEditorSchema(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)),\n    value: config.initialValue\n  };\n}\nfunction createEditorFromActor(editorActor) {\n  const slateEditor = createSlateEditor({\n    editorActor\n  }), editable = createEditableAPI(slateEditor.instance, editorActor);\n  return {\n    getSnapshot: () => getEditorSnapshot({\n      editorActorSnapshot: editorActor.getSnapshot(),\n      slateEditorInstance: slateEditor.instance\n    }),\n    registerBehavior: (config) => (editorActor.send({\n      type: \"add behavior\",\n      behavior: config.behavior\n    }), () => {\n      editorActor.send({\n        type: \"remove behavior\",\n        behavior: config.behavior\n      });\n    }),\n    send: (event) => {\n      editorActor.send(event);\n    },\n    on: (event, listener) => editorActor.on(event, (event2) => {\n      switch (event2.type) {\n        case \"blurred\":\n        case \"done loading\":\n        case \"editable\":\n        case \"error\":\n        case \"focused\":\n        case \"invalid value\":\n        case \"loading\":\n        case \"mutation\":\n        case \"patch\":\n        case \"read only\":\n        case \"ready\":\n        case \"selection\":\n        case \"value changed\":\n          listener(event2);\n          break;\n      }\n    }),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor\n    }\n  };\n}\nconst EditorActorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({}), PortableTextEditorSelectionContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null), usePortableTextEditorSelection = () => {\n  const selection = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PortableTextEditorSelectionContext);\n  if (selection === void 0)\n    throw new Error(\"The `usePortableTextEditorSelection` hook must be used inside the <PortableTextEditor> component's context.\");\n  return selection;\n}, debug$1 = debugWithName(\"component:PortableTextEditor:SelectionProvider\");\nfunction PortableTextEditorSelectionProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(6), [selection, setSelection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n  let t0, t1;\n  $[0] !== props.editorActor ? (t0 = () => {\n    debug$1(\"Subscribing to selection changes\");\n    const subscription = props.editorActor.on(\"selection\", (event) => {\n      (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n        setSelection(event.selection);\n      });\n    });\n    return () => {\n      debug$1(\"Unsubscribing to selection changes\"), subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor], $[0] = props.editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1);\n  let t2;\n  return $[3] !== props.children || $[4] !== selection ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorSelectionContext.Provider, { value: selection, children: props.children }), $[3] = props.children, $[4] = selection, $[5] = t2) : t2 = $[5], t2;\n}\nconst debug = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n  static displayName = \"PortableTextEditor\";\n  /**\n   * An observable of all the editor changes.\n   */\n  change$ = new rxjs__WEBPACK_IMPORTED_MODULE_29__.Subject();\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  /**\n   * The editor instance\n   */\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  constructor(props) {\n    super(props), props.editor ? this.editor = props.editor : this.editor = createEditor({\n      keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n      schema: props.schemaType,\n      initialValue: props.value,\n      maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n      readOnly: props.readOnly\n    }), this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.schema, this.editable = this.editor._internal.editable;\n  }\n  componentDidUpdate(prevProps) {\n    !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && (this.schemaTypes = createEditorSchema(this.props.schemaType.hasOwnProperty(\"jsonType\") ? this.props.schemaType : compileType(this.props.schemaType)), this.editor._internal.editorActor.send({\n      type: \"update schema\",\n      schema: this.schemaTypes\n    })), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n      type: \"update readOnly\",\n      readOnly: this.props.readOnly ?? !1\n    }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n      type: \"update maxBlocks\",\n      maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n    }), this.props.value !== prevProps.value && this.editor._internal.editorActor.send({\n      type: \"update value\",\n      value: this.props.value\n    }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n  }\n  setEditable = (editable) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable\n    };\n  };\n  render() {\n    const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n      legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RoutePatchesObservableToEditorActor, { editorActor: this.editor._internal.editorActor, patches$: legacyPatches }) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RouteEventsToChanges, { editorActor: this.editor._internal.editorActor, onChange: (change) => {\n        this.props.editor || this.props.onChange(change), this.change$.next(change);\n      } }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Synchronizer, { editorActor: this.editor._internal.editorActor, slateEditor: this.editor._internal.slateEditor.instance }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditorActorContext.Provider, { value: this.editor._internal.editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_23__.Slate, { editor: this.editor._internal.slateEditor.instance, initialValue: this.editor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorContext.Provider, { value: this, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorSelectionProvider, { editorActor: this.editor._internal.editorActor, children: this.props.children }) }) }) })\n    ] });\n  }\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor) => {\n    debug(\"Host blurred\"), editor.editable?.blur();\n  };\n  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);\n  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);\n  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor) => {\n    debug(\"Host requesting focus\"), editor.editable?.focus();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor) => editor.editable?.focusBlock();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (editor) => editor.editable?.focusChild();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor) => editor.editable?.getValue();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = (editor, type, value) => (debug(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor) => editor.editable?.insertBreak();\n  static isVoid = (editor, element) => editor.editable?.isVoid(element);\n  static isObjectPath = (_editor, path) => {\n    if (!path || !Array.isArray(path)) return !1;\n    const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n    return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n  };\n  static marks = (editor) => editor.editable?.marks();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (editor, selection) => {\n    debug(\"Host setting selection\", selection), editor.editable?.select(selection);\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (editor, blockStyle) => (debug(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor, mark) => {\n    debug(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n  };\n  static getFragment = (editor) => (debug(\"Host getting fragment\"), editor.editable?.getFragment());\n  static undo = (editor) => {\n    debug(\"Host undoing\"), editor.editable?.undo();\n  };\n  static redo = (editor) => {\n    debug(\"Host redoing\"), editor.editable?.redo();\n  };\n  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0, t1;\n  return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = () => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: \"patches\",\n        ...payload\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor, props.patches$], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction RouteEventsToChanges(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(6);\n  let t0;\n  $[0] !== props ? (t0 = (change) => props.onChange(change), $[0] = props, $[1] = t0) : t0 = $[1];\n  const handleChange = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_30__.useEffectEvent)(t0);\n  let t1, t2;\n  return $[2] !== handleChange || $[3] !== props.editorActor ? (t1 = () => {\n    debug(\"Subscribing to editor changes\");\n    const sub = props.editorActor.on(\"*\", (event) => {\n      bb5: switch (event.type) {\n        case \"blurred\": {\n          handleChange({\n            type: \"blur\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"patch\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !0\n          });\n          break bb5;\n        }\n        case \"done loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !1\n          });\n          break bb5;\n        }\n        case \"focused\": {\n          handleChange({\n            type: \"focus\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"value changed\": {\n          handleChange({\n            type: \"value\",\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"invalid value\": {\n          handleChange({\n            type: \"invalidValue\",\n            resolution: event.resolution,\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"error\": {\n          handleChange({\n            ...event,\n            level: \"warning\"\n          });\n          break bb5;\n        }\n        case \"mutation\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"ready\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"selection\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"unset\":\n          handleChange(event);\n      }\n    });\n    return () => {\n      debug(\"Unsubscribing to changes\"), sub.unsubscribe();\n    };\n  }, t2 = [props.editorActor, handleChange], $[2] = handleChange, $[3] = props.editorActor, $[4] = t1, $[5] = t2) : (t1 = $[4], t2 = $[5]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t1, t2), null;\n}\nconst EditorContext = react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction EditorProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(28), editor = useCreateEditor(props.initialConfig), editorActor = editor._internal.editorActor, slateEditor = editor._internal.slateEditor;\n  let t0, t1;\n  $[0] !== editor ? (t1 = new PortableTextEditor({\n    editor\n  }), $[0] = editor, $[1] = t1) : t1 = $[1], t0 = t1;\n  const portableTextEditor = t0;\n  let t2;\n  $[2] !== portableTextEditor.change$ ? (t2 = (change) => {\n    portableTextEditor.change$.next(change);\n  }, $[2] = portableTextEditor.change$, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== editorActor || $[5] !== t2 ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RouteEventsToChanges, { editorActor, onChange: t2 }), $[4] = editorActor, $[5] = t2, $[6] = t3) : t3 = $[6];\n  let t4;\n  $[7] !== editorActor || $[8] !== slateEditor.instance ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Synchronizer, { editorActor, slateEditor: slateEditor.instance }), $[7] = editorActor, $[8] = slateEditor.instance, $[9] = t4) : t4 = $[9];\n  let t5;\n  $[10] !== editorActor || $[11] !== props.children ? (t5 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorSelectionProvider, { editorActor, children: props.children }), $[10] = editorActor, $[11] = props.children, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== portableTextEditor || $[14] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorContext.Provider, { value: portableTextEditor, children: t5 }), $[13] = portableTextEditor, $[14] = t5, $[15] = t6) : t6 = $[15];\n  let t7;\n  $[16] !== slateEditor.initialValue || $[17] !== slateEditor.instance || $[18] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_23__.Slate, { editor: slateEditor.instance, initialValue: slateEditor.initialValue, children: t6 }), $[16] = slateEditor.initialValue, $[17] = slateEditor.instance, $[18] = t6, $[19] = t7) : t7 = $[19];\n  let t8;\n  $[20] !== editorActor || $[21] !== t7 ? (t8 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditorActorContext.Provider, { value: editorActor, children: t7 }), $[20] = editorActor, $[21] = t7, $[22] = t8) : t8 = $[22];\n  let t9;\n  return $[23] !== editor || $[24] !== t3 || $[25] !== t4 || $[26] !== t8 ? (t9 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(EditorContext.Provider, { value: editor, children: [\n    t3,\n    t4,\n    t8\n  ] }), $[23] = editor, $[24] = t3, $[25] = t4, $[26] = t8, $[27] = t9) : t9 = $[27], t9;\n}\nfunction useEditor() {\n  const editor = react__WEBPACK_IMPORTED_MODULE_1__.useContext(EditorContext);\n  if (!editor)\n    throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n  return editor;\n}\nfunction EventListenerPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = useEditor(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_30__.useEffectEvent)(props.on);\n  let t0, t1;\n  return $[0] !== editor || $[1] !== on ? (t0 = () => {\n    const subscription = editor.on(\"*\", on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editor, on], $[0] = editor, $[1] = on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\n\n//# sourceMappingURL=plugin.event-listener.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvcGx1Z2luLmV2ZW50LWxpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQytEO0FBQ3hEO0FBQ007QUFDSTtBQUNIO0FBQzdCO0FBQzhJO0FBQ3JFO0FBQzdEO0FBQytFO0FBQzZDO0FBQzVIO0FBQ1k7QUFDbEI7QUFDbUI7QUFDSTtBQUNWO0FBQ1A7QUFDUjtBQUNnQjtBQUNWO0FBQ0c7QUFDNkI7QUFDVTtBQUNOO0FBQ3RCO0FBQ3JCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLGlDQUFpQztBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsMERBQVU7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRywyRUFBMkUsMERBQVU7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLCtCQUErQiwyREFBVztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0Esb0NBQW9DLDhDQUFTO0FBQzdDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0Es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QUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMENBQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx3Q0FBSTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLCtDQUErQywwQ0FBTTtBQUNyRCxpQ0FBaUMsd0NBQUk7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7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Q0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsT0FBTywwQ0FBTTtBQUNiLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscUJBQXFCLEtBQUs7QUFDL0M7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsSUFBSTtBQUNwQixPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLElBQUk7QUFDcEIsT0FBTztBQUNQO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLElBQUk7QUFDdEIsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5REFBQztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRyw2SUFBNkksZ0RBQVM7QUFDeko7QUFDQTtBQUNBLFlBQVkseURBQUM7QUFDYjtBQUNBO0FBQ0EsdUJBQXVCLGlFQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHLHlJQUF5SSxnREFBUztBQUNySjtBQUNBLHNCQUFzQixnREFBbUI7QUFDekM7QUFDQSxZQUFZLHlEQUFDO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsOERBQThELHNEQUFHLHlCQUF5QiwyQkFBMkI7QUFDckg7QUFDQSxnRkFBZ0Ysc0RBQUcsaUJBQWlCLGdEQUFnRDtBQUNwSjtBQUNBLDRFQUE0RSxzREFBRyx3Q0FBd0MsdUNBQXVDO0FBQzlKO0FBQ0EsdUVBQXVFLHNEQUFHLHVDQUF1Qyx5Q0FBeUM7QUFDMUo7QUFDQSwrR0FBK0csc0RBQUcsQ0FBQywrQ0FBSyxJQUFJLG9GQUFvRjtBQUNoTjtBQUNBLGdFQUFnRSxzREFBRyxnQ0FBZ0Msa0NBQWtDO0FBQ3JJO0FBQ0Esa0dBQWtHLHVEQUFJLDJCQUEyQjtBQUNqSTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGlCQUFpQiw2Q0FBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseURBQUMsZ0NBQWdDLGlFQUFjO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsK0ZBQStGLGdEQUFTO0FBQzNHO0FBd0JFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvcGx1Z2luLmV2ZW50LWxpc3RlbmVyLmpzPzI1OWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYyB9IGZyb20gXCJyZWFjdC1jb21waWxlci1ydW50aW1lXCI7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgc3RhcnRUcmFuc2l0aW9uLCBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUVmZmVjdEV2ZW50IH0gZnJvbSBcInVzZS1lZmZlY3QtZXZlbnRcIjtcbmltcG9ydCB7IGpzeCwganN4cywgRnJhZ21lbnQgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IHdpdGhSZWFjdCwgUmVhY3RFZGl0b3IsIFNsYXRlIH0gZnJvbSBcInNsYXRlLXJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlQWN0b3JSZWYgfSBmcm9tIFwiQHhzdGF0ZS9yZWFjdFwiO1xuaW1wb3J0IGRlYnVnJGYgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgeyBFZGl0b3IsIEVsZW1lbnQsIFJhbmdlLCBQb2ludCwgVGV4dCwgT3BlcmF0aW9uLCBUcmFuc2Zvcm1zLCBQYXRoLCBOb2RlLCBjcmVhdGVFZGl0b3IgYXMgY3JlYXRlRWRpdG9yJDEsIGRlbGV0ZUJhY2t3YXJkLCBkZWxldGVGb3J3YXJkLCBpbnNlcnRUZXh0IH0gZnJvbSBcInNsYXRlXCI7XG5pbXBvcnQgeyBzZXR1cCwgZW1pdCwgYXNzaWduLCBmcm9tQ2FsbGJhY2ssIGFzc2VydEV2ZW50LCBlbnF1ZXVlQWN0aW9ucywgY3JlYXRlQWN0b3IgfSBmcm9tIFwieHN0YXRlXCI7XG5pbXBvcnQgaXNFcXVhbCBmcm9tIFwibG9kYXNoL2lzRXF1YWwuanNcIjtcbmltcG9ydCB7IHVuc2V0LCBzZXQsIHNldElmTWlzc2luZywgaW5zZXJ0LCBkaWZmTWF0Y2hQYXRjaCBhcyBkaWZmTWF0Y2hQYXRjaCQxLCBhcHBseUFsbCB9IGZyb20gXCJAcG9ydGFibGV0ZXh0L3BhdGNoZXNcIjtcbmltcG9ydCB7IGRlZmluZVR5cGUsIGRlZmluZUZpZWxkLCBpc0tleVNlZ21lbnQsIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrLCBpc1BvcnRhYmxlVGV4dFNwYW4gYXMgaXNQb3J0YWJsZVRleHRTcGFuJDEsIGlzUG9ydGFibGVUZXh0TGlzdEJsb2NrIH0gZnJvbSBcIkBzYW5pdHkvdHlwZXNcIjtcbmltcG9ydCBmbGF0dGVuIGZyb20gXCJsb2Rhc2gvZmxhdHRlbi5qc1wiO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSBcImxvZGFzaC9pc1BsYWluT2JqZWN0LmpzXCI7XG5pbXBvcnQgdW5pcSBmcm9tIFwibG9kYXNoL3VuaXEuanNcIjtcbmltcG9ydCB7IHNsaWNlQmxvY2tzIH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmltcG9ydCB7IGh0bWxUb0Jsb2NrcyB9IGZyb20gXCJAcG9ydGFibGV0ZXh0L2Jsb2NrLXRvb2xzXCI7XG5pbXBvcnQgeyB0b0hUTUwgfSBmcm9tIFwiQHBvcnRhYmxldGV4dC90by1odG1sXCI7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiQHNhbml0eS9zY2hlbWFcIjtcbmltcG9ydCBnZXQgZnJvbSBcImxvZGFzaC9nZXQuanNcIjtcbmltcG9ydCBpc1VuZGVmaW5lZCBmcm9tIFwibG9kYXNoL2lzVW5kZWZpbmVkLmpzXCI7XG5pbXBvcnQgb21pdEJ5IGZyb20gXCJsb2Rhc2gvb21pdEJ5LmpzXCI7XG5pbXBvcnQgc3RhcnRDYXNlIGZyb20gXCJsb2Rhc2guc3RhcnRjYXNlXCI7XG5pbXBvcnQgeyBjcmVhdGVHdWFyZHMgfSBmcm9tIFwiLi9zZWxlY3Rvci5pcy1hdC10aGUtc3RhcnQtb2YtYmxvY2suanNcIjtcbmltcG9ydCB7IGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQgfSBmcm9tIFwiLi91dGlsLmlzLWVtcHR5LXRleHQtYmxvY2suanNcIjtcbmltcG9ydCB7IGNvcmVCZWhhdmlvcnMsIGlzQ3VzdG9tQmVoYXZpb3JFdmVudCB9IGZyb20gXCIuL2JlaGF2aW9yLmNvcmUuanNcIjtcbmltcG9ydCBnZXRSYW5kb21WYWx1ZXMgZnJvbSBcImdldC1yYW5kb20tdmFsdWVzLWVzbVwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XG5mdW5jdGlvbiBjcmVhdGVFZGl0b3JTY2hlbWEocG9ydGFibGVUZXh0VHlwZSkge1xuICBpZiAoIXBvcnRhYmxlVGV4dFR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyYW1ldGVyICdwb3J0YWJsZXRleHRUeXBlJyBtaXNzaW5nIChyZXF1aXJlZClcIik7XG4gIGNvbnN0IGJsb2NrVHlwZSA9IHBvcnRhYmxlVGV4dFR5cGUub2Y/LmZpbmQoZmluZEJsb2NrVHlwZSk7XG4gIGlmICghYmxvY2tUeXBlKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkJsb2NrIHR5cGUgaXMgbm90IGRlZmluZWQgaW4gdGhpcyBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3QgY2hpbGRyZW5GaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGZpZWxkKSA9PiBmaWVsZC5uYW1lID09PSBcImNoaWxkcmVuXCIpO1xuICBpZiAoIWNoaWxkcmVuRmllbGQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hpbGRyZW4gZmllbGQgZm9yIGJsb2NrIHR5cGUgZm91bmQgaW4gc2NoZW1hIChyZXF1aXJlZClcIik7XG4gIGNvbnN0IG9mVHlwZSA9IGNoaWxkcmVuRmllbGQudHlwZS5vZjtcbiAgaWYgKCFvZlR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWQgdHlwZXMgZm9yIGJsb2NrIGNoaWxkcmVuIG5vdCBmb3VuZCBpbiBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3Qgc3BhblR5cGUgPSBvZlR5cGUuZmluZCgobWVtYmVyVHlwZSkgPT4gbWVtYmVyVHlwZS5uYW1lID09PSBcInNwYW5cIik7XG4gIGlmICghc3BhblR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3BhbiB0eXBlIG5vdCBmb3VuZCBpbiBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3QgaW5saW5lT2JqZWN0VHlwZXMgPSBvZlR5cGUuZmlsdGVyKChtZW1iZXJUeXBlKSA9PiBtZW1iZXJUeXBlLm5hbWUgIT09IFwic3BhblwiKSB8fCBbXSwgYmxvY2tPYmplY3RUeXBlcyA9IHBvcnRhYmxlVGV4dFR5cGUub2Y/LmZpbHRlcigoZmllbGQpID0+IGZpZWxkLm5hbWUgIT09IGJsb2NrVHlwZS5uYW1lKSB8fCBbXTtcbiAgcmV0dXJuIHtcbiAgICBzdHlsZXM6IHJlc29sdmVFbmFibGVkU3R5bGVzKGJsb2NrVHlwZSksXG4gICAgZGVjb3JhdG9yczogcmVzb2x2ZUVuYWJsZWREZWNvcmF0b3JzKHNwYW5UeXBlKSxcbiAgICBsaXN0czogcmVzb2x2ZUVuYWJsZWRMaXN0SXRlbXMoYmxvY2tUeXBlKSxcbiAgICBibG9jazogYmxvY2tUeXBlLFxuICAgIHNwYW46IHNwYW5UeXBlLFxuICAgIHBvcnRhYmxlVGV4dDogcG9ydGFibGVUZXh0VHlwZSxcbiAgICBpbmxpbmVPYmplY3RzOiBpbmxpbmVPYmplY3RUeXBlcyxcbiAgICBibG9ja09iamVjdHM6IGJsb2NrT2JqZWN0VHlwZXMsXG4gICAgYW5ub3RhdGlvbnM6IHNwYW5UeXBlLmFubm90YXRpb25zXG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlRW5hYmxlZFN0eWxlcyhibG9ja1R5cGUpIHtcbiAgY29uc3Qgc3R5bGVGaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGJ0RmllbGQpID0+IGJ0RmllbGQubmFtZSA9PT0gXCJzdHlsZVwiKTtcbiAgaWYgKCFzdHlsZUZpZWxkKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkEgZmllbGQgd2l0aCBuYW1lICdzdHlsZScgaXMgbm90IGRlZmluZWQgaW4gdGhlIGJsb2NrIHR5cGUgKHJlcXVpcmVkKS5cIik7XG4gIGNvbnN0IHRleHRTdHlsZXMgPSBzdHlsZUZpZWxkLnR5cGUub3B0aW9ucz8ubGlzdCAmJiBzdHlsZUZpZWxkLnR5cGUub3B0aW9ucy5saXN0Py5maWx0ZXIoKHN0eWxlKSA9PiBzdHlsZS52YWx1ZSk7XG4gIGlmICghdGV4dFN0eWxlcyB8fCB0ZXh0U3R5bGVzLmxlbmd0aCA9PT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUgZmllbGRzIG5lZWQgYXQgbGVhc3Qgb25lIHN0eWxlIGRlZmluZWQuIEkuZToge3RpdGxlOiAnTm9ybWFsJywgdmFsdWU6ICdub3JtYWwnfS5cIik7XG4gIHJldHVybiB0ZXh0U3R5bGVzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVuYWJsZWREZWNvcmF0b3JzKHNwYW5UeXBlKSB7XG4gIHJldHVybiBzcGFuVHlwZS5kZWNvcmF0b3JzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVuYWJsZWRMaXN0SXRlbXMoYmxvY2tUeXBlKSB7XG4gIGNvbnN0IGxpc3RGaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGJ0RmllbGQpID0+IGJ0RmllbGQubmFtZSA9PT0gXCJsaXN0SXRlbVwiKTtcbiAgaWYgKCFsaXN0RmllbGQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBmaWVsZCB3aXRoIG5hbWUgJ2xpc3RJdGVtJyBpcyBub3QgZGVmaW5lZCBpbiB0aGUgYmxvY2sgdHlwZSAocmVxdWlyZWQpLlwiKTtcbiAgY29uc3QgbGlzdEl0ZW1zID0gbGlzdEZpZWxkLnR5cGUub3B0aW9ucz8ubGlzdCAmJiBsaXN0RmllbGQudHlwZS5vcHRpb25zLmxpc3QuZmlsdGVyKChsaXN0KSA9PiBsaXN0LnZhbHVlKTtcbiAgaWYgKCFsaXN0SXRlbXMpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGxpc3QgZmllbGQgbmVlZCBhdCBsZWFzdCB0byBiZSBhbiBlbXB0eSBhcnJheVwiKTtcbiAgcmV0dXJuIGxpc3RJdGVtcztcbn1cbmZ1bmN0aW9uIGZpbmRCbG9ja1R5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZS50eXBlID8gZmluZEJsb2NrVHlwZSh0eXBlLnR5cGUpIDogdHlwZS5uYW1lID09PSBcImJsb2NrXCIgPyB0eXBlIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGRlZmluZVNjaGVtYShkZWZpbml0aW9uKSB7XG4gIHJldHVybiBkZWZpbml0aW9uO1xufVxuZnVuY3Rpb24gY29tcGlsZVNjaGVtYURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBibG9ja09iamVjdHMgPSBkZWZpbml0aW9uPy5ibG9ja09iamVjdHM/Lm1hcCgoYmxvY2tPYmplY3QpID0+IGRlZmluZVR5cGUoe1xuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgLy8gVmVyeSBuYWl2ZSB3YXkgdG8gd29yayBhcm91bmQgYFNhbml0eVNjaGVtYS5jb21waWxlYCBhZGRpbmcgZGVmYXVsdFxuICAgIC8vIGZpZWxkcyB0byBvYmplY3RzIHdpdGggdGhlIG5hbWUgYGltYWdlYFxuICAgIG5hbWU6IGJsb2NrT2JqZWN0Lm5hbWUgPT09IFwiaW1hZ2VcIiA/IFwidG1wLWltYWdlXCIgOiBibG9ja09iamVjdC5uYW1lLFxuICAgIHRpdGxlOiBibG9ja09iamVjdC5uYW1lID09PSBcImltYWdlXCIgJiYgYmxvY2tPYmplY3QudGl0bGUgPT09IHZvaWQgMCA/IFwiSW1hZ2VcIiA6IGJsb2NrT2JqZWN0LnRpdGxlLFxuICAgIGZpZWxkczogW11cbiAgfSkpID8/IFtdLCBpbmxpbmVPYmplY3RzID0gZGVmaW5pdGlvbj8uaW5saW5lT2JqZWN0cz8ubWFwKChpbmxpbmVPYmplY3QpID0+IGRlZmluZVR5cGUoe1xuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgbmFtZTogaW5saW5lT2JqZWN0Lm5hbWUsXG4gICAgdGl0bGU6IGlubGluZU9iamVjdC50aXRsZSxcbiAgICBmaWVsZHM6IFtdXG4gIH0pKSA/PyBbXSwgcG9ydGFibGVUZXh0U2NoZW1hID0gZGVmaW5lRmllbGQoe1xuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBuYW1lOiBcInBvcnRhYmxlLXRleHRcIixcbiAgICBvZjogWy4uLmJsb2NrT2JqZWN0cy5tYXAoKGJsb2NrT2JqZWN0KSA9PiAoe1xuICAgICAgdHlwZTogYmxvY2tPYmplY3QubmFtZVxuICAgIH0pKSwge1xuICAgICAgdHlwZTogXCJibG9ja1wiLFxuICAgICAgbmFtZTogXCJibG9ja1wiLFxuICAgICAgb2Y6IGlubGluZU9iamVjdHMubWFwKChpbmxpbmVPYmplY3QpID0+ICh7XG4gICAgICAgIHR5cGU6IGlubGluZU9iamVjdC5uYW1lXG4gICAgICB9KSksXG4gICAgICBtYXJrczoge1xuICAgICAgICBkZWNvcmF0b3JzOiBkZWZpbml0aW9uPy5kZWNvcmF0b3JzPy5tYXAoKGRlY29yYXRvcikgPT4gKHtcbiAgICAgICAgICB0aXRsZTogZGVjb3JhdG9yLnRpdGxlID8/IHN0YXJ0Q2FzZShkZWNvcmF0b3IubmFtZSksXG4gICAgICAgICAgdmFsdWU6IGRlY29yYXRvci5uYW1lXG4gICAgICAgIH0pKSA/PyBbXSxcbiAgICAgICAgYW5ub3RhdGlvbnM6IGRlZmluaXRpb24/LmFubm90YXRpb25zPy5tYXAoKGFubm90YXRpb24pID0+ICh7XG4gICAgICAgICAgbmFtZTogYW5ub3RhdGlvbi5uYW1lLFxuICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgdGl0bGU6IGFubm90YXRpb24udGl0bGVcbiAgICAgICAgfSkpID8/IFtdXG4gICAgICB9LFxuICAgICAgbGlzdHM6IGRlZmluaXRpb24/Lmxpc3RzPy5tYXAoKGxpc3QpID0+ICh7XG4gICAgICAgIHZhbHVlOiBsaXN0Lm5hbWUsXG4gICAgICAgIHRpdGxlOiBsaXN0LnRpdGxlID8/IHN0YXJ0Q2FzZShsaXN0Lm5hbWUpXG4gICAgICB9KSkgPz8gW10sXG4gICAgICBzdHlsZXM6IGRlZmluaXRpb24/LnN0eWxlcz8ubWFwKChzdHlsZSkgPT4gKHtcbiAgICAgICAgdmFsdWU6IHN0eWxlLm5hbWUsXG4gICAgICAgIHRpdGxlOiBzdHlsZS50aXRsZSA/PyBzdGFydENhc2Uoc3R5bGUubmFtZSlcbiAgICAgIH0pKSA/PyBbXVxuICAgIH1dXG4gIH0pLCBzY2hlbWEgPSBTY2hlbWEuY29tcGlsZSh7XG4gICAgdHlwZXM6IFtwb3J0YWJsZVRleHRTY2hlbWEsIC4uLmJsb2NrT2JqZWN0cywgLi4uaW5saW5lT2JqZWN0c11cbiAgfSkuZ2V0KFwicG9ydGFibGUtdGV4dFwiKSwgcHRlU2NoZW1hID0gY3JlYXRlRWRpdG9yU2NoZW1hKHNjaGVtYSk7XG4gIHJldHVybiB7XG4gICAgLi4ucHRlU2NoZW1hLFxuICAgIGJsb2NrT2JqZWN0czogcHRlU2NoZW1hLmJsb2NrT2JqZWN0cy5tYXAoKGJsb2NrT2JqZWN0KSA9PiBibG9ja09iamVjdC5uYW1lID09PSBcInRtcC1pbWFnZVwiID8ge1xuICAgICAgLi4uYmxvY2tPYmplY3QsXG4gICAgICBuYW1lOiBcImltYWdlXCIsXG4gICAgICB0eXBlOiB7XG4gICAgICAgIC4uLmJsb2NrT2JqZWN0LnR5cGUsXG4gICAgICAgIG5hbWU6IFwiaW1hZ2VcIlxuICAgICAgfVxuICAgIH0gOiBibG9ja09iamVjdClcbiAgfTtcbn1cbmNvbnN0IHJvb3ROYW1lID0gXCJzYW5pdHktcHRlOlwiO1xuZGVidWckZihyb290TmFtZSk7XG5mdW5jdGlvbiBkZWJ1Z1dpdGhOYW1lKG5hbWUpIHtcbiAgY29uc3QgbmFtZXNwYWNlID0gYCR7cm9vdE5hbWV9JHtuYW1lfWA7XG4gIHJldHVybiBkZWJ1ZyRmICYmIGRlYnVnJGYuZW5hYmxlZChuYW1lc3BhY2UpID8gZGVidWckZihuYW1lc3BhY2UpIDogZGVidWckZihyb290TmFtZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVLZXllZFBhdGgocG9pbnQsIHZhbHVlLCB0eXBlcykge1xuICBjb25zdCBibG9ja1BhdGggPSBbcG9pbnQucGF0aFswXV07XG4gIGlmICghdmFsdWUpXG4gICAgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGJsb2NrID0gdmFsdWVbYmxvY2tQYXRoWzBdXTtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3Qga2V5ZWRCbG9ja1BhdGggPSBbe1xuICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgfV07XG4gIGlmIChibG9jay5fdHlwZSAhPT0gdHlwZXMuYmxvY2submFtZSlcbiAgICByZXR1cm4ga2V5ZWRCbG9ja1BhdGg7XG4gIGxldCBrZXllZENoaWxkUGF0aDtcbiAgY29uc3QgY2hpbGRQYXRoID0gcG9pbnQucGF0aC5zbGljZSgwLCAyKSwgY2hpbGQgPSBBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSAmJiBibG9jay5jaGlsZHJlbltjaGlsZFBhdGhbMV1dO1xuICByZXR1cm4gY2hpbGQgJiYgKGtleWVkQ2hpbGRQYXRoID0gW1wiY2hpbGRyZW5cIiwge1xuICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgfV0pLCBrZXllZENoaWxkUGF0aCA/IFsuLi5rZXllZEJsb2NrUGF0aCwgLi4ua2V5ZWRDaGlsZFBhdGhdIDoga2V5ZWRCbG9ja1BhdGg7XG59XG5mdW5jdGlvbiB0b1NsYXRlUGF0aChwYXRoLCBlZGl0b3IpIHtcbiAgaWYgKCFlZGl0b3IpXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICBhdDogW10sXG4gICAgbWF0Y2g6IChuKSA9PiBpc0tleVNlZ21lbnQocGF0aFswXSkgJiYgbi5fa2V5ID09PSBwYXRoWzBdLl9rZXlcbiAgfSkpWzBdIHx8IFt2b2lkIDAsIHZvaWQgMF07XG4gIGlmICghYmxvY2sgfHwgIUVsZW1lbnQuaXNFbGVtZW50KGJsb2NrKSlcbiAgICByZXR1cm4gW107XG4gIGlmIChlZGl0b3IuaXNWb2lkKGJsb2NrKSlcbiAgICByZXR1cm4gW2Jsb2NrUGF0aFswXSwgMF07XG4gIGNvbnN0IGNoaWxkUGF0aCA9IFtwYXRoWzJdXSwgY2hpbGRJbmRleCA9IGJsb2NrLmNoaWxkcmVuLmZpbmRJbmRleCgoY2hpbGQpID0+IGlzRXF1YWwoW3tcbiAgICBfa2V5OiBjaGlsZC5fa2V5XG4gIH1dLCBjaGlsZFBhdGgpKTtcbiAgaWYgKGNoaWxkSW5kZXggPj0gMCAmJiBibG9jay5jaGlsZHJlbltjaGlsZEluZGV4XSkge1xuICAgIGNvbnN0IGNoaWxkID0gYmxvY2suY2hpbGRyZW5bY2hpbGRJbmRleF07XG4gICAgcmV0dXJuIEVsZW1lbnQuaXNFbGVtZW50KGNoaWxkKSAmJiBlZGl0b3IuaXNWb2lkKGNoaWxkKSA/IGJsb2NrUGF0aC5jb25jYXQoY2hpbGRJbmRleCkuY29uY2F0KDApIDogYmxvY2tQYXRoLmNvbmNhdChjaGlsZEluZGV4KTtcbiAgfVxuICByZXR1cm4gW2Jsb2NrUGF0aFswXSwgMF07XG59XG5mdW5jdGlvbiB0b1BvcnRhYmxlVGV4dFJhbmdlKHZhbHVlLCByYW5nZSwgdHlwZXMpIHtcbiAgaWYgKCFyYW5nZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgbGV0IGFuY2hvciA9IG51bGwsIGZvY3VzID0gbnVsbDtcbiAgY29uc3QgYW5jaG9yUGF0aCA9IHJhbmdlLmFuY2hvciAmJiBjcmVhdGVLZXllZFBhdGgocmFuZ2UuYW5jaG9yLCB2YWx1ZSwgdHlwZXMpO1xuICBhbmNob3JQYXRoICYmIHJhbmdlLmFuY2hvciAmJiAoYW5jaG9yID0ge1xuICAgIHBhdGg6IGFuY2hvclBhdGgsXG4gICAgb2Zmc2V0OiByYW5nZS5hbmNob3Iub2Zmc2V0XG4gIH0pO1xuICBjb25zdCBmb2N1c1BhdGggPSByYW5nZS5mb2N1cyAmJiBjcmVhdGVLZXllZFBhdGgocmFuZ2UuZm9jdXMsIHZhbHVlLCB0eXBlcyk7XG4gIGZvY3VzUGF0aCAmJiByYW5nZS5mb2N1cyAmJiAoZm9jdXMgPSB7XG4gICAgcGF0aDogZm9jdXNQYXRoLFxuICAgIG9mZnNldDogcmFuZ2UuZm9jdXMub2Zmc2V0XG4gIH0pO1xuICBjb25zdCBiYWNrd2FyZCA9ICEhKFJhbmdlLmlzUmFuZ2UocmFuZ2UpICYmIFJhbmdlLmlzQmFja3dhcmQocmFuZ2UpKTtcbiAgcmV0dXJuIGFuY2hvciAmJiBmb2N1cyA/IHtcbiAgICBhbmNob3IsXG4gICAgZm9jdXMsXG4gICAgYmFja3dhcmRcbiAgfSA6IG51bGw7XG59XG5mdW5jdGlvbiB0b1NsYXRlUmFuZ2Uoc2VsZWN0aW9uLCBlZGl0b3IpIHtcbiAgaWYgKCFzZWxlY3Rpb24gfHwgIWVkaXRvcilcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgYW5jaG9yID0ge1xuICAgIHBhdGg6IHRvU2xhdGVQYXRoKHNlbGVjdGlvbi5hbmNob3IucGF0aCwgZWRpdG9yKSxcbiAgICBvZmZzZXQ6IHNlbGVjdGlvbi5hbmNob3Iub2Zmc2V0XG4gIH0sIGZvY3VzID0ge1xuICAgIHBhdGg6IHRvU2xhdGVQYXRoKHNlbGVjdGlvbi5mb2N1cy5wYXRoLCBlZGl0b3IpLFxuICAgIG9mZnNldDogc2VsZWN0aW9uLmZvY3VzLm9mZnNldFxuICB9O1xuICByZXR1cm4gZm9jdXMucGF0aC5sZW5ndGggPT09IDAgfHwgYW5jaG9yLnBhdGgubGVuZ3RoID09PSAwID8gbnVsbCA6IGZvY3VzID8ge1xuICAgIGFuY2hvcixcbiAgICBmb2N1c1xuICB9IDogbnVsbDtcbn1cbmZ1bmN0aW9uIG1vdmVSYW5nZUJ5T3BlcmF0aW9uKHJhbmdlLCBvcGVyYXRpb24pIHtcbiAgY29uc3QgYW5jaG9yID0gUG9pbnQudHJhbnNmb3JtKHJhbmdlLmFuY2hvciwgb3BlcmF0aW9uKSwgZm9jdXMgPSBQb2ludC50cmFuc2Zvcm0ocmFuZ2UuZm9jdXMsIG9wZXJhdGlvbik7XG4gIHJldHVybiBhbmNob3IgPT09IG51bGwgfHwgZm9jdXMgPT09IG51bGwgPyBudWxsIDogUG9pbnQuZXF1YWxzKGFuY2hvciwgcmFuZ2UuYW5jaG9yKSAmJiBQb2ludC5lcXVhbHMoZm9jdXMsIHJhbmdlLmZvY3VzKSA/IHJhbmdlIDoge1xuICAgIGFuY2hvcixcbiAgICBmb2N1c1xuICB9O1xufVxuY29uc3QgVk9JRF9DSElMRF9LRVkgPSBcInZvaWQtY2hpbGRcIjtcbmZ1bmN0aW9uIGtlZXBPYmplY3RFcXVhbGl0eShvYmplY3QsIGtleU1hcCkge1xuICBjb25zdCB2YWx1ZSA9IGtleU1hcFtvYmplY3QuX2tleV07XG4gIHJldHVybiB2YWx1ZSAmJiBpc0VxdWFsKG9iamVjdCwgdmFsdWUpID8gdmFsdWUgOiAoa2V5TWFwW29iamVjdC5fa2V5XSA9IG9iamVjdCwgb2JqZWN0KTtcbn1cbmZ1bmN0aW9uIHRvU2xhdGVWYWx1ZSh2YWx1ZSwge1xuICBzY2hlbWFUeXBlc1xufSwga2V5TWFwID0ge30pIHtcbiAgcmV0dXJuIHZhbHVlICYmIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKChibG9jaykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIF90eXBlLFxuICAgICAgX2tleSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gYmxvY2ssIHZvaWRDaGlsZHJlbiA9IFt7XG4gICAgICBfa2V5OiBWT0lEX0NISUxEX0tFWSxcbiAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgIHRleHQ6IFwiXCIsXG4gICAgICBtYXJrczogW11cbiAgICB9XTtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2suX3R5cGUgPT09IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUpIHtcbiAgICAgIGNvbnN0IHRleHRCbG9jayA9IGJsb2NrO1xuICAgICAgbGV0IGhhc0lubGluZXMgPSAhMTtcbiAgICAgIGNvbnN0IGhhc01pc3NpbmdTdHlsZSA9IHR5cGVvZiB0ZXh0QmxvY2suc3R5bGUgPiBcInVcIiwgaGFzTWlzc2luZ01hcmtEZWZzID0gdHlwZW9mIHRleHRCbG9jay5tYXJrRGVmcyA+IFwidVwiLCBoYXNNaXNzaW5nQ2hpbGRyZW4gPSB0eXBlb2YgdGV4dEJsb2NrLmNoaWxkcmVuID4gXCJ1XCIsIGNoaWxkcmVuID0gKHRleHRCbG9jay5jaGlsZHJlbiB8fCBbXSkubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgX3R5cGU6IGNUeXBlLFxuICAgICAgICAgIF9rZXk6IGNLZXksXG4gICAgICAgICAgLi4uY1Jlc3RcbiAgICAgICAgfSA9IGNoaWxkO1xuICAgICAgICByZXR1cm4gY1R5cGUgIT09IFwic3BhblwiID8gKGhhc0lubGluZXMgPSAhMCwga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgICAgICBfdHlwZTogY1R5cGUsXG4gICAgICAgICAgX2tleTogY0tleSxcbiAgICAgICAgICBjaGlsZHJlbjogdm9pZENoaWxkcmVuLFxuICAgICAgICAgIHZhbHVlOiBjUmVzdCxcbiAgICAgICAgICBfX2lubGluZTogITBcbiAgICAgICAgfSwga2V5TWFwKSkgOiBjaGlsZDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICFoYXNNaXNzaW5nU3R5bGUgJiYgIWhhc01pc3NpbmdNYXJrRGVmcyAmJiAhaGFzTWlzc2luZ0NoaWxkcmVuICYmICFoYXNJbmxpbmVzICYmIEVsZW1lbnQuaXNFbGVtZW50KGJsb2NrKSA/IGJsb2NrIDogKGhhc01pc3NpbmdTdHlsZSAmJiAocmVzdC5zdHlsZSA9IHNjaGVtYVR5cGVzLnN0eWxlc1swXS52YWx1ZSksIGtlZXBPYmplY3RFcXVhbGl0eSh7XG4gICAgICAgIF90eXBlLFxuICAgICAgICBfa2V5LFxuICAgICAgICAuLi5yZXN0LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgfSwga2V5TWFwKSk7XG4gICAgfVxuICAgIHJldHVybiBrZWVwT2JqZWN0RXF1YWxpdHkoe1xuICAgICAgX3R5cGUsXG4gICAgICBfa2V5LFxuICAgICAgY2hpbGRyZW46IHZvaWRDaGlsZHJlbixcbiAgICAgIHZhbHVlOiByZXN0XG4gICAgfSwga2V5TWFwKTtcbiAgfSkgOiBbXTtcbn1cbmZ1bmN0aW9uIGZyb21TbGF0ZVZhbHVlKHZhbHVlLCB0ZXh0QmxvY2tUeXBlLCBrZXlNYXAgPSB7fSkge1xuICByZXR1cm4gdmFsdWUubWFwKChibG9jaykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIF9rZXksXG4gICAgICBfdHlwZVxuICAgIH0gPSBibG9jaztcbiAgICBpZiAoIV9rZXkgfHwgIV90eXBlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGEgdmFsaWQgYmxvY2tcIik7XG4gICAgaWYgKF90eXBlID09PSB0ZXh0QmxvY2tUeXBlICYmIFwiY2hpbGRyZW5cIiBpbiBibG9jayAmJiBBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSAmJiBfa2V5KSB7XG4gICAgICBsZXQgaGFzSW5saW5lcyA9ICExO1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBfdHlwZTogX2NUeXBlXG4gICAgICAgIH0gPSBjaGlsZDtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBjaGlsZCAmJiBfY1R5cGUgIT09IFwic3BhblwiKSB7XG4gICAgICAgICAgaGFzSW5saW5lcyA9ICEwO1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgICAgX2tleTogayxcbiAgICAgICAgICAgIF90eXBlOiB0LFxuICAgICAgICAgICAgX19pbmxpbmU6IF9pLFxuICAgICAgICAgICAgY2hpbGRyZW46IF9jLFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH0gPSBjaGlsZDtcbiAgICAgICAgICByZXR1cm4ga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAuLi52LFxuICAgICAgICAgICAgX2tleTogayxcbiAgICAgICAgICAgIF90eXBlOiB0XG4gICAgICAgICAgfSwga2V5TWFwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBoYXNJbmxpbmVzID8ga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgICAgLi4uYmxvY2ssXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBfa2V5LFxuICAgICAgICBfdHlwZVxuICAgICAgfSwga2V5TWFwKSA6IGJsb2NrO1xuICAgIH1cbiAgICBjb25zdCBibG9ja1ZhbHVlID0gXCJ2YWx1ZVwiIGluIGJsb2NrICYmIGJsb2NrLnZhbHVlO1xuICAgIHJldHVybiBrZWVwT2JqZWN0RXF1YWxpdHkoe1xuICAgICAgX2tleSxcbiAgICAgIF90eXBlLFxuICAgICAgLi4udHlwZW9mIGJsb2NrVmFsdWUgPT0gXCJvYmplY3RcIiA/IGJsb2NrVmFsdWUgOiB7fVxuICAgIH0sIGtleU1hcCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNFcXVhbFRvRW1wdHlFZGl0b3IoY2hpbGRyZW4sIHNjaGVtYVR5cGVzKSB7XG4gIHJldHVybiBjaGlsZHJlbiA9PT0gdm9pZCAwIHx8IGNoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCB8fCBjaGlsZHJlbiAmJiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgRWxlbWVudC5pc0VsZW1lbnQoY2hpbGRyZW5bMF0pICYmIGNoaWxkcmVuWzBdLl90eXBlID09PSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lICYmIFwic3R5bGVcIiBpbiBjaGlsZHJlblswXSAmJiBjaGlsZHJlblswXS5zdHlsZSA9PT0gc2NoZW1hVHlwZXMuc3R5bGVzWzBdLnZhbHVlICYmICEoXCJsaXN0SXRlbVwiIGluIGNoaWxkcmVuWzBdKSAmJiBBcnJheS5pc0FycmF5KGNoaWxkcmVuWzBdLmNoaWxkcmVuKSAmJiBjaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgVGV4dC5pc1RleHQoY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0pICYmIGNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLl90eXBlID09PSBcInNwYW5cIiAmJiAhY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0ubWFya3M/LmpvaW4oXCJcIikgJiYgY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0udGV4dCA9PT0gXCJcIjtcbn1cbmNvbnN0IElTX1BST0NFU1NJTkdfUkVNT1RFX0NIQU5HRVMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgSVNfRFJBR0dJTkcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgSVNfRFJBR0dJTkdfQkxPQ0tfRUxFTUVOVCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBJU19EUkFHR0lOR19FTEVNRU5UX1RBUkdFVCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBJU19EUkFHR0lOR19CTE9DS19UQVJHRVRfUE9TSVRJT04gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgS0VZX1RPX1NMQVRFX0VMRU1FTlQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBQb3J0YWJsZVRleHRFZGl0b3JDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKSwgdXNlUG9ydGFibGVUZXh0RWRpdG9yID0gKCkgPT4ge1xuICBjb25zdCBlZGl0b3IgPSB1c2VDb250ZXh0KFBvcnRhYmxlVGV4dEVkaXRvckNvbnRleHQpO1xuICBpZiAoIWVkaXRvcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYHVzZVBvcnRhYmxlVGV4dEVkaXRvcmAgaG9vayBtdXN0IGJlIHVzZWQgaW5zaWRlIHRoZSA8UG9ydGFibGVUZXh0RWRpdG9yPiBjb21wb25lbnQncyBjb250ZXh0LlwiKTtcbiAgcmV0dXJuIGVkaXRvcjtcbn07XG5mdW5jdGlvbiBjb21waWxlVHlwZShyYXdUeXBlKSB7XG4gIHJldHVybiBTY2hlbWEuY29tcGlsZSh7XG4gICAgbmFtZTogXCJibG9ja1R5cGVTY2hlbWFcIixcbiAgICB0eXBlczogW3Jhd1R5cGVdXG4gIH0pLmdldChyYXdUeXBlLm5hbWUpO1xufVxuY29uc3QgRkxVU0hfUEFUQ0hFU19USFJPVFRMRURfTVMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJ0ZXN0XCIgPyA1MDAgOiAxZTMsIG11dGF0aW9uTWFjaGluZSA9IHNldHVwKHtcbiAgdHlwZXM6IHtcbiAgICBjb250ZXh0OiB7fSxcbiAgICBldmVudHM6IHt9LFxuICAgIGlucHV0OiB7fSxcbiAgICBlbWl0dGVkOiB7fVxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgXCJlbWl0IGhhcyBwZW5kaW5nIHBhdGNoZXNcIjogZW1pdCh7XG4gICAgICB0eXBlOiBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIlxuICAgIH0pLFxuICAgIFwiZW1pdCBtdXRhdGlvblwiOiBlbWl0KCh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gKHtcbiAgICAgIHR5cGU6IFwibXV0YXRpb25cIixcbiAgICAgIHBhdGNoZXM6IGNvbnRleHQucGVuZGluZ1BhdGNoZXMsXG4gICAgICBzbmFwc2hvdDogZnJvbVNsYXRlVmFsdWUoY29udGV4dC5zbGF0ZUVkaXRvci5jaGlsZHJlbiwgY29udGV4dC5zY2hlbWEuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGNvbnRleHQuc2xhdGVFZGl0b3IpKVxuICAgIH0pKSxcbiAgICBcImNsZWFyIHBlbmRpbmcgcGF0Y2hlc1wiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ1BhdGNoZXM6IFtdXG4gICAgfSksXG4gICAgXCJkZWZlciBwYXRjaFwiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ1BhdGNoZXM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBbLi4uY29udGV4dC5wZW5kaW5nUGF0Y2hlcywgZXZlbnQucGF0Y2hdXG4gICAgfSlcbiAgfSxcbiAgZ3VhcmRzOiB7XG4gICAgXCJzbGF0ZSBpcyBub3JtYWxpemluZ1wiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+IEVkaXRvci5pc05vcm1hbGl6aW5nKGNvbnRleHQuc2xhdGVFZGl0b3IpXG4gIH1cbn0pLmNyZWF0ZU1hY2hpbmUoe1xuICBpZDogXCJtdXRhdGlvblwiLFxuICBjb250ZXh0OiAoe1xuICAgIGlucHV0XG4gIH0pID0+ICh7XG4gICAgcGVuZGluZ1BhdGNoZXM6IFtdLFxuICAgIHNjaGVtYTogaW5wdXQuc2NoZW1hLFxuICAgIHNsYXRlRWRpdG9yOiBpbnB1dC5zbGF0ZUVkaXRvclxuICB9KSxcbiAgaW5pdGlhbDogXCJpZGxlXCIsXG4gIHN0YXRlczoge1xuICAgIGlkbGU6IHtcbiAgICAgIG9uOiB7XG4gICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgYWN0aW9uczogW1wiZGVmZXIgcGF0Y2hcIiwgXCJlbWl0IGhhcyBwZW5kaW5nIHBhdGNoZXNcIl0sXG4gICAgICAgICAgdGFyZ2V0OiBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIjoge1xuICAgICAgYWZ0ZXI6IHtcbiAgICAgICAgW0ZMVVNIX1BBVENIRVNfVEhST1RUTEVEX01TXTogW3tcbiAgICAgICAgICBndWFyZDogXCJzbGF0ZSBpcyBub3JtYWxpemluZ1wiLFxuICAgICAgICAgIHRhcmdldDogXCJpZGxlXCIsXG4gICAgICAgICAgYWN0aW9uczogW1wiZW1pdCBtdXRhdGlvblwiLCBcImNsZWFyIHBlbmRpbmcgcGF0Y2hlc1wiXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgcmVlbnRlcjogITBcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBwYXRjaDoge1xuICAgICAgICAgIGFjdGlvbnM6IFtcImRlZmVyIHBhdGNoXCJdLFxuICAgICAgICAgIHJlZW50ZXI6ICEwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZSh2YWx1ZSwgdHlwZXMsIGtleUdlbmVyYXRvcikge1xuICBsZXQgcmVzb2x1dGlvbiA9IG51bGwsIHZhbGlkID0gITA7XG4gIGNvbnN0IHZhbGlkQ2hpbGRUeXBlcyA9IFt0eXBlcy5zcGFuLm5hbWUsIC4uLnR5cGVzLmlubGluZU9iamVjdHMubWFwKCh0KSA9PiB0Lm5hbWUpXSwgdmFsaWRCbG9ja1R5cGVzID0gW3R5cGVzLmJsb2NrLm5hbWUsIC4uLnR5cGVzLmJsb2NrT2JqZWN0cy5tYXAoKHQpID0+IHQubmFtZSldO1xuICByZXR1cm4gdmFsdWUgPT09IHZvaWQgMCA/IHtcbiAgICB2YWxpZDogITAsXG4gICAgcmVzb2x1dGlvbjogbnVsbCxcbiAgICB2YWx1ZVxuICB9IDogIUFycmF5LmlzQXJyYXkodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCA/IHtcbiAgICB2YWxpZDogITEsXG4gICAgcmVzb2x1dGlvbjoge1xuICAgICAgcGF0Y2hlczogW3Vuc2V0KFtdKV0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJFZGl0b3IgdmFsdWUgbXVzdCBiZSBhbiBhcnJheSBvZiBQb3J0YWJsZSBUZXh0IGJsb2Nrcywgb3IgdW5kZWZpbmVkLlwiLFxuICAgICAgYWN0aW9uOiBcIlVuc2V0IHRoZSB2YWx1ZVwiLFxuICAgICAgaXRlbTogdmFsdWUsXG4gICAgICBpMThuOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubm90LWFuLWFycmF5LmRlc2NyaXB0aW9uXCIsXG4gICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vdC1hbi1hcnJheS5hY3Rpb25cIlxuICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWVcbiAgfSA6ICh2YWx1ZS5zb21lKChibGssIGluZGV4KSA9PiB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGJsaykpXG4gICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFtpbmRleF0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayBtdXN0IGJlIGFuIG9iamVjdCwgZ290ICR7U3RyaW5nKGJsayl9YCxcbiAgICAgICAgYWN0aW9uOiBcIlVuc2V0IGludmFsaWQgaXRlbVwiLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vdC1hbi1vYmplY3QuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5ub3QtYW4tb2JqZWN0LmFjdGlvblwiLFxuICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICEwO1xuICAgIGlmICghYmxrLl9rZXkgfHwgdHlwZW9mIGJsay5fa2V5ICE9IFwic3RyaW5nXCIpXG4gICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3NldCh7XG4gICAgICAgICAgLi4uYmxrLFxuICAgICAgICAgIF9rZXk6IGtleUdlbmVyYXRvcigpXG4gICAgICAgIH0sIFtpbmRleF0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayBhdCBpbmRleCAke2luZGV4fSBpcyBtaXNzaW5nIHJlcXVpcmVkIF9rZXkuYCxcbiAgICAgICAgYWN0aW9uOiBcIlNldCB0aGUgYmxvY2sgd2l0aCBhIHJhbmRvbSBfa2V5IHZhbHVlXCIsXG4gICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1rZXkuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWtleS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMDtcbiAgICBpZiAoIWJsay5fdHlwZSB8fCAhdmFsaWRCbG9ja1R5cGVzLmluY2x1ZGVzKGJsay5fdHlwZSkpIHtcbiAgICAgIGlmIChibGsuX3R5cGUgPT09IFwiYmxvY2tcIikge1xuICAgICAgICBjb25zdCBjdXJyZW50QmxvY2tUeXBlTmFtZSA9IHR5cGVzLmJsb2NrLm5hbWU7XG4gICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgIHBhdGNoZXM6IFtzZXQoe1xuICAgICAgICAgICAgLi4uYmxrLFxuICAgICAgICAgICAgX3R5cGU6IGN1cnJlbnRCbG9ja1R5cGVOYW1lXG4gICAgICAgICAgfSwgW3tcbiAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgfV0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGhhcyBpbnZhbGlkIHR5cGUgbmFtZSAnJHtibGsuX3R5cGV9Jy4gQWNjb3JkaW5nIHRvIHRoZSBzY2hlbWEsIHRoZSBibG9jayB0eXBlIG5hbWUgaXMgJyR7Y3VycmVudEJsb2NrVHlwZU5hbWV9J2AsXG4gICAgICAgICAgYWN0aW9uOiBgVXNlIHR5cGUgJyR7Y3VycmVudEJsb2NrVHlwZU5hbWV9J2AsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuaW5jb3JyZWN0LWJsb2NrLXR5cGUuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmluY29ycmVjdC1ibG9jay10eXBlLmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgIGV4cGVjdGVkVHlwZU5hbWU6IGN1cnJlbnRCbG9ja1R5cGVOYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhYmxrLl90eXBlICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKHtcbiAgICAgICAgLi4uYmxrLFxuICAgICAgICBfdHlwZTogdHlwZXMuYmxvY2submFtZVxuICAgICAgfSkgPyAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3NldCh7XG4gICAgICAgICAgLi4uYmxrLFxuICAgICAgICAgIF90eXBlOiB0eXBlcy5ibG9jay5uYW1lXG4gICAgICAgIH0sIFt7XG4gICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgfV0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBpcyBtaXNzaW5nIGEgdHlwZSBuYW1lLiBBY2NvcmRpbmcgdG8gdGhlIHNjaGVtYSwgdGhlIGJsb2NrIHR5cGUgbmFtZSBpcyAnJHt0eXBlcy5ibG9jay5uYW1lfSdgLFxuICAgICAgICBhY3Rpb246IGBVc2UgdHlwZSAnJHt0eXBlcy5ibG9jay5uYW1lfSdgLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctYmxvY2stdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctYmxvY2stdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICBleHBlY3RlZFR5cGVOYW1lOiB0eXBlcy5ibG9jay5uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMCkgOiBibGsuX3R5cGUgPyAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFt7XG4gICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgfV0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBoYXMgaW52YWxpZCBfdHlwZSAnJHtibGsuX3R5cGV9J2AsXG4gICAgICAgIGFjdGlvbjogXCJSZW1vdmUgdGhlIGJsb2NrXCIsXG4gICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC10eXBlLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC10eXBlLmFjdGlvblwiLFxuICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBibGsuX3R5cGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICEwKSA6IChyZXNvbHV0aW9uID0ge1xuICAgICAgICBwYXRjaGVzOiBbdW5zZXQoW3tcbiAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICB9XSldLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGlzIG1pc3NpbmcgYW4gX3R5cGUgcHJvcGVydHlgLFxuICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHRoZSBibG9ja1wiLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGtleTogYmxrLl9rZXlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICEwKTtcbiAgICB9XG4gICAgaWYgKGJsay5fdHlwZSA9PT0gdHlwZXMuYmxvY2submFtZSkge1xuICAgICAgY29uc3QgdGV4dEJsb2NrID0gYmxrO1xuICAgICAgaWYgKHRleHRCbG9jay5jaGlsZHJlbiAmJiAhQXJyYXkuaXNBcnJheSh0ZXh0QmxvY2suY2hpbGRyZW4pKVxuICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbc2V0KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICAgIH0sIFt7XG4gICAgICAgICAgICBfa2V5OiB0ZXh0QmxvY2suX2tleVxuICAgICAgICAgIH1dKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBUZXh0IGJsb2NrIHdpdGggX2tleSAnJHt0ZXh0QmxvY2suX2tleX0nIGhhcyBhIGludmFsaWQgcmVxdWlyZWQgcHJvcGVydHkgJ2NoaWxkcmVuJy5gLFxuICAgICAgICAgIGFjdGlvbjogXCJSZXNldCB0aGUgY2hpbGRyZW4gcHJvcGVydHlcIixcbiAgICAgICAgICBpdGVtOiB0ZXh0QmxvY2ssXG4gICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLW9yLWludmFsaWQtY2hpbGRyZW4uZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3Npbmctb3ItaW52YWxpZC1jaGlsZHJlbi5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IHRleHRCbG9jay5fa2V5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMDtcbiAgICAgIGlmICh0ZXh0QmxvY2suY2hpbGRyZW4gPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KHRleHRCbG9jay5jaGlsZHJlbikgJiYgdGV4dEJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBuZXdTcGFuID0ge1xuICAgICAgICAgIF90eXBlOiB0eXBlcy5zcGFuLm5hbWUsXG4gICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICBtYXJrczogW11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgIHBhdGNoZXM6IFtzZXRJZk1pc3NpbmcoW10sIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIl0pLCBpbnNlcnQoW25ld1NwYW5dLCBcImFmdGVyXCIsIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwgMF0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkcmVuIGZvciB0ZXh0IGJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGlzIGVtcHR5LmAsXG4gICAgICAgICAgYWN0aW9uOiBcIkluc2VydCBhbiBlbXB0eSB0ZXh0XCIsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZW1wdHktY2hpbGRyZW4uZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmVtcHR5LWNoaWxkcmVuLmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sICEwO1xuICAgICAgfVxuICAgICAgY29uc3QgYWxsVXNlZE1hcmtzID0gdW5pcShmbGF0dGVuKHRleHRCbG9jay5jaGlsZHJlbi5maWx0ZXIoKGNsZCkgPT4gY2xkLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUpLm1hcCgoY2xkKSA9PiBjbGQubWFya3MgfHwgW10pKSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShibGsubWFya0RlZnMpICYmIGJsay5tYXJrRGVmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHVudXNlZE1hcmtEZWZzID0gdW5pcShibGsubWFya0RlZnMubWFwKChkZWYpID0+IGRlZi5fa2V5KS5maWx0ZXIoKGtleSkgPT4gIWFsbFVzZWRNYXJrcy5pbmNsdWRlcyhrZXkpKSk7XG4gICAgICAgIGlmICh1bnVzZWRNYXJrRGVmcy5sZW5ndGggPiAwKVxuICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgICAgcGF0Y2hlczogdW51c2VkTWFya0RlZnMubWFwKChtYXJrRGVmS2V5KSA9PiB1bnNldChbe1xuICAgICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgICAgfSwgXCJtYXJrRGVmc1wiLCB7XG4gICAgICAgICAgICAgIF9rZXk6IG1hcmtEZWZLZXlcbiAgICAgICAgICAgIH1dKSksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIGNvbnRhaW5zIG9ycGhhbmVkIGRhdGEgKHVudXNlZCBtYXJrIGRlZmluaXRpb25zKTogJHt1bnVzZWRNYXJrRGVmcy5qb2luKFwiLCBcIil9LmAsXG4gICAgICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHVudXNlZCBtYXJrIGRlZmluaXRpb24gaXRlbVwiLFxuICAgICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm9ycGhhbmVkLW1hcmstZGVmcy5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5vcnBoYW5lZC1tYXJrLWRlZnMuYWN0aW9uXCIsXG4gICAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgICAgdW51c2VkTWFya0RlZnM6IHVudXNlZE1hcmtEZWZzLm1hcCgobSkgPT4gbS50b1N0cmluZygpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgITA7XG4gICAgICB9XG4gICAgICBjb25zdCBvcnBoYW5lZE1hcmtzID0gYWxsVXNlZE1hcmtzLmZpbHRlcigobWFyaykgPT4gIXR5cGVzLmRlY29yYXRvcnMubWFwKChkZWMpID0+IGRlYy52YWx1ZSkuaW5jbHVkZXMobWFyaykpLmZpbHRlcigobWFyaykgPT4gdGV4dEJsb2NrLm1hcmtEZWZzID09PSB2b2lkIDAgfHwgIXRleHRCbG9jay5tYXJrRGVmcy5maW5kKChkZWYpID0+IGRlZi5fa2V5ID09PSBtYXJrKSk7XG4gICAgICBpZiAob3JwaGFuZWRNYXJrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHNwYW5DaGlsZHJlbiA9IHRleHRCbG9jay5jaGlsZHJlbi5maWx0ZXIoKGNsZCkgPT4gY2xkLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUgJiYgQXJyYXkuaXNBcnJheShjbGQubWFya3MpICYmIGNsZC5tYXJrcy5zb21lKChtYXJrKSA9PiBvcnBoYW5lZE1hcmtzLmluY2x1ZGVzKG1hcmspKSk7XG4gICAgICAgIGlmIChzcGFuQ2hpbGRyZW4pIHtcbiAgICAgICAgICBjb25zdCBvcnBoYW5lZCA9IG9ycGhhbmVkTWFya3Muam9pbihcIiwgXCIpO1xuICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgICAgcGF0Y2hlczogc3BhbkNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IHNldCgoY2hpbGQubWFya3MgfHwgW10pLmZpbHRlcigoY01yaykgPT4gIW9ycGhhbmVkTWFya3MuaW5jbHVkZXMoY01yaykpLCBbe1xuICAgICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICAgIH0sIFwibWFya3NcIl0pKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQmxvY2sgd2l0aCBfa2V5ICcke2Jsay5fa2V5fScgY29udGFpbnMgbWFya3MgKCR7b3JwaGFuZWR9KSBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGNvbnRlbnQgbW9kZWwuYCxcbiAgICAgICAgICAgIGFjdGlvbjogXCJSZW1vdmUgaW52YWxpZCBtYXJrc1wiLFxuICAgICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm9ycGhhbmVkLW1hcmtzLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm9ycGhhbmVkLW1hcmtzLmFjdGlvblwiLFxuICAgICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICAgIG9ycGhhbmVkTWFya3M6IG9ycGhhbmVkTWFya3MubWFwKChtKSA9PiBtLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAhMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGV4dEJsb2NrLmNoaWxkcmVuLnNvbWUoKGNoaWxkLCBjSW5kZXgpID0+IHtcbiAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KGNoaWxkKSlcbiAgICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICAgIHBhdGNoZXM6IFt1bnNldChbe1xuICAgICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCBjSW5kZXhdKV0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkIGF0IGluZGV4ICcke2NJbmRleH0nIGluIGJsb2NrIHdpdGgga2V5ICcke2Jsay5fa2V5fScgaXMgbm90IGFuIG9iamVjdC5gLFxuICAgICAgICAgICAgYWN0aW9uOiBcIlJlbW92ZSB0aGUgaXRlbVwiLFxuICAgICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vbi1vYmplY3QtY2hpbGQuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubm9uLW9iamVjdC1jaGlsZC5hY3Rpb25cIixcbiAgICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgICAgICBpbmRleDogY0luZGV4XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAhMDtcbiAgICAgICAgaWYgKCFjaGlsZC5fa2V5IHx8IHR5cGVvZiBjaGlsZC5fa2V5ICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBjb25zdCBuZXdDaGlsZCA9IHtcbiAgICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKClcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgICAgcGF0Y2hlczogW3NldChuZXdDaGlsZCwgW3tcbiAgICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwgY0luZGV4XSldLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBDaGlsZCBhdCBpbmRleCAke2NJbmRleH0gaXMgbWlzc2luZyByZXF1aXJlZCBfa2V5IGluIGJsb2NrIHdpdGggX2tleSAke2Jsay5fa2V5fS5gLFxuICAgICAgICAgICAgYWN0aW9uOiBcIlNldCBhIG5ldyByYW5kb20gX2tleSBvbiB0aGUgb2JqZWN0XCIsXG4gICAgICAgICAgICBpdGVtOiBibGssXG4gICAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1jaGlsZC1rZXkuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1jaGlsZC1rZXkuYWN0aW9uXCIsXG4gICAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGNJbmRleFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgITA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkLl90eXBlID8gdmFsaWRDaGlsZFR5cGVzLmluY2x1ZGVzKGNoaWxkLl90eXBlKSA/IGNoaWxkLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUgJiYgdHlwZW9mIGNoaWxkLnRleHQgIT0gXCJzdHJpbmdcIiA/IChyZXNvbHV0aW9uID0ge1xuICAgICAgICAgIHBhdGNoZXM6IFtzZXQoe1xuICAgICAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICAgICAgfSwgW3tcbiAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgfV0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkIHdpdGggX2tleSAnJHtjaGlsZC5fa2V5fScgaW4gYmxvY2sgd2l0aCBrZXkgJyR7YmxrLl9rZXl9JyBoYXMgbWlzc2luZyBvciBpbnZhbGlkIHRleHQgcHJvcGVydHkhYCxcbiAgICAgICAgICBhY3Rpb246IFwiV3JpdGUgYW4gZW1wdHkgdGV4dCBwcm9wZXJ0eSB0byB0aGUgb2JqZWN0XCIsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuaW52YWxpZC1zcGFuLXRleHQuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmludmFsaWQtc3Bhbi10ZXh0LmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgIGNoaWxkS2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMCkgOiAhMSA6IChyZXNvbHV0aW9uID0ge1xuICAgICAgICAgIHBhdGNoZXM6IFt1bnNldChbe1xuICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICB9XSldLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQ2hpbGQgd2l0aCBfa2V5ICcke2NoaWxkLl9rZXl9JyBpbiBibG9jayB3aXRoIGtleSAnJHtibGsuX2tleX0nIGhhcyBpbnZhbGlkICdfdHlwZScgcHJvcGVydHkgKCR7Y2hpbGQuX3R5cGV9KS5gLFxuICAgICAgICAgIGFjdGlvbjogXCJSZW1vdmUgdGhlIG9iamVjdFwiLFxuICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmRpc2FsbG93ZWQtY2hpbGQtdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC1jaGlsZC10eXBlLmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgIGNoaWxkS2V5OiBjaGlsZC5fa2V5LFxuICAgICAgICAgICAgICBjaGlsZFR5cGU6IGNoaWxkLl90eXBlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMCkgOiAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbdW5zZXQoW3tcbiAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgfV0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkIHdpdGggX2tleSAnJHtjaGlsZC5fa2V5fScgaW4gYmxvY2sgd2l0aCBrZXkgJyR7YmxrLl9rZXl9JyBpcyBtaXNzaW5nICdfdHlwZScgcHJvcGVydHkuYCxcbiAgICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHRoZSBvYmplY3RcIixcbiAgICAgICAgICBpdGVtOiBibGssXG4gICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWNoaWxkLXR5cGUuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctY2hpbGQtdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICBjaGlsZEtleTogY2hpbGQuX2tleVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgITApO1xuICAgICAgfSkgJiYgKHZhbGlkID0gITEpO1xuICAgIH1cbiAgICByZXR1cm4gITE7XG4gIH0pICYmICh2YWxpZCA9ICExKSwge1xuICAgIHZhbGlkLFxuICAgIHJlc29sdXRpb24sXG4gICAgdmFsdWVcbiAgfSk7XG59XG5mdW5jdGlvbiB3aXRoUmVtb3RlQ2hhbmdlcyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc0NoYW5naW5nUmVtb3RlbHkoZWRpdG9yKSB8fCAhMTtcbiAgSVNfUFJPQ0VTU0lOR19SRU1PVEVfQ0hBTkdFUy5zZXQoZWRpdG9yLCAhMCksIGZuKCksIElTX1BST0NFU1NJTkdfUkVNT1RFX0NIQU5HRVMuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBpc0NoYW5naW5nUmVtb3RlbHkoZWRpdG9yKSB7XG4gIHJldHVybiBJU19QUk9DRVNTSU5HX1JFTU9URV9DSEFOR0VTLmdldChlZGl0b3IpO1xufVxuY29uc3QgUEFUQ0hJTkcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHdpdGhvdXRQYXRjaGluZyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc1BhdGNoaW5nKGVkaXRvcik7XG4gIFBBVENISU5HLnNldChlZGl0b3IsICExKSwgZm4oKSwgUEFUQ0hJTkcuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBpc1BhdGNoaW5nKGVkaXRvcikge1xuICByZXR1cm4gUEFUQ0hJTkcuZ2V0KGVkaXRvcik7XG59XG5mdW5jdGlvbiBjbG9uZURpZmYoZGlmZjIpIHtcbiAgY29uc3QgW3R5cGUsIHBhdGNoXSA9IGRpZmYyO1xuICByZXR1cm4gW3R5cGUsIHBhdGNoXTtcbn1cbmZ1bmN0aW9uIGdldENvbW1vbk92ZXJsYXAodGV4dEEsIHRleHRCKSB7XG4gIGxldCB0ZXh0MSA9IHRleHRBLCB0ZXh0MiA9IHRleHRCO1xuICBjb25zdCB0ZXh0MUxlbmd0aCA9IHRleHQxLmxlbmd0aCwgdGV4dDJMZW5ndGggPSB0ZXh0Mi5sZW5ndGg7XG4gIGlmICh0ZXh0MUxlbmd0aCA9PT0gMCB8fCB0ZXh0Mkxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG4gIHRleHQxTGVuZ3RoID4gdGV4dDJMZW5ndGggPyB0ZXh0MSA9IHRleHQxLnN1YnN0cmluZyh0ZXh0MUxlbmd0aCAtIHRleHQyTGVuZ3RoKSA6IHRleHQxTGVuZ3RoIDwgdGV4dDJMZW5ndGggJiYgKHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKDAsIHRleHQxTGVuZ3RoKSk7XG4gIGNvbnN0IHRleHRMZW5ndGggPSBNYXRoLm1pbih0ZXh0MUxlbmd0aCwgdGV4dDJMZW5ndGgpO1xuICBpZiAodGV4dDEgPT09IHRleHQyKSByZXR1cm4gdGV4dExlbmd0aDtcbiAgbGV0IGJlc3QgPSAwLCBsZW5ndGggPSAxO1xuICBmb3IgKGxldCBmb3VuZCA9IDA7IGZvdW5kICE9PSAtMTsgKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IHRleHQxLnN1YnN0cmluZyh0ZXh0TGVuZ3RoIC0gbGVuZ3RoKTtcbiAgICBpZiAoZm91bmQgPSB0ZXh0Mi5pbmRleE9mKHBhdHRlcm4pLCBmb3VuZCA9PT0gLTEpIHJldHVybiBiZXN0O1xuICAgIGxlbmd0aCArPSBmb3VuZCwgKGZvdW5kID09PSAwIHx8IHRleHQxLnN1YnN0cmluZyh0ZXh0TGVuZ3RoIC0gbGVuZ3RoKSA9PT0gdGV4dDIuc3Vic3RyaW5nKDAsIGxlbmd0aCkpICYmIChiZXN0ID0gbGVuZ3RoLCBsZW5ndGgrKyk7XG4gIH1cbiAgcmV0dXJuIGJlc3Q7XG59XG5mdW5jdGlvbiBnZXRDb21tb25QcmVmaXgodGV4dDEsIHRleHQyKSB7XG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8IHRleHQxWzBdICE9PSB0ZXh0MlswXSkgcmV0dXJuIDA7XG4gIGxldCBwb2ludGVyTWluID0gMCwgcG9pbnRlck1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKSwgcG9pbnRlck1pZCA9IHBvaW50ZXJNYXgsIHBvaW50ZXJTdGFydCA9IDA7XG4gIGZvciAoOyBwb2ludGVyTWluIDwgcG9pbnRlck1pZDsgKSB0ZXh0MS5zdWJzdHJpbmcocG9pbnRlclN0YXJ0LCBwb2ludGVyTWlkKSA9PT0gdGV4dDIuc3Vic3RyaW5nKHBvaW50ZXJTdGFydCwgcG9pbnRlck1pZCkgPyAocG9pbnRlck1pbiA9IHBvaW50ZXJNaWQsIHBvaW50ZXJTdGFydCA9IHBvaW50ZXJNaW4pIDogcG9pbnRlck1heCA9IHBvaW50ZXJNaWQsIHBvaW50ZXJNaWQgPSBNYXRoLmZsb29yKChwb2ludGVyTWF4IC0gcG9pbnRlck1pbikgLyAyICsgcG9pbnRlck1pbik7XG4gIHJldHVybiBwb2ludGVyTWlkO1xufVxuZnVuY3Rpb24gZ2V0Q29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mikge1xuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fCB0ZXh0MVt0ZXh0MS5sZW5ndGggLSAxXSAhPT0gdGV4dDJbdGV4dDIubGVuZ3RoIC0gMV0pIHJldHVybiAwO1xuICBsZXQgcG9pbnRlck1pbiA9IDAsIHBvaW50ZXJNYXggPSBNYXRoLm1pbih0ZXh0MS5sZW5ndGgsIHRleHQyLmxlbmd0aCksIHBvaW50ZXJNaWQgPSBwb2ludGVyTWF4LCBwb2ludGVyRW5kID0gMDtcbiAgZm9yICg7IHBvaW50ZXJNaW4gPCBwb2ludGVyTWlkOyApIHRleHQxLnN1YnN0cmluZyh0ZXh0MS5sZW5ndGggLSBwb2ludGVyTWlkLCB0ZXh0MS5sZW5ndGggLSBwb2ludGVyRW5kKSA9PT0gdGV4dDIuc3Vic3RyaW5nKHRleHQyLmxlbmd0aCAtIHBvaW50ZXJNaWQsIHRleHQyLmxlbmd0aCAtIHBvaW50ZXJFbmQpID8gKHBvaW50ZXJNaW4gPSBwb2ludGVyTWlkLCBwb2ludGVyRW5kID0gcG9pbnRlck1pbikgOiBwb2ludGVyTWF4ID0gcG9pbnRlck1pZCwgcG9pbnRlck1pZCA9IE1hdGguZmxvb3IoKHBvaW50ZXJNYXggLSBwb2ludGVyTWluKSAvIDIgKyBwb2ludGVyTWluKTtcbiAgcmV0dXJuIHBvaW50ZXJNaWQ7XG59XG5mdW5jdGlvbiBpc0hpZ2hTdXJyb2dhdGUoY2hhcikge1xuICBjb25zdCBjaGFyQ29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGNoYXJDb2RlID49IDU1Mjk2ICYmIGNoYXJDb2RlIDw9IDU2MzE5O1xufVxuZnVuY3Rpb24gaXNMb3dTdXJyb2dhdGUoY2hhcikge1xuICBjb25zdCBjaGFyQ29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGNoYXJDb2RlID49IDU2MzIwICYmIGNoYXJDb2RlIDw9IDU3MzQzO1xufVxuZnVuY3Rpb24gYmlzZWN0KHRleHQxLCB0ZXh0MiwgZGVhZGxpbmUpIHtcbiAgY29uc3QgdGV4dDFMZW5ndGggPSB0ZXh0MS5sZW5ndGgsIHRleHQyTGVuZ3RoID0gdGV4dDIubGVuZ3RoLCBtYXhEID0gTWF0aC5jZWlsKCh0ZXh0MUxlbmd0aCArIHRleHQyTGVuZ3RoKSAvIDIpLCB2T2Zmc2V0ID0gbWF4RCwgdkxlbmd0aCA9IDIgKiBtYXhELCB2MSA9IG5ldyBBcnJheSh2TGVuZ3RoKSwgdjIgPSBuZXcgQXJyYXkodkxlbmd0aCk7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgdkxlbmd0aDsgeCsrKSB2MVt4XSA9IC0xLCB2Mlt4XSA9IC0xO1xuICB2MVt2T2Zmc2V0ICsgMV0gPSAwLCB2Mlt2T2Zmc2V0ICsgMV0gPSAwO1xuICBjb25zdCBkZWx0YSA9IHRleHQxTGVuZ3RoIC0gdGV4dDJMZW5ndGgsIGZyb250ID0gZGVsdGEgJSAyICE9PSAwO1xuICBsZXQgazFzdGFydCA9IDAsIGsxZW5kID0gMCwgazJzdGFydCA9IDAsIGsyZW5kID0gMDtcbiAgZm9yIChsZXQgZCA9IDA7IGQgPCBtYXhEICYmICEoRGF0ZS5ub3coKSA+IGRlYWRsaW5lKTsgZCsrKSB7XG4gICAgZm9yIChsZXQgazEgPSAtZCArIGsxc3RhcnQ7IGsxIDw9IGQgLSBrMWVuZDsgazEgKz0gMikge1xuICAgICAgY29uc3QgazFPZmZzZXQgPSB2T2Zmc2V0ICsgazE7XG4gICAgICBsZXQgeDE7XG4gICAgICBrMSA9PT0gLWQgfHwgazEgIT09IGQgJiYgdjFbazFPZmZzZXQgLSAxXSA8IHYxW2sxT2Zmc2V0ICsgMV0gPyB4MSA9IHYxW2sxT2Zmc2V0ICsgMV0gOiB4MSA9IHYxW2sxT2Zmc2V0IC0gMV0gKyAxO1xuICAgICAgbGV0IHkxID0geDEgLSBrMTtcbiAgICAgIGZvciAoOyB4MSA8IHRleHQxTGVuZ3RoICYmIHkxIDwgdGV4dDJMZW5ndGggJiYgdGV4dDEuY2hhckF0KHgxKSA9PT0gdGV4dDIuY2hhckF0KHkxKTsgKSB4MSsrLCB5MSsrO1xuICAgICAgaWYgKHYxW2sxT2Zmc2V0XSA9IHgxLCB4MSA+IHRleHQxTGVuZ3RoKSBrMWVuZCArPSAyO1xuICAgICAgZWxzZSBpZiAoeTEgPiB0ZXh0Mkxlbmd0aCkgazFzdGFydCArPSAyO1xuICAgICAgZWxzZSBpZiAoZnJvbnQpIHtcbiAgICAgICAgY29uc3QgazJPZmZzZXQgPSB2T2Zmc2V0ICsgZGVsdGEgLSBrMTtcbiAgICAgICAgaWYgKGsyT2Zmc2V0ID49IDAgJiYgazJPZmZzZXQgPCB2TGVuZ3RoICYmIHYyW2syT2Zmc2V0XSAhPT0gLTEpIHtcbiAgICAgICAgICBjb25zdCB4MiA9IHRleHQxTGVuZ3RoIC0gdjJbazJPZmZzZXRdO1xuICAgICAgICAgIGlmICh4MSA+PSB4MikgcmV0dXJuIGJpc2VjdFNwbGl0KHRleHQxLCB0ZXh0MiwgeDEsIHkxLCBkZWFkbGluZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgazIgPSAtZCArIGsyc3RhcnQ7IGsyIDw9IGQgLSBrMmVuZDsgazIgKz0gMikge1xuICAgICAgY29uc3QgazJPZmZzZXQgPSB2T2Zmc2V0ICsgazI7XG4gICAgICBsZXQgeDI7XG4gICAgICBrMiA9PT0gLWQgfHwgazIgIT09IGQgJiYgdjJbazJPZmZzZXQgLSAxXSA8IHYyW2syT2Zmc2V0ICsgMV0gPyB4MiA9IHYyW2syT2Zmc2V0ICsgMV0gOiB4MiA9IHYyW2syT2Zmc2V0IC0gMV0gKyAxO1xuICAgICAgbGV0IHkyID0geDIgLSBrMjtcbiAgICAgIGZvciAoOyB4MiA8IHRleHQxTGVuZ3RoICYmIHkyIDwgdGV4dDJMZW5ndGggJiYgdGV4dDEuY2hhckF0KHRleHQxTGVuZ3RoIC0geDIgLSAxKSA9PT0gdGV4dDIuY2hhckF0KHRleHQyTGVuZ3RoIC0geTIgLSAxKTsgKSB4MisrLCB5MisrO1xuICAgICAgaWYgKHYyW2syT2Zmc2V0XSA9IHgyLCB4MiA+IHRleHQxTGVuZ3RoKSBrMmVuZCArPSAyO1xuICAgICAgZWxzZSBpZiAoeTIgPiB0ZXh0Mkxlbmd0aCkgazJzdGFydCArPSAyO1xuICAgICAgZWxzZSBpZiAoIWZyb250KSB7XG4gICAgICAgIGNvbnN0IGsxT2Zmc2V0ID0gdk9mZnNldCArIGRlbHRhIC0gazI7XG4gICAgICAgIGlmIChrMU9mZnNldCA+PSAwICYmIGsxT2Zmc2V0IDwgdkxlbmd0aCAmJiB2MVtrMU9mZnNldF0gIT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgeDEgPSB2MVtrMU9mZnNldF0sIHkxID0gdk9mZnNldCArIHgxIC0gazFPZmZzZXQ7XG4gICAgICAgICAgaWYgKHgyID0gdGV4dDFMZW5ndGggLSB4MiwgeDEgPj0geDIpIHJldHVybiBiaXNlY3RTcGxpdCh0ZXh0MSwgdGV4dDIsIHgxLCB5MSwgZGVhZGxpbmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV0sIFtESUZGX0lOU0VSVCwgdGV4dDJdXTtcbn1cbmZ1bmN0aW9uIGJpc2VjdFNwbGl0KHRleHQxLCB0ZXh0MiwgeCwgeSwgZGVhZGxpbmUpIHtcbiAgY29uc3QgdGV4dDFhID0gdGV4dDEuc3Vic3RyaW5nKDAsIHgpLCB0ZXh0MmEgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgeSksIHRleHQxYiA9IHRleHQxLnN1YnN0cmluZyh4KSwgdGV4dDJiID0gdGV4dDIuc3Vic3RyaW5nKHkpLCBkaWZmcyA9IGRvRGlmZih0ZXh0MWEsIHRleHQyYSwge1xuICAgIGNoZWNrTGluZXM6ICExLFxuICAgIGRlYWRsaW5lXG4gIH0pLCBkaWZmc2IgPSBkb0RpZmYodGV4dDFiLCB0ZXh0MmIsIHtcbiAgICBjaGVja0xpbmVzOiAhMSxcbiAgICBkZWFkbGluZVxuICB9KTtcbiAgcmV0dXJuIGRpZmZzLmNvbmNhdChkaWZmc2IpO1xufVxuZnVuY3Rpb24gZmluZEhhbGZNYXRjaCh0ZXh0MSwgdGV4dDIsIHRpbWVvdXQgPSAxKSB7XG4gIGlmICh0aW1lb3V0IDw9IDApIHJldHVybiBudWxsO1xuICBjb25zdCBsb25nVGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDIsIHNob3J0VGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQyIDogdGV4dDE7XG4gIGlmIChsb25nVGV4dC5sZW5ndGggPCA0IHx8IHNob3J0VGV4dC5sZW5ndGggKiAyIDwgbG9uZ1RleHQubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgaGFsZk1hdGNoMSA9IGhhbGZNYXRjaEkobG9uZ1RleHQsIHNob3J0VGV4dCwgTWF0aC5jZWlsKGxvbmdUZXh0Lmxlbmd0aCAvIDQpKSwgaGFsZk1hdGNoMiA9IGhhbGZNYXRjaEkobG9uZ1RleHQsIHNob3J0VGV4dCwgTWF0aC5jZWlsKGxvbmdUZXh0Lmxlbmd0aCAvIDIpKTtcbiAgbGV0IGhhbGZNYXRjaDtcbiAgaWYgKGhhbGZNYXRjaDEgJiYgaGFsZk1hdGNoMikgaGFsZk1hdGNoID0gaGFsZk1hdGNoMVs0XS5sZW5ndGggPiBoYWxmTWF0Y2gyWzRdLmxlbmd0aCA/IGhhbGZNYXRjaDEgOiBoYWxmTWF0Y2gyO1xuICBlbHNlIHtcbiAgICBpZiAoIWhhbGZNYXRjaDEgJiYgIWhhbGZNYXRjaDIpIHJldHVybiBudWxsO1xuICAgIGhhbGZNYXRjaDIgPyBoYWxmTWF0Y2gxIHx8IChoYWxmTWF0Y2ggPSBoYWxmTWF0Y2gyKSA6IGhhbGZNYXRjaCA9IGhhbGZNYXRjaDE7XG4gIH1cbiAgaWYgKCFoYWxmTWF0Y2gpIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIGEgaGFsZiBtYXRjaC5cIik7XG4gIGxldCB0ZXh0MUEsIHRleHQxQiwgdGV4dDJBLCB0ZXh0MkI7XG4gIHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/ICh0ZXh0MUEgPSBoYWxmTWF0Y2hbMF0sIHRleHQxQiA9IGhhbGZNYXRjaFsxXSwgdGV4dDJBID0gaGFsZk1hdGNoWzJdLCB0ZXh0MkIgPSBoYWxmTWF0Y2hbM10pIDogKHRleHQyQSA9IGhhbGZNYXRjaFswXSwgdGV4dDJCID0gaGFsZk1hdGNoWzFdLCB0ZXh0MUEgPSBoYWxmTWF0Y2hbMl0sIHRleHQxQiA9IGhhbGZNYXRjaFszXSk7XG4gIGNvbnN0IG1pZENvbW1vbiA9IGhhbGZNYXRjaFs0XTtcbiAgcmV0dXJuIFt0ZXh0MUEsIHRleHQxQiwgdGV4dDJBLCB0ZXh0MkIsIG1pZENvbW1vbl07XG59XG5mdW5jdGlvbiBoYWxmTWF0Y2hJKGxvbmdUZXh0LCBzaG9ydFRleHQsIGkpIHtcbiAgY29uc3Qgc2VlZCA9IGxvbmdUZXh0LnNsaWNlKGksIGkgKyBNYXRoLmZsb29yKGxvbmdUZXh0Lmxlbmd0aCAvIDQpKTtcbiAgbGV0IGogPSAtMSwgYmVzdENvbW1vbiA9IFwiXCIsIGJlc3RMb25nVGV4dEEsIGJlc3RMb25nVGV4dEIsIGJlc3RTaG9ydFRleHRBLCBiZXN0U2hvcnRUZXh0QjtcbiAgZm9yICg7IChqID0gc2hvcnRUZXh0LmluZGV4T2Yoc2VlZCwgaiArIDEpKSAhPT0gLTE7ICkge1xuICAgIGNvbnN0IHByZWZpeExlbmd0aCA9IGdldENvbW1vblByZWZpeChsb25nVGV4dC5zbGljZShpKSwgc2hvcnRUZXh0LnNsaWNlKGopKSwgc3VmZml4TGVuZ3RoID0gZ2V0Q29tbW9uU3VmZml4KGxvbmdUZXh0LnNsaWNlKDAsIGkpLCBzaG9ydFRleHQuc2xpY2UoMCwgaikpO1xuICAgIGJlc3RDb21tb24ubGVuZ3RoIDwgc3VmZml4TGVuZ3RoICsgcHJlZml4TGVuZ3RoICYmIChiZXN0Q29tbW9uID0gc2hvcnRUZXh0LnNsaWNlKGogLSBzdWZmaXhMZW5ndGgsIGopICsgc2hvcnRUZXh0LnNsaWNlKGosIGogKyBwcmVmaXhMZW5ndGgpLCBiZXN0TG9uZ1RleHRBID0gbG9uZ1RleHQuc2xpY2UoMCwgaSAtIHN1ZmZpeExlbmd0aCksIGJlc3RMb25nVGV4dEIgPSBsb25nVGV4dC5zbGljZShpICsgcHJlZml4TGVuZ3RoKSwgYmVzdFNob3J0VGV4dEEgPSBzaG9ydFRleHQuc2xpY2UoMCwgaiAtIHN1ZmZpeExlbmd0aCksIGJlc3RTaG9ydFRleHRCID0gc2hvcnRUZXh0LnNsaWNlKGogKyBwcmVmaXhMZW5ndGgpKTtcbiAgfVxuICByZXR1cm4gYmVzdENvbW1vbi5sZW5ndGggKiAyID49IGxvbmdUZXh0Lmxlbmd0aCA/IFtiZXN0TG9uZ1RleHRBIHx8IFwiXCIsIGJlc3RMb25nVGV4dEIgfHwgXCJcIiwgYmVzdFNob3J0VGV4dEEgfHwgXCJcIiwgYmVzdFNob3J0VGV4dEIgfHwgXCJcIiwgYmVzdENvbW1vbiB8fCBcIlwiXSA6IG51bGw7XG59XG5mdW5jdGlvbiBjaGFyc1RvTGluZXMoZGlmZnMsIGxpbmVBcnJheSkge1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGRpZmZzLmxlbmd0aDsgeCsrKSB7XG4gICAgY29uc3QgY2hhcnMgPSBkaWZmc1t4XVsxXSwgdGV4dCA9IFtdO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgY2hhcnMubGVuZ3RoOyB5KyspIHRleHRbeV0gPSBsaW5lQXJyYXlbY2hhcnMuY2hhckNvZGVBdCh5KV07XG4gICAgZGlmZnNbeF1bMV0gPSB0ZXh0LmpvaW4oXCJcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIGxpbmVzVG9DaGFycyh0ZXh0QSwgdGV4dEIpIHtcbiAgY29uc3QgbGluZUFycmF5ID0gW10sIGxpbmVIYXNoID0ge307XG4gIGxpbmVBcnJheVswXSA9IFwiXCI7XG4gIGZ1bmN0aW9uIGRpZmZMaW5lc1RvTXVuZ2UodGV4dCkge1xuICAgIGxldCBjaGFycyA9IFwiXCIsIGxpbmVTdGFydCA9IDAsIGxpbmVFbmQgPSAtMSwgbGluZUFycmF5TGVuZ3RoID0gbGluZUFycmF5Lmxlbmd0aDtcbiAgICBmb3IgKDsgbGluZUVuZCA8IHRleHQubGVuZ3RoIC0gMTsgKSB7XG4gICAgICBsaW5lRW5kID0gdGV4dC5pbmRleE9mKGBcbmAsIGxpbmVTdGFydCksIGxpbmVFbmQgPT09IC0xICYmIChsaW5lRW5kID0gdGV4dC5sZW5ndGggLSAxKTtcbiAgICAgIGxldCBsaW5lID0gdGV4dC5zbGljZShsaW5lU3RhcnQsIGxpbmVFbmQgKyAxKTtcbiAgICAgIChsaW5lSGFzaC5oYXNPd25Qcm9wZXJ0eSA/IGxpbmVIYXNoLmhhc093blByb3BlcnR5KGxpbmUpIDogbGluZUhhc2hbbGluZV0gIT09IHZvaWQgMCkgPyBjaGFycyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxpbmVIYXNoW2xpbmVdKSA6IChsaW5lQXJyYXlMZW5ndGggPT09IG1heExpbmVzICYmIChsaW5lID0gdGV4dC5zbGljZShsaW5lU3RhcnQpLCBsaW5lRW5kID0gdGV4dC5sZW5ndGgpLCBjaGFycyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxpbmVBcnJheUxlbmd0aCksIGxpbmVIYXNoW2xpbmVdID0gbGluZUFycmF5TGVuZ3RoLCBsaW5lQXJyYXlbbGluZUFycmF5TGVuZ3RoKytdID0gbGluZSksIGxpbmVTdGFydCA9IGxpbmVFbmQgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnM7XG4gIH1cbiAgbGV0IG1heExpbmVzID0gNGU0O1xuICBjb25zdCBjaGFyczEgPSBkaWZmTGluZXNUb011bmdlKHRleHRBKTtcbiAgbWF4TGluZXMgPSA2NTUzNTtcbiAgY29uc3QgY2hhcnMyID0gZGlmZkxpbmVzVG9NdW5nZSh0ZXh0Qik7XG4gIHJldHVybiB7XG4gICAgY2hhcnMxLFxuICAgIGNoYXJzMixcbiAgICBsaW5lQXJyYXlcbiAgfTtcbn1cbmZ1bmN0aW9uIGRvTGluZU1vZGVEaWZmKHRleHRBLCB0ZXh0Qiwgb3B0cykge1xuICBsZXQgdGV4dDEgPSB0ZXh0QSwgdGV4dDIgPSB0ZXh0QjtcbiAgY29uc3QgYSA9IGxpbmVzVG9DaGFycyh0ZXh0MSwgdGV4dDIpO1xuICB0ZXh0MSA9IGEuY2hhcnMxLCB0ZXh0MiA9IGEuY2hhcnMyO1xuICBjb25zdCBsaW5lYXJyYXkgPSBhLmxpbmVBcnJheTtcbiAgbGV0IGRpZmZzID0gZG9EaWZmKHRleHQxLCB0ZXh0Miwge1xuICAgIGNoZWNrTGluZXM6ICExLFxuICAgIGRlYWRsaW5lOiBvcHRzLmRlYWRsaW5lXG4gIH0pO1xuICBjaGFyc1RvTGluZXMoZGlmZnMsIGxpbmVhcnJheSksIGRpZmZzID0gY2xlYW51cFNlbWFudGljKGRpZmZzKSwgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgXCJcIl0pO1xuICBsZXQgcG9pbnRlciA9IDAsIGNvdW50RGVsZXRlID0gMCwgY291bnRJbnNlcnQgPSAwLCB0ZXh0RGVsZXRlID0gXCJcIiwgdGV4dEluc2VydCA9IFwiXCI7XG4gIGZvciAoOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoOyApIHtcbiAgICBzd2l0Y2ggKGRpZmZzW3BvaW50ZXJdWzBdKSB7XG4gICAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgICBjb3VudEluc2VydCsrLCB0ZXh0SW5zZXJ0ICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9ERUxFVEU6XG4gICAgICAgIGNvdW50RGVsZXRlKyssIHRleHREZWxldGUgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0VRVUFMOlxuICAgICAgICBpZiAoY291bnREZWxldGUgPj0gMSAmJiBjb3VudEluc2VydCA+PSAxKSB7XG4gICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudERlbGV0ZSAtIGNvdW50SW5zZXJ0LCBjb3VudERlbGV0ZSArIGNvdW50SW5zZXJ0KSwgcG9pbnRlciA9IHBvaW50ZXIgLSBjb3VudERlbGV0ZSAtIGNvdW50SW5zZXJ0O1xuICAgICAgICAgIGNvbnN0IGFhID0gZG9EaWZmKHRleHREZWxldGUsIHRleHRJbnNlcnQsIHtcbiAgICAgICAgICAgIGNoZWNrTGluZXM6ICExLFxuICAgICAgICAgICAgZGVhZGxpbmU6IG9wdHMuZGVhZGxpbmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3IgKGxldCBqID0gYWEubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIGRpZmZzLnNwbGljZShwb2ludGVyLCAwLCBhYVtqXSk7XG4gICAgICAgICAgcG9pbnRlciArPSBhYS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY291bnRJbnNlcnQgPSAwLCBjb3VudERlbGV0ZSA9IDAsIHRleHREZWxldGUgPSBcIlwiLCB0ZXh0SW5zZXJ0ID0gXCJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRpZmYgb3BlcmF0aW9uLlwiKTtcbiAgICB9XG4gICAgcG9pbnRlcisrO1xuICB9XG4gIHJldHVybiBkaWZmcy5wb3AoKSwgZGlmZnM7XG59XG5mdW5jdGlvbiBjb21wdXRlRGlmZih0ZXh0MSwgdGV4dDIsIG9wdHMpIHtcbiAgbGV0IGRpZmZzO1xuICBpZiAoIXRleHQxKSByZXR1cm4gW1tESUZGX0lOU0VSVCwgdGV4dDJdXTtcbiAgaWYgKCF0ZXh0MikgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXV07XG4gIGNvbnN0IGxvbmd0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDEgOiB0ZXh0Miwgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MSwgaSA9IGxvbmd0ZXh0LmluZGV4T2Yoc2hvcnR0ZXh0KTtcbiAgaWYgKGkgIT09IC0xKSByZXR1cm4gZGlmZnMgPSBbW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSldLCBbRElGRl9FUVVBTCwgc2hvcnR0ZXh0XSwgW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoaSArIHNob3J0dGV4dC5sZW5ndGgpXV0sIHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCAmJiAoZGlmZnNbMF1bMF0gPSBESUZGX0RFTEVURSwgZGlmZnNbMl1bMF0gPSBESUZGX0RFTEVURSksIGRpZmZzO1xuICBpZiAoc2hvcnR0ZXh0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICBjb25zdCBoYWxmTWF0Y2ggPSBmaW5kSGFsZk1hdGNoKHRleHQxLCB0ZXh0Mik7XG4gIGlmIChoYWxmTWF0Y2gpIHtcbiAgICBjb25zdCB0ZXh0MUEgPSBoYWxmTWF0Y2hbMF0sIHRleHQxQiA9IGhhbGZNYXRjaFsxXSwgdGV4dDJBID0gaGFsZk1hdGNoWzJdLCB0ZXh0MkIgPSBoYWxmTWF0Y2hbM10sIG1pZENvbW1vbiA9IGhhbGZNYXRjaFs0XSwgZGlmZnNBID0gZG9EaWZmKHRleHQxQSwgdGV4dDJBLCBvcHRzKSwgZGlmZnNCID0gZG9EaWZmKHRleHQxQiwgdGV4dDJCLCBvcHRzKTtcbiAgICByZXR1cm4gZGlmZnNBLmNvbmNhdChbW0RJRkZfRVFVQUwsIG1pZENvbW1vbl1dLCBkaWZmc0IpO1xuICB9XG4gIHJldHVybiBvcHRzLmNoZWNrTGluZXMgJiYgdGV4dDEubGVuZ3RoID4gMTAwICYmIHRleHQyLmxlbmd0aCA+IDEwMCA/IGRvTGluZU1vZGVEaWZmKHRleHQxLCB0ZXh0Miwgb3B0cykgOiBiaXNlY3QodGV4dDEsIHRleHQyLCBvcHRzLmRlYWRsaW5lKTtcbn1cbnZhciBfX2RlZlByb3AkMiA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgX19nZXRPd25Qcm9wU3ltYm9scyQyID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scywgX19oYXNPd25Qcm9wJDIgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LCBfX3Byb3BJc0VudW0kMiA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUsIF9fZGVmTm9ybWFsUHJvcCQyID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcCQyKG9iaiwga2V5LCB7XG4gIGVudW1lcmFibGU6ICEwLFxuICBjb25maWd1cmFibGU6ICEwLFxuICB3cml0YWJsZTogITAsXG4gIHZhbHVlXG59KSA6IG9ialtrZXldID0gdmFsdWUsIF9fc3ByZWFkVmFsdWVzJDIgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpIF9faGFzT3duUHJvcCQyLmNhbGwoYiwgcHJvcCkgJiYgX19kZWZOb3JtYWxQcm9wJDIoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzJDIpIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyQyKGIpKSBfX3Byb3BJc0VudW0kMi5jYWxsKGIsIHByb3ApICYmIF9fZGVmTm9ybWFsUHJvcCQyKGEsIHByb3AsIGJbcHJvcF0pO1xuICByZXR1cm4gYTtcbn07XG5jb25zdCBESUZGX0RFTEVURSA9IC0xLCBESUZGX0lOU0VSVCA9IDEsIERJRkZfRVFVQUwgPSAwO1xuZnVuY3Rpb24gZGlmZih0ZXh0QSwgdGV4dEIsIG9wdHMpIHtcbiAgaWYgKHRleHRBID09PSBudWxsIHx8IHRleHRCID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJOdWxsIGlucHV0LiAoZGlmZilcIik7XG4gIGNvbnN0IGRpZmZzID0gZG9EaWZmKHRleHRBLCB0ZXh0QiwgY3JlYXRlSW50ZXJuYWxPcHRzKG9wdHMgfHwge30pKTtcbiAgcmV0dXJuIGFkanVzdERpZmZGb3JTdXJyb2dhdGVQYWlycyhkaWZmcyksIGRpZmZzO1xufVxuZnVuY3Rpb24gZG9EaWZmKHRleHRBLCB0ZXh0Qiwgb3B0aW9ucykge1xuICBsZXQgdGV4dDEgPSB0ZXh0QSwgdGV4dDIgPSB0ZXh0QjtcbiAgaWYgKHRleHQxID09PSB0ZXh0MikgcmV0dXJuIHRleHQxID8gW1tESUZGX0VRVUFMLCB0ZXh0MV1dIDogW107XG4gIGxldCBjb21tb25sZW5ndGggPSBnZXRDb21tb25QcmVmaXgodGV4dDEsIHRleHQyKTtcbiAgY29uc3QgY29tbW9ucHJlZml4ID0gdGV4dDEuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCksIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCksIGNvbW1vbmxlbmd0aCA9IGdldENvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpO1xuICBjb25zdCBjb21tb25zdWZmaXggPSB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcoMCwgdGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKSwgdGV4dDIgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgdGV4dDIubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgbGV0IGRpZmZzID0gY29tcHV0ZURpZmYodGV4dDEsIHRleHQyLCBvcHRpb25zKTtcbiAgcmV0dXJuIGNvbW1vbnByZWZpeCAmJiBkaWZmcy51bnNoaWZ0KFtESUZGX0VRVUFMLCBjb21tb25wcmVmaXhdKSwgY29tbW9uc3VmZml4ICYmIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIGNvbW1vbnN1ZmZpeF0pLCBkaWZmcyA9IGNsZWFudXBNZXJnZShkaWZmcyksIGRpZmZzO1xufVxuZnVuY3Rpb24gY3JlYXRlRGVhZExpbmUodGltZW91dCkge1xuICBsZXQgdCA9IDE7XG4gIHJldHVybiB0eXBlb2YgdGltZW91dCA8IFwidVwiICYmICh0ID0gdGltZW91dCA8PSAwID8gTnVtYmVyLk1BWF9WQUxVRSA6IHRpbWVvdXQpLCBEYXRlLm5vdygpICsgdCAqIDFlMztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUludGVybmFsT3B0cyhvcHRzKSB7XG4gIHJldHVybiBfX3NwcmVhZFZhbHVlcyQyKHtcbiAgICBjaGVja0xpbmVzOiAhMCxcbiAgICBkZWFkbGluZTogY3JlYXRlRGVhZExpbmUob3B0cy50aW1lb3V0IHx8IDEpXG4gIH0sIG9wdHMpO1xufVxuZnVuY3Rpb24gY29tYmluZUNoYXIoZGF0YSwgY2hhciwgZGlyKSB7XG4gIHJldHVybiBkaXIgPT09IDEgPyBkYXRhICsgY2hhciA6IGNoYXIgKyBkYXRhO1xufVxuZnVuY3Rpb24gc3BsaXRDaGFyKGRhdGEsIGRpcikge1xuICByZXR1cm4gZGlyID09PSAxID8gW2RhdGEuc3Vic3RyaW5nKDAsIGRhdGEubGVuZ3RoIC0gMSksIGRhdGFbZGF0YS5sZW5ndGggLSAxXV0gOiBbZGF0YS5zdWJzdHJpbmcoMSksIGRhdGFbMF1dO1xufVxuZnVuY3Rpb24gaGFzU2hhcmVkQ2hhcihkaWZmcywgaSwgaiwgZGlyKSB7XG4gIHJldHVybiBkaXIgPT09IDEgPyBkaWZmc1tpXVsxXVtkaWZmc1tpXVsxXS5sZW5ndGggLSAxXSA9PT0gZGlmZnNbal1bMV1bZGlmZnNbal1bMV0ubGVuZ3RoIC0gMV0gOiBkaWZmc1tpXVsxXVswXSA9PT0gZGlmZnNbal1bMV1bMF07XG59XG5mdW5jdGlvbiBkZWlzb2xhdGVDaGFyKGRpZmZzLCBpLCBkaXIpIHtcbiAgY29uc3QgaW52ID0gZGlyID09PSAxID8gLTEgOiAxO1xuICBsZXQgaW5zZXJ0SWR4ID0gbnVsbCwgZGVsZXRlSWR4ID0gbnVsbCwgaiA9IGkgKyBkaXI7XG4gIGZvciAoOyBqID49IDAgJiYgaiA8IGRpZmZzLmxlbmd0aCAmJiAoaW5zZXJ0SWR4ID09PSBudWxsIHx8IGRlbGV0ZUlkeCA9PT0gbnVsbCk7IGogKz0gZGlyKSB7XG4gICAgY29uc3QgW29wLCB0ZXh0Ml0gPSBkaWZmc1tqXTtcbiAgICBpZiAodGV4dDIubGVuZ3RoICE9PSAwKSB7XG4gICAgICBpZiAob3AgPT09IERJRkZfSU5TRVJUKSB7XG4gICAgICAgIGluc2VydElkeCA9PT0gbnVsbCAmJiAoaW5zZXJ0SWR4ID0gaik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChvcCA9PT0gRElGRl9ERUxFVEUpIHtcbiAgICAgICAgZGVsZXRlSWR4ID09PSBudWxsICYmIChkZWxldGVJZHggPSBqKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKG9wID09PSBESUZGX0VRVUFMKSB7XG4gICAgICAgIGlmIChpbnNlcnRJZHggPT09IG51bGwgJiYgZGVsZXRlSWR4ID09PSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgW3Jlc3QsIGNoYXIyXSA9IHNwbGl0Q2hhcihkaWZmc1tpXVsxXSwgZGlyKTtcbiAgICAgICAgICBkaWZmc1tpXVsxXSA9IHJlc3QsIGRpZmZzW2pdWzFdID0gY29tYmluZUNoYXIoZGlmZnNbal1bMV0sIGNoYXIyLCBpbnYpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGluc2VydElkeCAhPT0gbnVsbCAmJiBkZWxldGVJZHggIT09IG51bGwgJiYgaGFzU2hhcmVkQ2hhcihkaWZmcywgaW5zZXJ0SWR4LCBkZWxldGVJZHgsIGRpcikpIHtcbiAgICBjb25zdCBbaW5zZXJ0VGV4dDIsIGluc2VydENoYXJdID0gc3BsaXRDaGFyKGRpZmZzW2luc2VydElkeF1bMV0sIGludiksIFtkZWxldGVUZXh0XSA9IHNwbGl0Q2hhcihkaWZmc1tkZWxldGVJZHhdWzFdLCBpbnYpO1xuICAgIGRpZmZzW2luc2VydElkeF1bMV0gPSBpbnNlcnRUZXh0MiwgZGlmZnNbZGVsZXRlSWR4XVsxXSA9IGRlbGV0ZVRleHQsIGRpZmZzW2ldWzFdID0gY29tYmluZUNoYXIoZGlmZnNbaV1bMV0sIGluc2VydENoYXIsIGRpcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IFt0ZXh0LCBjaGFyXSA9IHNwbGl0Q2hhcihkaWZmc1tpXVsxXSwgZGlyKTtcbiAgZGlmZnNbaV1bMV0gPSB0ZXh0LCBpbnNlcnRJZHggPT09IG51bGwgPyAoZGlmZnMuc3BsaWNlKGosIDAsIFtESUZGX0lOU0VSVCwgY2hhcl0pLCBkZWxldGVJZHggIT09IG51bGwgJiYgZGVsZXRlSWR4ID49IGogJiYgZGVsZXRlSWR4KyspIDogZGlmZnNbaW5zZXJ0SWR4XVsxXSA9IGNvbWJpbmVDaGFyKGRpZmZzW2luc2VydElkeF1bMV0sIGNoYXIsIGludiksIGRlbGV0ZUlkeCA9PT0gbnVsbCA/IGRpZmZzLnNwbGljZShqLCAwLCBbRElGRl9ERUxFVEUsIGNoYXJdKSA6IGRpZmZzW2RlbGV0ZUlkeF1bMV0gPSBjb21iaW5lQ2hhcihkaWZmc1tkZWxldGVJZHhdWzFdLCBjaGFyLCBpbnYpO1xufVxuZnVuY3Rpb24gYWRqdXN0RGlmZkZvclN1cnJvZ2F0ZVBhaXJzKGRpZmZzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlmZnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBbZGlmZlR5cGUsIGRpZmZUZXh0XSA9IGRpZmZzW2ldO1xuICAgIGlmIChkaWZmVGV4dC5sZW5ndGggPT09IDApIGNvbnRpbnVlO1xuICAgIGNvbnN0IGZpcnN0Q2hhciA9IGRpZmZUZXh0WzBdLCBsYXN0Q2hhciA9IGRpZmZUZXh0W2RpZmZUZXh0Lmxlbmd0aCAtIDFdO1xuICAgIGlzSGlnaFN1cnJvZ2F0ZShsYXN0Q2hhcikgJiYgZGlmZlR5cGUgPT09IERJRkZfRVFVQUwgJiYgZGVpc29sYXRlQ2hhcihkaWZmcywgaSwgMSksIGlzTG93U3Vycm9nYXRlKGZpcnN0Q2hhcikgJiYgZGlmZlR5cGUgPT09IERJRkZfRVFVQUwgJiYgZGVpc29sYXRlQ2hhcihkaWZmcywgaSwgLTEpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlmZnMubGVuZ3RoOyBpKyspIGRpZmZzW2ldWzFdLmxlbmd0aCA9PT0gMCAmJiBkaWZmcy5zcGxpY2UoaSwgMSk7XG59XG5mdW5jdGlvbiBjbGVhbnVwU2VtYW50aWMocmF3RGlmZnMpIHtcbiAgbGV0IGRpZmZzID0gcmF3RGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSksIGhhc0NoYW5nZXMgPSAhMTtcbiAgY29uc3QgZXF1YWxpdGllcyA9IFtdO1xuICBsZXQgZXF1YWxpdGllc0xlbmd0aCA9IDAsIGxhc3RFcXVhbGl0eSA9IG51bGwsIHBvaW50ZXIgPSAwLCBsZW5ndGhJbnNlcnRpb25zMSA9IDAsIGxlbmd0aERlbGV0aW9uczEgPSAwLCBsZW5ndGhJbnNlcnRpb25zMiA9IDAsIGxlbmd0aERlbGV0aW9uczIgPSAwO1xuICBmb3IgKDsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aDsgKSBkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9FUVVBTCA/IChlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGgrK10gPSBwb2ludGVyLCBsZW5ndGhJbnNlcnRpb25zMSA9IGxlbmd0aEluc2VydGlvbnMyLCBsZW5ndGhEZWxldGlvbnMxID0gbGVuZ3RoRGVsZXRpb25zMiwgbGVuZ3RoSW5zZXJ0aW9uczIgPSAwLCBsZW5ndGhEZWxldGlvbnMyID0gMCwgbGFzdEVxdWFsaXR5ID0gZGlmZnNbcG9pbnRlcl1bMV0pIDogKGRpZmZzW3BvaW50ZXJdWzBdID09PSBESUZGX0lOU0VSVCA/IGxlbmd0aEluc2VydGlvbnMyICs9IGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCA6IGxlbmd0aERlbGV0aW9uczIgKz0gZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoLCBsYXN0RXF1YWxpdHkgJiYgbGFzdEVxdWFsaXR5Lmxlbmd0aCA8PSBNYXRoLm1heChsZW5ndGhJbnNlcnRpb25zMSwgbGVuZ3RoRGVsZXRpb25zMSkgJiYgbGFzdEVxdWFsaXR5Lmxlbmd0aCA8PSBNYXRoLm1heChsZW5ndGhJbnNlcnRpb25zMiwgbGVuZ3RoRGVsZXRpb25zMikgJiYgKGRpZmZzLnNwbGljZShlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGggLSAxXSwgMCwgW0RJRkZfREVMRVRFLCBsYXN0RXF1YWxpdHldKSwgZGlmZnNbZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0gKyAxXVswXSA9IERJRkZfSU5TRVJULCBlcXVhbGl0aWVzTGVuZ3RoLS0sIGVxdWFsaXRpZXNMZW5ndGgtLSwgcG9pbnRlciA9IGVxdWFsaXRpZXNMZW5ndGggPiAwID8gZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0gOiAtMSwgbGVuZ3RoSW5zZXJ0aW9uczEgPSAwLCBsZW5ndGhEZWxldGlvbnMxID0gMCwgbGVuZ3RoSW5zZXJ0aW9uczIgPSAwLCBsZW5ndGhEZWxldGlvbnMyID0gMCwgbGFzdEVxdWFsaXR5ID0gbnVsbCwgaGFzQ2hhbmdlcyA9ICEwKSksIHBvaW50ZXIrKztcbiAgZm9yIChoYXNDaGFuZ2VzICYmIChkaWZmcyA9IGNsZWFudXBNZXJnZShkaWZmcykpLCBkaWZmcyA9IGNsZWFudXBTZW1hbnRpY0xvc3NsZXNzKGRpZmZzKSwgcG9pbnRlciA9IDE7IHBvaW50ZXIgPCBkaWZmcy5sZW5ndGg7ICkge1xuICAgIGlmIChkaWZmc1twb2ludGVyIC0gMV1bMF0gPT09IERJRkZfREVMRVRFICYmIGRpZmZzW3BvaW50ZXJdWzBdID09PSBESUZGX0lOU0VSVCkge1xuICAgICAgY29uc3QgZGVsZXRpb24gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0sIGluc2VydGlvbiA9IGRpZmZzW3BvaW50ZXJdWzFdLCBvdmVybGFwTGVuZ3RoMSA9IGdldENvbW1vbk92ZXJsYXAoZGVsZXRpb24sIGluc2VydGlvbiksIG92ZXJsYXBMZW5ndGgyID0gZ2V0Q29tbW9uT3ZlcmxhcChpbnNlcnRpb24sIGRlbGV0aW9uKTtcbiAgICAgIG92ZXJsYXBMZW5ndGgxID49IG92ZXJsYXBMZW5ndGgyID8gKG92ZXJsYXBMZW5ndGgxID49IGRlbGV0aW9uLmxlbmd0aCAvIDIgfHwgb3ZlcmxhcExlbmd0aDEgPj0gaW5zZXJ0aW9uLmxlbmd0aCAvIDIpICYmIChkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgW0RJRkZfRVFVQUwsIGluc2VydGlvbi5zdWJzdHJpbmcoMCwgb3ZlcmxhcExlbmd0aDEpXSksIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSA9IGRlbGV0aW9uLnN1YnN0cmluZygwLCBkZWxldGlvbi5sZW5ndGggLSBvdmVybGFwTGVuZ3RoMSksIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGluc2VydGlvbi5zdWJzdHJpbmcob3ZlcmxhcExlbmd0aDEpLCBwb2ludGVyKyspIDogKG92ZXJsYXBMZW5ndGgyID49IGRlbGV0aW9uLmxlbmd0aCAvIDIgfHwgb3ZlcmxhcExlbmd0aDIgPj0gaW5zZXJ0aW9uLmxlbmd0aCAvIDIpICYmIChkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgW0RJRkZfRVFVQUwsIGRlbGV0aW9uLnN1YnN0cmluZygwLCBvdmVybGFwTGVuZ3RoMildKSwgZGlmZnNbcG9pbnRlciAtIDFdWzBdID0gRElGRl9JTlNFUlQsIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSA9IGluc2VydGlvbi5zdWJzdHJpbmcoMCwgaW5zZXJ0aW9uLmxlbmd0aCAtIG92ZXJsYXBMZW5ndGgyKSwgZGlmZnNbcG9pbnRlciArIDFdWzBdID0gRElGRl9ERUxFVEUsIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGRlbGV0aW9uLnN1YnN0cmluZyhvdmVybGFwTGVuZ3RoMiksIHBvaW50ZXIrKyksIHBvaW50ZXIrKztcbiAgICB9XG4gICAgcG9pbnRlcisrO1xuICB9XG4gIHJldHVybiBkaWZmcztcbn1cbmNvbnN0IG5vbkFscGhhTnVtZXJpY1JlZ2V4ID0gL1teYS16QS1aMC05XS8sIHdoaXRlc3BhY2VSZWdleCA9IC9cXHMvLCBsaW5lYnJlYWtSZWdleCA9IC9bXFxyXFxuXS8sIGJsYW5rbGluZUVuZFJlZ2V4ID0gL1xcblxccj9cXG4kLywgYmxhbmtsaW5lU3RhcnRSZWdleCA9IC9eXFxyP1xcblxccj9cXG4vO1xuZnVuY3Rpb24gY2xlYW51cFNlbWFudGljTG9zc2xlc3MocmF3RGlmZnMpIHtcbiAgY29uc3QgZGlmZnMgPSByYXdEaWZmcy5tYXAoKGRpZmYyKSA9PiBjbG9uZURpZmYoZGlmZjIpKTtcbiAgZnVuY3Rpb24gZGlmZkNsZWFudXBTZW1hbnRpY1Njb3JlKG9uZSwgdHdvKSB7XG4gICAgaWYgKCFvbmUgfHwgIXR3bykgcmV0dXJuIDY7XG4gICAgY29uc3QgY2hhcjEgPSBvbmUuY2hhckF0KG9uZS5sZW5ndGggLSAxKSwgY2hhcjIgPSB0d28uY2hhckF0KDApLCBub25BbHBoYU51bWVyaWMxID0gY2hhcjEubWF0Y2gobm9uQWxwaGFOdW1lcmljUmVnZXgpLCBub25BbHBoYU51bWVyaWMyID0gY2hhcjIubWF0Y2gobm9uQWxwaGFOdW1lcmljUmVnZXgpLCB3aGl0ZXNwYWNlMSA9IG5vbkFscGhhTnVtZXJpYzEgJiYgY2hhcjEubWF0Y2god2hpdGVzcGFjZVJlZ2V4KSwgd2hpdGVzcGFjZTIgPSBub25BbHBoYU51bWVyaWMyICYmIGNoYXIyLm1hdGNoKHdoaXRlc3BhY2VSZWdleCksIGxpbmVCcmVhazEgPSB3aGl0ZXNwYWNlMSAmJiBjaGFyMS5tYXRjaChsaW5lYnJlYWtSZWdleCksIGxpbmVCcmVhazIgPSB3aGl0ZXNwYWNlMiAmJiBjaGFyMi5tYXRjaChsaW5lYnJlYWtSZWdleCksIGJsYW5rTGluZTEgPSBsaW5lQnJlYWsxICYmIG9uZS5tYXRjaChibGFua2xpbmVFbmRSZWdleCksIGJsYW5rTGluZTIgPSBsaW5lQnJlYWsyICYmIHR3by5tYXRjaChibGFua2xpbmVTdGFydFJlZ2V4KTtcbiAgICByZXR1cm4gYmxhbmtMaW5lMSB8fCBibGFua0xpbmUyID8gNSA6IGxpbmVCcmVhazEgfHwgbGluZUJyZWFrMiA/IDQgOiBub25BbHBoYU51bWVyaWMxICYmICF3aGl0ZXNwYWNlMSAmJiB3aGl0ZXNwYWNlMiA/IDMgOiB3aGl0ZXNwYWNlMSB8fCB3aGl0ZXNwYWNlMiA/IDIgOiBub25BbHBoYU51bWVyaWMxIHx8IG5vbkFscGhhTnVtZXJpYzIgPyAxIDogMDtcbiAgfVxuICBsZXQgcG9pbnRlciA9IDE7XG4gIGZvciAoOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoIC0gMTsgKSB7XG4gICAgaWYgKGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PT0gRElGRl9FUVVBTCAmJiBkaWZmc1twb2ludGVyICsgMV1bMF0gPT09IERJRkZfRVFVQUwpIHtcbiAgICAgIGxldCBlcXVhbGl0eTEgPSBkaWZmc1twb2ludGVyIC0gMV1bMV0sIGVkaXQgPSBkaWZmc1twb2ludGVyXVsxXSwgZXF1YWxpdHkyID0gZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgY29uc3QgY29tbW9uT2Zmc2V0ID0gZ2V0Q29tbW9uU3VmZml4KGVxdWFsaXR5MSwgZWRpdCk7XG4gICAgICBpZiAoY29tbW9uT2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IGNvbW1vblN0cmluZyA9IGVkaXQuc3Vic3RyaW5nKGVkaXQubGVuZ3RoIC0gY29tbW9uT2Zmc2V0KTtcbiAgICAgICAgZXF1YWxpdHkxID0gZXF1YWxpdHkxLnN1YnN0cmluZygwLCBlcXVhbGl0eTEubGVuZ3RoIC0gY29tbW9uT2Zmc2V0KSwgZWRpdCA9IGNvbW1vblN0cmluZyArIGVkaXQuc3Vic3RyaW5nKDAsIGVkaXQubGVuZ3RoIC0gY29tbW9uT2Zmc2V0KSwgZXF1YWxpdHkyID0gY29tbW9uU3RyaW5nICsgZXF1YWxpdHkyO1xuICAgICAgfVxuICAgICAgbGV0IGJlc3RFcXVhbGl0eTEgPSBlcXVhbGl0eTEsIGJlc3RFZGl0ID0gZWRpdCwgYmVzdEVxdWFsaXR5MiA9IGVxdWFsaXR5MiwgYmVzdFNjb3JlID0gZGlmZkNsZWFudXBTZW1hbnRpY1Njb3JlKGVxdWFsaXR5MSwgZWRpdCkgKyBkaWZmQ2xlYW51cFNlbWFudGljU2NvcmUoZWRpdCwgZXF1YWxpdHkyKTtcbiAgICAgIGZvciAoOyBlZGl0LmNoYXJBdCgwKSA9PT0gZXF1YWxpdHkyLmNoYXJBdCgwKTsgKSB7XG4gICAgICAgIGVxdWFsaXR5MSArPSBlZGl0LmNoYXJBdCgwKSwgZWRpdCA9IGVkaXQuc3Vic3RyaW5nKDEpICsgZXF1YWxpdHkyLmNoYXJBdCgwKSwgZXF1YWxpdHkyID0gZXF1YWxpdHkyLnN1YnN0cmluZygxKTtcbiAgICAgICAgY29uc3Qgc2NvcmUgPSBkaWZmQ2xlYW51cFNlbWFudGljU2NvcmUoZXF1YWxpdHkxLCBlZGl0KSArIGRpZmZDbGVhbnVwU2VtYW50aWNTY29yZShlZGl0LCBlcXVhbGl0eTIpO1xuICAgICAgICBzY29yZSA+PSBiZXN0U2NvcmUgJiYgKGJlc3RTY29yZSA9IHNjb3JlLCBiZXN0RXF1YWxpdHkxID0gZXF1YWxpdHkxLCBiZXN0RWRpdCA9IGVkaXQsIGJlc3RFcXVhbGl0eTIgPSBlcXVhbGl0eTIpO1xuICAgICAgfVxuICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdICE9PSBiZXN0RXF1YWxpdHkxICYmIChiZXN0RXF1YWxpdHkxID8gZGlmZnNbcG9pbnRlciAtIDFdWzFdID0gYmVzdEVxdWFsaXR5MSA6IChkaWZmcy5zcGxpY2UocG9pbnRlciAtIDEsIDEpLCBwb2ludGVyLS0pLCBkaWZmc1twb2ludGVyXVsxXSA9IGJlc3RFZGl0LCBiZXN0RXF1YWxpdHkyID8gZGlmZnNbcG9pbnRlciArIDFdWzFdID0gYmVzdEVxdWFsaXR5MiA6IChkaWZmcy5zcGxpY2UocG9pbnRlciArIDEsIDEpLCBwb2ludGVyLS0pKTtcbiAgICB9XG4gICAgcG9pbnRlcisrO1xuICB9XG4gIHJldHVybiBkaWZmcztcbn1cbmZ1bmN0aW9uIGNsZWFudXBNZXJnZShyYXdEaWZmcykge1xuICBsZXQgZGlmZnMgPSByYXdEaWZmcy5tYXAoKGRpZmYyKSA9PiBjbG9uZURpZmYoZGlmZjIpKTtcbiAgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgXCJcIl0pO1xuICBsZXQgcG9pbnRlciA9IDAsIGNvdW50RGVsZXRlID0gMCwgY291bnRJbnNlcnQgPSAwLCB0ZXh0RGVsZXRlID0gXCJcIiwgdGV4dEluc2VydCA9IFwiXCIsIGNvbW1vbmxlbmd0aDtcbiAgZm9yICg7IHBvaW50ZXIgPCBkaWZmcy5sZW5ndGg7ICkgc3dpdGNoIChkaWZmc1twb2ludGVyXVswXSkge1xuICAgIGNhc2UgRElGRl9JTlNFUlQ6XG4gICAgICBjb3VudEluc2VydCsrLCB0ZXh0SW5zZXJ0ICs9IGRpZmZzW3BvaW50ZXJdWzFdLCBwb2ludGVyKys7XG4gICAgICBicmVhaztcbiAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgY291bnREZWxldGUrKywgdGV4dERlbGV0ZSArPSBkaWZmc1twb2ludGVyXVsxXSwgcG9pbnRlcisrO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBESUZGX0VRVUFMOlxuICAgICAgY291bnREZWxldGUgKyBjb3VudEluc2VydCA+IDEgPyAoY291bnREZWxldGUgIT09IDAgJiYgY291bnRJbnNlcnQgIT09IDAgJiYgKGNvbW1vbmxlbmd0aCA9IGdldENvbW1vblByZWZpeCh0ZXh0SW5zZXJ0LCB0ZXh0RGVsZXRlKSwgY29tbW9ubGVuZ3RoICE9PSAwICYmIChwb2ludGVyIC0gY291bnREZWxldGUgLSBjb3VudEluc2VydCA+IDAgJiYgZGlmZnNbcG9pbnRlciAtIGNvdW50RGVsZXRlIC0gY291bnRJbnNlcnQgLSAxXVswXSA9PT0gRElGRl9FUVVBTCA/IGRpZmZzW3BvaW50ZXIgLSBjb3VudERlbGV0ZSAtIGNvdW50SW5zZXJ0IC0gMV1bMV0gKz0gdGV4dEluc2VydC5zdWJzdHJpbmcoMCwgY29tbW9ubGVuZ3RoKSA6IChkaWZmcy5zcGxpY2UoMCwgMCwgW0RJRkZfRVFVQUwsIHRleHRJbnNlcnQuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCldKSwgcG9pbnRlcisrKSwgdGV4dEluc2VydCA9IHRleHRJbnNlcnQuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCksIHRleHREZWxldGUgPSB0ZXh0RGVsZXRlLnN1YnN0cmluZyhjb21tb25sZW5ndGgpKSwgY29tbW9ubGVuZ3RoID0gZ2V0Q29tbW9uU3VmZml4KHRleHRJbnNlcnQsIHRleHREZWxldGUpLCBjb21tb25sZW5ndGggIT09IDAgJiYgKGRpZmZzW3BvaW50ZXJdWzFdID0gdGV4dEluc2VydC5zdWJzdHJpbmcodGV4dEluc2VydC5sZW5ndGggLSBjb21tb25sZW5ndGgpICsgZGlmZnNbcG9pbnRlcl1bMV0sIHRleHRJbnNlcnQgPSB0ZXh0SW5zZXJ0LnN1YnN0cmluZygwLCB0ZXh0SW5zZXJ0Lmxlbmd0aCAtIGNvbW1vbmxlbmd0aCksIHRleHREZWxldGUgPSB0ZXh0RGVsZXRlLnN1YnN0cmluZygwLCB0ZXh0RGVsZXRlLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCkpKSwgcG9pbnRlciAtPSBjb3VudERlbGV0ZSArIGNvdW50SW5zZXJ0LCBkaWZmcy5zcGxpY2UocG9pbnRlciwgY291bnREZWxldGUgKyBjb3VudEluc2VydCksIHRleHREZWxldGUubGVuZ3RoICYmIChkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgW0RJRkZfREVMRVRFLCB0ZXh0RGVsZXRlXSksIHBvaW50ZXIrKyksIHRleHRJbnNlcnQubGVuZ3RoICYmIChkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgW0RJRkZfSU5TRVJULCB0ZXh0SW5zZXJ0XSksIHBvaW50ZXIrKyksIHBvaW50ZXIrKykgOiBwb2ludGVyICE9PSAwICYmIGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PT0gRElGRl9FUVVBTCA/IChkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlcl1bMV0sIGRpZmZzLnNwbGljZShwb2ludGVyLCAxKSkgOiBwb2ludGVyKyssIGNvdW50SW5zZXJ0ID0gMCwgY291bnREZWxldGUgPSAwLCB0ZXh0RGVsZXRlID0gXCJcIiwgdGV4dEluc2VydCA9IFwiXCI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkaWZmIG9wZXJhdGlvblwiKTtcbiAgfVxuICBkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXSA9PT0gXCJcIiAmJiBkaWZmcy5wb3AoKTtcbiAgbGV0IGhhc0NoYW5nZXMgPSAhMTtcbiAgZm9yIChwb2ludGVyID0gMTsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aCAtIDE7ICkgZGlmZnNbcG9pbnRlciAtIDFdWzBdID09PSBESUZGX0VRVUFMICYmIGRpZmZzW3BvaW50ZXIgKyAxXVswXSA9PT0gRElGRl9FUVVBTCAmJiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtIGRpZmZzW3BvaW50ZXIgLSAxXVsxXS5sZW5ndGgpID09PSBkaWZmc1twb2ludGVyIC0gMV1bMV0gPyAoZGlmZnNbcG9pbnRlcl1bMV0gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0gKyBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoIC0gZGlmZnNbcG9pbnRlciAtIDFdWzFdLmxlbmd0aCksIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSwgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSAxLCAxKSwgaGFzQ2hhbmdlcyA9ICEwKSA6IGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZygwLCBkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSA9PT0gZGlmZnNbcG9pbnRlciArIDFdWzFdICYmIChkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlciArIDFdWzFdLCBkaWZmc1twb2ludGVyXVsxXSA9IGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSArIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSwgZGlmZnMuc3BsaWNlKHBvaW50ZXIgKyAxLCAxKSwgaGFzQ2hhbmdlcyA9ICEwKSksIHBvaW50ZXIrKztcbiAgcmV0dXJuIGhhc0NoYW5nZXMgJiYgKGRpZmZzID0gY2xlYW51cE1lcmdlKGRpZmZzKSksIGRpZmZzO1xufVxuZnVuY3Rpb24gdHJ1ZUNvdW50KC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGFyZ3MucmVkdWNlKChuLCBib29sKSA9PiBuICsgKGJvb2wgPyAxIDogMCksIDApO1xufVxuZnVuY3Rpb24gY2xlYW51cEVmZmljaWVuY3kocmF3RGlmZnMsIGVkaXRDb3N0ID0gNCkge1xuICBsZXQgZGlmZnMgPSByYXdEaWZmcy5tYXAoKGRpZmYyKSA9PiBjbG9uZURpZmYoZGlmZjIpKSwgaGFzQ2hhbmdlcyA9ICExO1xuICBjb25zdCBlcXVhbGl0aWVzID0gW107XG4gIGxldCBlcXVhbGl0aWVzTGVuZ3RoID0gMCwgbGFzdEVxdWFsaXR5ID0gbnVsbCwgcG9pbnRlciA9IDAsIHByZUlucyA9ICExLCBwcmVEZWwgPSAhMSwgcG9zdElucyA9ICExLCBwb3N0RGVsID0gITE7XG4gIGZvciAoOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoOyApIGRpZmZzW3BvaW50ZXJdWzBdID09PSBESUZGX0VRVUFMID8gKGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCA8IGVkaXRDb3N0ICYmIChwb3N0SW5zIHx8IHBvc3REZWwpID8gKGVxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCsrXSA9IHBvaW50ZXIsIHByZUlucyA9IHBvc3RJbnMsIHByZURlbCA9IHBvc3REZWwsIGxhc3RFcXVhbGl0eSA9IGRpZmZzW3BvaW50ZXJdWzFdKSA6IChlcXVhbGl0aWVzTGVuZ3RoID0gMCwgbGFzdEVxdWFsaXR5ID0gbnVsbCksIHBvc3RJbnMgPSAhMSwgcG9zdERlbCA9ICExKSA6IChkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9ERUxFVEUgPyBwb3N0RGVsID0gITAgOiBwb3N0SW5zID0gITAsIGxhc3RFcXVhbGl0eSAmJiAocHJlSW5zICYmIHByZURlbCAmJiBwb3N0SW5zICYmIHBvc3REZWwgfHwgbGFzdEVxdWFsaXR5Lmxlbmd0aCA8IGVkaXRDb3N0IC8gMiAmJiB0cnVlQ291bnQocHJlSW5zLCBwcmVEZWwsIHBvc3RJbnMsIHBvc3REZWwpID09PSAzKSAmJiAoZGlmZnMuc3BsaWNlKGVxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCAtIDFdLCAwLCBbRElGRl9ERUxFVEUsIGxhc3RFcXVhbGl0eV0pLCBkaWZmc1tlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGggLSAxXSArIDFdWzBdID0gRElGRl9JTlNFUlQsIGVxdWFsaXRpZXNMZW5ndGgtLSwgbGFzdEVxdWFsaXR5ID0gbnVsbCwgcHJlSW5zICYmIHByZURlbCA/IChwb3N0SW5zID0gITAsIHBvc3REZWwgPSAhMCwgZXF1YWxpdGllc0xlbmd0aCA9IDApIDogKGVxdWFsaXRpZXNMZW5ndGgtLSwgcG9pbnRlciA9IGVxdWFsaXRpZXNMZW5ndGggPiAwID8gZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0gOiAtMSwgcG9zdElucyA9ICExLCBwb3N0RGVsID0gITEpLCBoYXNDaGFuZ2VzID0gITApKSwgcG9pbnRlcisrO1xuICByZXR1cm4gaGFzQ2hhbmdlcyAmJiAoZGlmZnMgPSBjbGVhbnVwTWVyZ2UoZGlmZnMpKSwgZGlmZnM7XG59XG52YXIgX19kZWZQcm9wJDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIF9fZ2V0T3duUHJvcFN5bWJvbHMkMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsIF9faGFzT3duUHJvcCQxID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwgX19wcm9wSXNFbnVtJDEgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLCBfX2RlZk5vcm1hbFByb3AkMSA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3AkMShvYmosIGtleSwge1xuICBlbnVtZXJhYmxlOiAhMCxcbiAgY29uZmlndXJhYmxlOiAhMCxcbiAgd3JpdGFibGU6ICEwLFxuICB2YWx1ZVxufSkgOiBvYmpba2V5XSA9IHZhbHVlLCBfX3NwcmVhZFZhbHVlcyQxID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKSBfX2hhc093blByb3AkMS5jYWxsKGIsIHByb3ApICYmIF9fZGVmTm9ybWFsUHJvcCQxKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scyQxKSBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMkMShiKSkgX19wcm9wSXNFbnVtJDEuY2FsbChiLCBwcm9wKSAmJiBfX2RlZk5vcm1hbFByb3AkMShhLCBwcm9wLCBiW3Byb3BdKTtcbiAgcmV0dXJuIGE7XG59O1xuY29uc3QgREVGQVVMVF9PUFRJT05TID0ge1xuICAvKipcbiAgICogQXQgd2hhdCBwb2ludCBpcyBubyBtYXRjaCBkZWNsYXJlZCAoMC4wID0gcGVyZmVjdGlvbiwgMS4wID0gdmVyeSBsb29zZSkuXG4gICAqL1xuICB0aHJlc2hvbGQ6IDAuNSxcbiAgLyoqXG4gICAqIEhvdyBmYXIgdG8gc2VhcmNoIGZvciBhIG1hdGNoICgwID0gZXhhY3QgbG9jYXRpb24sIDEwMDArID0gYnJvYWQgbWF0Y2gpLlxuICAgKiBBIG1hdGNoIHRoaXMgbWFueSBjaGFyYWN0ZXJzIGF3YXkgZnJvbSB0aGUgZXhwZWN0ZWQgbG9jYXRpb24gd2lsbCBhZGRcbiAgICogMS4wIHRvIHRoZSBzY29yZSAoMC4wIGlzIGEgcGVyZmVjdCBtYXRjaCkuXG4gICAqL1xuICBkaXN0YW5jZTogMWUzXG59O1xuZnVuY3Rpb24gYXBwbHlEZWZhdWx0cyhvcHRpb25zKSB7XG4gIHJldHVybiBfX3NwcmVhZFZhbHVlcyQxKF9fc3ByZWFkVmFsdWVzJDEoe30sIERFRkFVTFRfT1BUSU9OUyksIG9wdGlvbnMpO1xufVxuY29uc3QgTUFYX0JJVFMkMSA9IDMyO1xuZnVuY3Rpb24gYml0YXAodGV4dCwgcGF0dGVybiwgbG9jLCBvcHRzID0ge30pIHtcbiAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gTUFYX0JJVFMkMSkgdGhyb3cgbmV3IEVycm9yKFwiUGF0dGVybiB0b28gbG9uZyBmb3IgdGhpcyBicm93c2VyLlwiKTtcbiAgY29uc3Qgb3B0aW9ucyA9IGFwcGx5RGVmYXVsdHMob3B0cyksIHMgPSBnZXRBbHBoYWJldEZyb21QYXR0ZXJuKHBhdHRlcm4pO1xuICBmdW5jdGlvbiBnZXRCaXRhcFNjb3JlKGUsIHgpIHtcbiAgICBjb25zdCBhY2N1cmFjeSA9IGUgLyBwYXR0ZXJuLmxlbmd0aCwgcHJveGltaXR5ID0gTWF0aC5hYnMobG9jIC0geCk7XG4gICAgcmV0dXJuIG9wdGlvbnMuZGlzdGFuY2UgPyBhY2N1cmFjeSArIHByb3hpbWl0eSAvIG9wdGlvbnMuZGlzdGFuY2UgOiBwcm94aW1pdHkgPyAxIDogYWNjdXJhY3k7XG4gIH1cbiAgbGV0IHNjb3JlVGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGQsIGJlc3RMb2MgPSB0ZXh0LmluZGV4T2YocGF0dGVybiwgbG9jKTtcbiAgYmVzdExvYyAhPT0gLTEgJiYgKHNjb3JlVGhyZXNob2xkID0gTWF0aC5taW4oZ2V0Qml0YXBTY29yZSgwLCBiZXN0TG9jKSwgc2NvcmVUaHJlc2hvbGQpLCBiZXN0TG9jID0gdGV4dC5sYXN0SW5kZXhPZihwYXR0ZXJuLCBsb2MgKyBwYXR0ZXJuLmxlbmd0aCksIGJlc3RMb2MgIT09IC0xICYmIChzY29yZVRocmVzaG9sZCA9IE1hdGgubWluKGdldEJpdGFwU2NvcmUoMCwgYmVzdExvYyksIHNjb3JlVGhyZXNob2xkKSkpO1xuICBjb25zdCBtYXRjaG1hc2sgPSAxIDw8IHBhdHRlcm4ubGVuZ3RoIC0gMTtcbiAgYmVzdExvYyA9IC0xO1xuICBsZXQgYmluTWluLCBiaW5NaWQsIGJpbk1heCA9IHBhdHRlcm4ubGVuZ3RoICsgdGV4dC5sZW5ndGgsIGxhc3RSZCA9IFtdO1xuICBmb3IgKGxldCBkID0gMDsgZCA8IHBhdHRlcm4ubGVuZ3RoOyBkKyspIHtcbiAgICBmb3IgKGJpbk1pbiA9IDAsIGJpbk1pZCA9IGJpbk1heDsgYmluTWluIDwgYmluTWlkOyApIGdldEJpdGFwU2NvcmUoZCwgbG9jICsgYmluTWlkKSA8PSBzY29yZVRocmVzaG9sZCA/IGJpbk1pbiA9IGJpbk1pZCA6IGJpbk1heCA9IGJpbk1pZCwgYmluTWlkID0gTWF0aC5mbG9vcigoYmluTWF4IC0gYmluTWluKSAvIDIgKyBiaW5NaW4pO1xuICAgIGJpbk1heCA9IGJpbk1pZDtcbiAgICBsZXQgc3RhcnQgPSBNYXRoLm1heCgxLCBsb2MgLSBiaW5NaWQgKyAxKTtcbiAgICBjb25zdCBmaW5pc2ggPSBNYXRoLm1pbihsb2MgKyBiaW5NaWQsIHRleHQubGVuZ3RoKSArIHBhdHRlcm4ubGVuZ3RoLCByZCA9IG5ldyBBcnJheShmaW5pc2ggKyAyKTtcbiAgICByZFtmaW5pc2ggKyAxXSA9ICgxIDw8IGQpIC0gMTtcbiAgICBmb3IgKGxldCBqID0gZmluaXNoOyBqID49IHN0YXJ0OyBqLS0pIHtcbiAgICAgIGNvbnN0IGNoYXJNYXRjaCA9IHNbdGV4dC5jaGFyQXQoaiAtIDEpXTtcbiAgICAgIGlmIChkID09PSAwID8gcmRbal0gPSAocmRbaiArIDFdIDw8IDEgfCAxKSAmIGNoYXJNYXRjaCA6IHJkW2pdID0gKHJkW2ogKyAxXSA8PCAxIHwgMSkgJiBjaGFyTWF0Y2ggfCAoKGxhc3RSZFtqICsgMV0gfCBsYXN0UmRbal0pIDw8IDEgfCAxKSB8IGxhc3RSZFtqICsgMV0sIHJkW2pdICYgbWF0Y2htYXNrKSB7XG4gICAgICAgIGNvbnN0IHNjb3JlID0gZ2V0Qml0YXBTY29yZShkLCBqIC0gMSk7XG4gICAgICAgIGlmIChzY29yZSA8PSBzY29yZVRocmVzaG9sZCkgaWYgKHNjb3JlVGhyZXNob2xkID0gc2NvcmUsIGJlc3RMb2MgPSBqIC0gMSwgYmVzdExvYyA+IGxvYykgc3RhcnQgPSBNYXRoLm1heCgxLCAyICogbG9jIC0gYmVzdExvYyk7XG4gICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChnZXRCaXRhcFNjb3JlKGQgKyAxLCBsb2MpID4gc2NvcmVUaHJlc2hvbGQpIGJyZWFrO1xuICAgIGxhc3RSZCA9IHJkO1xuICB9XG4gIHJldHVybiBiZXN0TG9jO1xufVxuZnVuY3Rpb24gZ2V0QWxwaGFiZXRGcm9tUGF0dGVybihwYXR0ZXJuKSB7XG4gIGNvbnN0IHMgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJuLmxlbmd0aDsgaSsrKSBzW3BhdHRlcm4uY2hhckF0KGkpXSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7IGkrKykgc1twYXR0ZXJuLmNoYXJBdChpKV0gfD0gMSA8PCBwYXR0ZXJuLmxlbmd0aCAtIGkgLSAxO1xuICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIG1hdGNoKHRleHQsIHBhdHRlcm4sIHNlYXJjaExvY2F0aW9uLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKHRleHQgPT09IG51bGwgfHwgcGF0dGVybiA9PT0gbnVsbCB8fCBzZWFyY2hMb2NhdGlvbiA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiTnVsbCBpbnB1dC4gKG1hdGNoKCkpXCIpO1xuICBjb25zdCBsb2MgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzZWFyY2hMb2NhdGlvbiwgdGV4dC5sZW5ndGgpKTtcbiAgaWYgKHRleHQgPT09IHBhdHRlcm4pIHJldHVybiAwO1xuICBpZiAodGV4dC5sZW5ndGgpIHtcbiAgICBpZiAodGV4dC5zdWJzdHJpbmcobG9jLCBsb2MgKyBwYXR0ZXJuLmxlbmd0aCkgPT09IHBhdHRlcm4pIHJldHVybiBsb2M7XG4gIH0gZWxzZSByZXR1cm4gLTE7XG4gIHJldHVybiBiaXRhcCh0ZXh0LCBwYXR0ZXJuLCBsb2MsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZGlmZlRleHQxKGRpZmZzKSB7XG4gIGNvbnN0IHRleHQgPSBbXTtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBkaWZmcy5sZW5ndGg7IHgrKykgZGlmZnNbeF1bMF0gIT09IERJRkZfSU5TRVJUICYmICh0ZXh0W3hdID0gZGlmZnNbeF1bMV0pO1xuICByZXR1cm4gdGV4dC5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gZGlmZlRleHQyKGRpZmZzKSB7XG4gIGNvbnN0IHRleHQgPSBbXTtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBkaWZmcy5sZW5ndGg7IHgrKykgZGlmZnNbeF1bMF0gIT09IERJRkZfREVMRVRFICYmICh0ZXh0W3hdID0gZGlmZnNbeF1bMV0pO1xuICByZXR1cm4gdGV4dC5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gbGV2ZW5zaHRlaW4oZGlmZnMpIHtcbiAgbGV0IGxldmVuID0gMCwgaW5zZXJ0aW9ucyA9IDAsIGRlbGV0aW9ucyA9IDA7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgZGlmZnMubGVuZ3RoOyB4KyspIHtcbiAgICBjb25zdCBvcCA9IGRpZmZzW3hdWzBdLCBkYXRhID0gZGlmZnNbeF1bMV07XG4gICAgc3dpdGNoIChvcCkge1xuICAgICAgY2FzZSBESUZGX0lOU0VSVDpcbiAgICAgICAgaW5zZXJ0aW9ucyArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgICBkZWxldGlvbnMgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0VRVUFMOlxuICAgICAgICBsZXZlbiArPSBNYXRoLm1heChpbnNlcnRpb25zLCBkZWxldGlvbnMpLCBpbnNlcnRpb25zID0gMCwgZGVsZXRpb25zID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRpZmYgb3BlcmF0aW9uLlwiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxldmVuICs9IE1hdGgubWF4KGluc2VydGlvbnMsIGRlbGV0aW9ucyksIGxldmVuO1xufVxuZnVuY3Rpb24geEluZGV4KGRpZmZzLCBsb2NhdGlvbikge1xuICBsZXQgY2hhcnMxID0gMCwgY2hhcnMyID0gMCwgbGFzdENoYXJzMSA9IDAsIGxhc3RDaGFyczIgPSAwLCB4O1xuICBmb3IgKHggPSAwOyB4IDwgZGlmZnMubGVuZ3RoICYmIChkaWZmc1t4XVswXSAhPT0gRElGRl9JTlNFUlQgJiYgKGNoYXJzMSArPSBkaWZmc1t4XVsxXS5sZW5ndGgpLCBkaWZmc1t4XVswXSAhPT0gRElGRl9ERUxFVEUgJiYgKGNoYXJzMiArPSBkaWZmc1t4XVsxXS5sZW5ndGgpLCAhKGNoYXJzMSA+IGxvY2F0aW9uKSk7IHgrKykgbGFzdENoYXJzMSA9IGNoYXJzMSwgbGFzdENoYXJzMiA9IGNoYXJzMjtcbiAgcmV0dXJuIGRpZmZzLmxlbmd0aCAhPT0geCAmJiBkaWZmc1t4XVswXSA9PT0gRElGRl9ERUxFVEUgPyBsYXN0Q2hhcnMyIDogbGFzdENoYXJzMiArIChsb2NhdGlvbiAtIGxhc3RDaGFyczEpO1xufVxuZnVuY3Rpb24gY291bnRVdGY4Qnl0ZXMoc3RyKSB7XG4gIGxldCBieXRlcyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY29kZVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KGkpO1xuICAgIGlmICh0eXBlb2YgY29kZVBvaW50ID4gXCJ1XCIpIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgY29kZXBvaW50XCIpO1xuICAgIGJ5dGVzICs9IHV0ZjhsZW4oY29kZVBvaW50KTtcbiAgfVxuICByZXR1cm4gYnl0ZXM7XG59XG5mdW5jdGlvbiBhZGp1c3RJbmRpY2llc1RvVWNzMihwYXRjaGVzLCBiYXNlLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IGJ5dGVPZmZzZXQgPSAwLCBpZHggPSAwO1xuICBmdW5jdGlvbiBhZHZhbmNlVG8odGFyZ2V0KSB7XG4gICAgZm9yICg7IGJ5dGVPZmZzZXQgPCB0YXJnZXQ7ICkge1xuICAgICAgY29uc3QgY29kZVBvaW50ID0gYmFzZS5jb2RlUG9pbnRBdChpZHgpO1xuICAgICAgaWYgKHR5cGVvZiBjb2RlUG9pbnQgPiBcInVcIikgcmV0dXJuIGlkeDtcbiAgICAgIGJ5dGVPZmZzZXQgKz0gdXRmOGxlbihjb2RlUG9pbnQpLCBjb2RlUG9pbnQgPiA2NTUzNSA/IGlkeCArPSAyIDogaWR4ICs9IDE7XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5hbGxvd0V4Y2VlZGluZ0luZGljZXMgJiYgYnl0ZU9mZnNldCAhPT0gdGFyZ2V0KSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGV0ZXJtaW5lIGJ5dGUgb2Zmc2V0XCIpO1xuICAgIHJldHVybiBpZHg7XG4gIH1cbiAgY29uc3QgYWRqdXN0ZWQgPSBbXTtcbiAgZm9yIChjb25zdCBwYXRjaCBvZiBwYXRjaGVzKSBhZGp1c3RlZC5wdXNoKHtcbiAgICBkaWZmczogcGF0Y2guZGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSksXG4gICAgc3RhcnQxOiBhZHZhbmNlVG8ocGF0Y2guc3RhcnQxKSxcbiAgICBzdGFydDI6IGFkdmFuY2VUbyhwYXRjaC5zdGFydDIpLFxuICAgIHV0ZjhTdGFydDE6IHBhdGNoLnV0ZjhTdGFydDEsXG4gICAgdXRmOFN0YXJ0MjogcGF0Y2gudXRmOFN0YXJ0MixcbiAgICBsZW5ndGgxOiBwYXRjaC5sZW5ndGgxLFxuICAgIGxlbmd0aDI6IHBhdGNoLmxlbmd0aDIsXG4gICAgdXRmOExlbmd0aDE6IHBhdGNoLnV0ZjhMZW5ndGgxLFxuICAgIHV0ZjhMZW5ndGgyOiBwYXRjaC51dGY4TGVuZ3RoMlxuICB9KTtcbiAgcmV0dXJuIGFkanVzdGVkO1xufVxuZnVuY3Rpb24gdXRmOGxlbihjb2RlUG9pbnQpIHtcbiAgcmV0dXJuIGNvZGVQb2ludCA8PSAxMjcgPyAxIDogY29kZVBvaW50IDw9IDIwNDcgPyAyIDogY29kZVBvaW50IDw9IDY1NTM1ID8gMyA6IDQ7XG59XG5jb25zdCBNQVhfQklUUyA9IDMyLCBERUZBVUxUX01BUkdJTiA9IDQ7XG5mdW5jdGlvbiBhZGRQYWRkaW5nKHBhdGNoZXMsIG1hcmdpbiA9IERFRkFVTFRfTUFSR0lOKSB7XG4gIGNvbnN0IHBhZGRpbmdMZW5ndGggPSBtYXJnaW47XG4gIGxldCBudWxsUGFkZGluZyA9IFwiXCI7XG4gIGZvciAobGV0IHggPSAxOyB4IDw9IHBhZGRpbmdMZW5ndGg7IHgrKykgbnVsbFBhZGRpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgZm9yIChjb25zdCBwIG9mIHBhdGNoZXMpIHAuc3RhcnQxICs9IHBhZGRpbmdMZW5ndGgsIHAuc3RhcnQyICs9IHBhZGRpbmdMZW5ndGgsIHAudXRmOFN0YXJ0MSArPSBwYWRkaW5nTGVuZ3RoLCBwLnV0ZjhTdGFydDIgKz0gcGFkZGluZ0xlbmd0aDtcbiAgbGV0IHBhdGNoID0gcGF0Y2hlc1swXSwgZGlmZnMgPSBwYXRjaC5kaWZmcztcbiAgaWYgKGRpZmZzLmxlbmd0aCA9PT0gMCB8fCBkaWZmc1swXVswXSAhPT0gRElGRl9FUVVBTCkgZGlmZnMudW5zaGlmdChbRElGRl9FUVVBTCwgbnVsbFBhZGRpbmddKSwgcGF0Y2guc3RhcnQxIC09IHBhZGRpbmdMZW5ndGgsIHBhdGNoLnN0YXJ0MiAtPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4U3RhcnQxIC09IHBhZGRpbmdMZW5ndGgsIHBhdGNoLnV0ZjhTdGFydDIgLT0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gubGVuZ3RoMSArPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC5sZW5ndGgyICs9IHBhZGRpbmdMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgxICs9IHBhZGRpbmdMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IHBhZGRpbmdMZW5ndGg7XG4gIGVsc2UgaWYgKHBhZGRpbmdMZW5ndGggPiBkaWZmc1swXVsxXS5sZW5ndGgpIHtcbiAgICBjb25zdCBmaXJzdERpZmZMZW5ndGggPSBkaWZmc1swXVsxXS5sZW5ndGgsIGV4dHJhTGVuZ3RoID0gcGFkZGluZ0xlbmd0aCAtIGZpcnN0RGlmZkxlbmd0aDtcbiAgICBkaWZmc1swXVsxXSA9IG51bGxQYWRkaW5nLnN1YnN0cmluZyhmaXJzdERpZmZMZW5ndGgpICsgZGlmZnNbMF1bMV0sIHBhdGNoLnN0YXJ0MSAtPSBleHRyYUxlbmd0aCwgcGF0Y2guc3RhcnQyIC09IGV4dHJhTGVuZ3RoLCBwYXRjaC51dGY4U3RhcnQxIC09IGV4dHJhTGVuZ3RoLCBwYXRjaC51dGY4U3RhcnQyIC09IGV4dHJhTGVuZ3RoLCBwYXRjaC5sZW5ndGgxICs9IGV4dHJhTGVuZ3RoLCBwYXRjaC5sZW5ndGgyICs9IGV4dHJhTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gZXh0cmFMZW5ndGg7XG4gIH1cbiAgaWYgKHBhdGNoID0gcGF0Y2hlc1twYXRjaGVzLmxlbmd0aCAtIDFdLCBkaWZmcyA9IHBhdGNoLmRpZmZzLCBkaWZmcy5sZW5ndGggPT09IDAgfHwgZGlmZnNbZGlmZnMubGVuZ3RoIC0gMV1bMF0gIT09IERJRkZfRVFVQUwpIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIG51bGxQYWRkaW5nXSksIHBhdGNoLmxlbmd0aDEgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gubGVuZ3RoMiArPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMiArPSBwYWRkaW5nTGVuZ3RoO1xuICBlbHNlIGlmIChwYWRkaW5nTGVuZ3RoID4gZGlmZnNbZGlmZnMubGVuZ3RoIC0gMV1bMV0ubGVuZ3RoKSB7XG4gICAgY29uc3QgZXh0cmFMZW5ndGggPSBwYWRkaW5nTGVuZ3RoIC0gZGlmZnNbZGlmZnMubGVuZ3RoIC0gMV1bMV0ubGVuZ3RoO1xuICAgIGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdICs9IG51bGxQYWRkaW5nLnN1YnN0cmluZygwLCBleHRyYUxlbmd0aCksIHBhdGNoLmxlbmd0aDEgKz0gZXh0cmFMZW5ndGgsIHBhdGNoLmxlbmd0aDIgKz0gZXh0cmFMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgxICs9IGV4dHJhTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMiArPSBleHRyYUxlbmd0aDtcbiAgfVxuICByZXR1cm4gbnVsbFBhZGRpbmc7XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRjaE9iamVjdChzdGFydDEsIHN0YXJ0Mikge1xuICByZXR1cm4ge1xuICAgIGRpZmZzOiBbXSxcbiAgICBzdGFydDEsXG4gICAgc3RhcnQyLFxuICAgIHV0ZjhTdGFydDE6IHN0YXJ0MSxcbiAgICB1dGY4U3RhcnQyOiBzdGFydDIsXG4gICAgbGVuZ3RoMTogMCxcbiAgICBsZW5ndGgyOiAwLFxuICAgIHV0ZjhMZW5ndGgxOiAwLFxuICAgIHV0ZjhMZW5ndGgyOiAwXG4gIH07XG59XG5mdW5jdGlvbiBzcGxpdE1heChwYXRjaGVzLCBtYXJnaW4gPSBERUZBVUxUX01BUkdJTikge1xuICBjb25zdCBwYXRjaFNpemUgPSBNQVhfQklUUztcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBwYXRjaGVzLmxlbmd0aDsgeCsrKSB7XG4gICAgaWYgKHBhdGNoZXNbeF0ubGVuZ3RoMSA8PSBwYXRjaFNpemUpIGNvbnRpbnVlO1xuICAgIGNvbnN0IGJpZ3BhdGNoID0gcGF0Y2hlc1t4XTtcbiAgICBwYXRjaGVzLnNwbGljZSh4LS0sIDEpO1xuICAgIGxldCBzdGFydDEgPSBiaWdwYXRjaC5zdGFydDEsIHN0YXJ0MiA9IGJpZ3BhdGNoLnN0YXJ0MiwgcHJlQ29udGV4dCA9IFwiXCI7XG4gICAgZm9yICg7IGJpZ3BhdGNoLmRpZmZzLmxlbmd0aCAhPT0gMDsgKSB7XG4gICAgICBjb25zdCBwYXRjaCA9IGNyZWF0ZVBhdGNoT2JqZWN0KHN0YXJ0MSAtIHByZUNvbnRleHQubGVuZ3RoLCBzdGFydDIgLSBwcmVDb250ZXh0Lmxlbmd0aCk7XG4gICAgICBsZXQgZW1wdHkgPSAhMDtcbiAgICAgIGlmIChwcmVDb250ZXh0ICE9PSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IHByZWNvbnRleHRCeXRlQ291bnQgPSBjb3VudFV0ZjhCeXRlcyhwcmVDb250ZXh0KTtcbiAgICAgICAgcGF0Y2gubGVuZ3RoMSA9IHByZUNvbnRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSA9IHByZWNvbnRleHRCeXRlQ291bnQsIHBhdGNoLmxlbmd0aDIgPSBwcmVDb250ZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgPSBwcmVjb250ZXh0Qnl0ZUNvdW50LCBwYXRjaC5kaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBwcmVDb250ZXh0XSk7XG4gICAgICB9XG4gICAgICBmb3IgKDsgYmlncGF0Y2guZGlmZnMubGVuZ3RoICE9PSAwICYmIHBhdGNoLmxlbmd0aDEgPCBwYXRjaFNpemUgLSBtYXJnaW47ICkge1xuICAgICAgICBjb25zdCBkaWZmVHlwZSA9IGJpZ3BhdGNoLmRpZmZzWzBdWzBdO1xuICAgICAgICBsZXQgZGlmZlRleHQgPSBiaWdwYXRjaC5kaWZmc1swXVsxXSwgZGlmZlRleHRCeXRlQ291bnQgPSBjb3VudFV0ZjhCeXRlcyhkaWZmVGV4dCk7XG4gICAgICAgIGlmIChkaWZmVHlwZSA9PT0gRElGRl9JTlNFUlQpIHtcbiAgICAgICAgICBwYXRjaC5sZW5ndGgyICs9IGRpZmZUZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gZGlmZlRleHRCeXRlQ291bnQsIHN0YXJ0MiArPSBkaWZmVGV4dC5sZW5ndGg7XG4gICAgICAgICAgY29uc3QgZGlmZjIgPSBiaWdwYXRjaC5kaWZmcy5zaGlmdCgpO1xuICAgICAgICAgIGRpZmYyICYmIHBhdGNoLmRpZmZzLnB1c2goZGlmZjIpLCBlbXB0eSA9ICExO1xuICAgICAgICB9IGVsc2UgZGlmZlR5cGUgPT09IERJRkZfREVMRVRFICYmIHBhdGNoLmRpZmZzLmxlbmd0aCA9PT0gMSAmJiBwYXRjaC5kaWZmc1swXVswXSA9PT0gRElGRl9FUVVBTCAmJiBkaWZmVGV4dC5sZW5ndGggPiAyICogcGF0Y2hTaXplID8gKHBhdGNoLmxlbmd0aDEgKz0gZGlmZlRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBkaWZmVGV4dEJ5dGVDb3VudCwgc3RhcnQxICs9IGRpZmZUZXh0Lmxlbmd0aCwgZW1wdHkgPSAhMSwgcGF0Y2guZGlmZnMucHVzaChbZGlmZlR5cGUsIGRpZmZUZXh0XSksIGJpZ3BhdGNoLmRpZmZzLnNoaWZ0KCkpIDogKGRpZmZUZXh0ID0gZGlmZlRleHQuc3Vic3RyaW5nKDAsIHBhdGNoU2l6ZSAtIHBhdGNoLmxlbmd0aDEgLSBtYXJnaW4pLCBkaWZmVGV4dEJ5dGVDb3VudCA9IGNvdW50VXRmOEJ5dGVzKGRpZmZUZXh0KSwgcGF0Y2gubGVuZ3RoMSArPSBkaWZmVGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgxICs9IGRpZmZUZXh0Qnl0ZUNvdW50LCBzdGFydDEgKz0gZGlmZlRleHQubGVuZ3RoLCBkaWZmVHlwZSA9PT0gRElGRl9FUVVBTCA/IChwYXRjaC5sZW5ndGgyICs9IGRpZmZUZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gZGlmZlRleHRCeXRlQ291bnQsIHN0YXJ0MiArPSBkaWZmVGV4dC5sZW5ndGgpIDogZW1wdHkgPSAhMSwgcGF0Y2guZGlmZnMucHVzaChbZGlmZlR5cGUsIGRpZmZUZXh0XSksIGRpZmZUZXh0ID09PSBiaWdwYXRjaC5kaWZmc1swXVsxXSA/IGJpZ3BhdGNoLmRpZmZzLnNoaWZ0KCkgOiBiaWdwYXRjaC5kaWZmc1swXVsxXSA9IGJpZ3BhdGNoLmRpZmZzWzBdWzFdLnN1YnN0cmluZyhkaWZmVGV4dC5sZW5ndGgpKTtcbiAgICAgIH1cbiAgICAgIHByZUNvbnRleHQgPSBkaWZmVGV4dDIocGF0Y2guZGlmZnMpLCBwcmVDb250ZXh0ID0gcHJlQ29udGV4dC5zdWJzdHJpbmcocHJlQ29udGV4dC5sZW5ndGggLSBtYXJnaW4pO1xuICAgICAgY29uc3QgcG9zdENvbnRleHQgPSBkaWZmVGV4dDEoYmlncGF0Y2guZGlmZnMpLnN1YnN0cmluZygwLCBtYXJnaW4pLCBwb3N0Q29udGV4dEJ5dGVDb3VudCA9IGNvdW50VXRmOEJ5dGVzKHBvc3RDb250ZXh0KTtcbiAgICAgIHBvc3RDb250ZXh0ICE9PSBcIlwiICYmIChwYXRjaC5sZW5ndGgxICs9IHBvc3RDb250ZXh0Lmxlbmd0aCwgcGF0Y2gubGVuZ3RoMiArPSBwb3N0Q29udGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgxICs9IHBvc3RDb250ZXh0Qnl0ZUNvdW50LCBwYXRjaC51dGY4TGVuZ3RoMiArPSBwb3N0Q29udGV4dEJ5dGVDb3VudCwgcGF0Y2guZGlmZnMubGVuZ3RoICE9PSAwICYmIHBhdGNoLmRpZmZzW3BhdGNoLmRpZmZzLmxlbmd0aCAtIDFdWzBdID09PSBESUZGX0VRVUFMID8gcGF0Y2guZGlmZnNbcGF0Y2guZGlmZnMubGVuZ3RoIC0gMV1bMV0gKz0gcG9zdENvbnRleHQgOiBwYXRjaC5kaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBwb3N0Q29udGV4dF0pKSwgZW1wdHkgfHwgcGF0Y2hlcy5zcGxpY2UoKyt4LCAwLCBwYXRjaCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhcHBseShwYXRjaGVzLCBvcmlnaW5hbFRleHQsIG9wdHMgPSB7fSkge1xuICBpZiAodHlwZW9mIHBhdGNoZXMgPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKFwiUGF0Y2hlcyBtdXN0IGJlIGFuIGFycmF5IC0gcGFzcyB0aGUgcGF0Y2ggdG8gYHBhcnNlUGF0Y2goKWAgZmlyc3RcIik7XG4gIGxldCB0ZXh0ID0gb3JpZ2luYWxUZXh0O1xuICBpZiAocGF0Y2hlcy5sZW5ndGggPT09IDApIHJldHVybiBbdGV4dCwgW11dO1xuICBjb25zdCBwYXJzZWQgPSBhZGp1c3RJbmRpY2llc1RvVWNzMihwYXRjaGVzLCB0ZXh0LCB7XG4gICAgYWxsb3dFeGNlZWRpbmdJbmRpY2VzOiBvcHRzLmFsbG93RXhjZWVkaW5nSW5kaWNlc1xuICB9KSwgbWFyZ2luID0gb3B0cy5tYXJnaW4gfHwgREVGQVVMVF9NQVJHSU4sIGRlbGV0ZVRocmVzaG9sZCA9IG9wdHMuZGVsZXRlVGhyZXNob2xkIHx8IDAuNCwgbnVsbFBhZGRpbmcgPSBhZGRQYWRkaW5nKHBhcnNlZCwgbWFyZ2luKTtcbiAgdGV4dCA9IG51bGxQYWRkaW5nICsgdGV4dCArIG51bGxQYWRkaW5nLCBzcGxpdE1heChwYXJzZWQsIG1hcmdpbik7XG4gIGxldCBkZWx0YSA9IDA7XG4gIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBwYXJzZWQubGVuZ3RoOyB4KyspIHtcbiAgICBjb25zdCBleHBlY3RlZExvYyA9IHBhcnNlZFt4XS5zdGFydDIgKyBkZWx0YSwgdGV4dDEgPSBkaWZmVGV4dDEocGFyc2VkW3hdLmRpZmZzKTtcbiAgICBsZXQgc3RhcnRMb2MsIGVuZExvYyA9IC0xO1xuICAgIGlmICh0ZXh0MS5sZW5ndGggPiBNQVhfQklUUyA/IChzdGFydExvYyA9IG1hdGNoKHRleHQsIHRleHQxLnN1YnN0cmluZygwLCBNQVhfQklUUyksIGV4cGVjdGVkTG9jKSwgc3RhcnRMb2MgIT09IC0xICYmIChlbmRMb2MgPSBtYXRjaCh0ZXh0LCB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gTUFYX0JJVFMpLCBleHBlY3RlZExvYyArIHRleHQxLmxlbmd0aCAtIE1BWF9CSVRTKSwgKGVuZExvYyA9PT0gLTEgfHwgc3RhcnRMb2MgPj0gZW5kTG9jKSAmJiAoc3RhcnRMb2MgPSAtMSkpKSA6IHN0YXJ0TG9jID0gbWF0Y2godGV4dCwgdGV4dDEsIGV4cGVjdGVkTG9jKSwgc3RhcnRMb2MgPT09IC0xKSByZXN1bHRzW3hdID0gITEsIGRlbHRhIC09IHBhcnNlZFt4XS5sZW5ndGgyIC0gcGFyc2VkW3hdLmxlbmd0aDE7XG4gICAgZWxzZSB7XG4gICAgICByZXN1bHRzW3hdID0gITAsIGRlbHRhID0gc3RhcnRMb2MgLSBleHBlY3RlZExvYztcbiAgICAgIGxldCB0ZXh0MjtcbiAgICAgIGlmIChlbmRMb2MgPT09IC0xID8gdGV4dDIgPSB0ZXh0LnN1YnN0cmluZyhzdGFydExvYywgc3RhcnRMb2MgKyB0ZXh0MS5sZW5ndGgpIDogdGV4dDIgPSB0ZXh0LnN1YnN0cmluZyhzdGFydExvYywgZW5kTG9jICsgTUFYX0JJVFMpLCB0ZXh0MSA9PT0gdGV4dDIpIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydExvYykgKyBkaWZmVGV4dDIocGFyc2VkW3hdLmRpZmZzKSArIHRleHQuc3Vic3RyaW5nKHN0YXJ0TG9jICsgdGV4dDEubGVuZ3RoKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBsZXQgZGlmZnMgPSBkaWZmKHRleHQxLCB0ZXh0Miwge1xuICAgICAgICAgIGNoZWNrTGluZXM6ICExXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGV4dDEubGVuZ3RoID4gTUFYX0JJVFMgJiYgbGV2ZW5zaHRlaW4oZGlmZnMpIC8gdGV4dDEubGVuZ3RoID4gZGVsZXRlVGhyZXNob2xkKSByZXN1bHRzW3hdID0gITE7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRpZmZzID0gY2xlYW51cFNlbWFudGljTG9zc2xlc3MoZGlmZnMpO1xuICAgICAgICAgIGxldCBpbmRleDEgPSAwLCBpbmRleDIgPSAwO1xuICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgcGFyc2VkW3hdLmRpZmZzLmxlbmd0aDsgeSsrKSB7XG4gICAgICAgICAgICBjb25zdCBtb2QgPSBwYXJzZWRbeF0uZGlmZnNbeV07XG4gICAgICAgICAgICBtb2RbMF0gIT09IERJRkZfRVFVQUwgJiYgKGluZGV4MiA9IHhJbmRleChkaWZmcywgaW5kZXgxKSksIG1vZFswXSA9PT0gRElGRl9JTlNFUlQgPyB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRMb2MgKyBpbmRleDIpICsgbW9kWzFdICsgdGV4dC5zdWJzdHJpbmcoc3RhcnRMb2MgKyBpbmRleDIpIDogbW9kWzBdID09PSBESUZGX0RFTEVURSAmJiAodGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0TG9jICsgaW5kZXgyKSArIHRleHQuc3Vic3RyaW5nKHN0YXJ0TG9jICsgeEluZGV4KGRpZmZzLCBpbmRleDEgKyBtb2RbMV0ubGVuZ3RoKSkpLCBtb2RbMF0gIT09IERJRkZfREVMRVRFICYmIChpbmRleDEgKz0gbW9kWzFdLmxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcobnVsbFBhZGRpbmcubGVuZ3RoLCB0ZXh0Lmxlbmd0aCAtIG51bGxQYWRkaW5nLmxlbmd0aCksIFt0ZXh0LCByZXN1bHRzXTtcbn1cbmNvbnN0IHBhdGNoSGVhZGVyID0gL15AQCAtKFxcZCspLD8oXFxkKikgXFwrKFxcZCspLD8oXFxkKikgQEAkLztcbmZ1bmN0aW9uIHBhcnNlKHRleHRsaW5lKSB7XG4gIGlmICghdGV4dGxpbmUpIHJldHVybiBbXTtcbiAgY29uc3QgcGF0Y2hlcyA9IFtdLCBsaW5lcyA9IHRleHRsaW5lLnNwbGl0KGBcbmApO1xuICBsZXQgdGV4dFBvaW50ZXIgPSAwO1xuICBmb3IgKDsgdGV4dFBvaW50ZXIgPCBsaW5lcy5sZW5ndGg7ICkge1xuICAgIGNvbnN0IG0gPSBsaW5lc1t0ZXh0UG9pbnRlcl0ubWF0Y2gocGF0Y2hIZWFkZXIpO1xuICAgIGlmICghbSkgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBhdGNoIHN0cmluZzogJHtsaW5lc1t0ZXh0UG9pbnRlcl19YCk7XG4gICAgY29uc3QgcGF0Y2ggPSBjcmVhdGVQYXRjaE9iamVjdCh0b0ludChtWzFdKSwgdG9JbnQobVszXSkpO1xuICAgIGZvciAocGF0Y2hlcy5wdXNoKHBhdGNoKSwgbVsyXSA9PT0gXCJcIiA/IChwYXRjaC5zdGFydDEtLSwgcGF0Y2gudXRmOFN0YXJ0MS0tLCBwYXRjaC5sZW5ndGgxID0gMSwgcGF0Y2gudXRmOExlbmd0aDEgPSAxKSA6IG1bMl0gPT09IFwiMFwiID8gKHBhdGNoLmxlbmd0aDEgPSAwLCBwYXRjaC51dGY4TGVuZ3RoMSA9IDApIDogKHBhdGNoLnN0YXJ0MS0tLCBwYXRjaC51dGY4U3RhcnQxLS0sIHBhdGNoLnV0ZjhMZW5ndGgxID0gdG9JbnQobVsyXSksIHBhdGNoLmxlbmd0aDEgPSBwYXRjaC51dGY4TGVuZ3RoMSksIG1bNF0gPT09IFwiXCIgPyAocGF0Y2guc3RhcnQyLS0sIHBhdGNoLnV0ZjhTdGFydDItLSwgcGF0Y2gubGVuZ3RoMiA9IDEsIHBhdGNoLnV0ZjhMZW5ndGgyID0gMSkgOiBtWzRdID09PSBcIjBcIiA/IChwYXRjaC5sZW5ndGgyID0gMCwgcGF0Y2gudXRmOExlbmd0aDIgPSAwKSA6IChwYXRjaC5zdGFydDItLSwgcGF0Y2gudXRmOFN0YXJ0Mi0tLCBwYXRjaC51dGY4TGVuZ3RoMiA9IHRvSW50KG1bNF0pLCBwYXRjaC5sZW5ndGgyID0gcGF0Y2gudXRmOExlbmd0aDIpLCB0ZXh0UG9pbnRlcisrOyB0ZXh0UG9pbnRlciA8IGxpbmVzLmxlbmd0aDsgKSB7XG4gICAgICBjb25zdCBjdXJyZW50TGluZSA9IGxpbmVzW3RleHRQb2ludGVyXSwgc2lnbiA9IGN1cnJlbnRMaW5lLmNoYXJBdCgwKTtcbiAgICAgIGlmIChzaWduID09PSBcIkBcIikgYnJlYWs7XG4gICAgICBpZiAoc2lnbiA9PT0gXCJcIikge1xuICAgICAgICB0ZXh0UG9pbnRlcisrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGxldCBsaW5lO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGluZSA9IGRlY29kZVVSSShjdXJyZW50TGluZS5zbGljZSgxKSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbGxlZ2FsIGVzY2FwZSBpbiBwYXJzZTogJHtjdXJyZW50TGluZX1gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHV0ZjhEaWZmID0gY291bnRVdGY4Qnl0ZXMobGluZSkgLSBsaW5lLmxlbmd0aDtcbiAgICAgIGlmIChzaWduID09PSBcIi1cIikgcGF0Y2guZGlmZnMucHVzaChbRElGRl9ERUxFVEUsIGxpbmVdKSwgcGF0Y2gubGVuZ3RoMSAtPSB1dGY4RGlmZjtcbiAgICAgIGVsc2UgaWYgKHNpZ24gPT09IFwiK1wiKSBwYXRjaC5kaWZmcy5wdXNoKFtESUZGX0lOU0VSVCwgbGluZV0pLCBwYXRjaC5sZW5ndGgyIC09IHV0ZjhEaWZmO1xuICAgICAgZWxzZSBpZiAoc2lnbiA9PT0gXCIgXCIpIHBhdGNoLmRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIGxpbmVdKSwgcGF0Y2gubGVuZ3RoMSAtPSB1dGY4RGlmZiwgcGF0Y2gubGVuZ3RoMiAtPSB1dGY4RGlmZjtcbiAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBhdGNoIG1vZGUgXCIke3NpZ259XCIgaW46ICR7bGluZX1gKTtcbiAgICAgIHRleHRQb2ludGVyKys7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXRjaGVzO1xufVxuZnVuY3Rpb24gdG9JbnQobnVtKSB7XG4gIHJldHVybiBwYXJzZUludChudW0sIDEwKTtcbn1cbmNvbnN0IElTX1VET0lORyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBJU19SRURPSU5HID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiB3aXRoVW5kb2luZyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc1VuZG9pbmcoZWRpdG9yKTtcbiAgSVNfVURPSU5HLnNldChlZGl0b3IsICEwKSwgZm4oKSwgSVNfVURPSU5HLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gaXNVbmRvaW5nKGVkaXRvcikge1xuICByZXR1cm4gSVNfVURPSU5HLmdldChlZGl0b3IpID8/ICExO1xufVxuZnVuY3Rpb24gc2V0SXNVbmRvaW5nKGVkaXRvciwgaXNVbmRvaW5nMikge1xuICBJU19VRE9JTkcuc2V0KGVkaXRvciwgaXNVbmRvaW5nMik7XG59XG5mdW5jdGlvbiB3aXRoUmVkb2luZyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc1JlZG9pbmcoZWRpdG9yKTtcbiAgSVNfUkVET0lORy5zZXQoZWRpdG9yLCAhMCksIGZuKCksIElTX1JFRE9JTkcuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBpc1JlZG9pbmcoZWRpdG9yKSB7XG4gIHJldHVybiBJU19SRURPSU5HLmdldChlZGl0b3IpID8/ICExO1xufVxuZnVuY3Rpb24gc2V0SXNSZWRvaW5nKGVkaXRvciwgaXNSZWRvaW5nMikge1xuICBJU19SRURPSU5HLnNldChlZGl0b3IsIGlzUmVkb2luZzIpO1xufVxuY29uc3QgZGVidWckZSA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aFVuZG9SZWRvXCIpLCBTQVZJTkcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgUkVNT1RFX1BBVENIRVMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgVU5ET19TVEVQX0xJTUlUID0gMWUzLCBpc1NhdmluZyA9IChlZGl0b3IpID0+IHtcbiAgY29uc3Qgc3RhdGUgPSBTQVZJTkcuZ2V0KGVkaXRvcik7XG4gIHJldHVybiBzdGF0ZSA9PT0gdm9pZCAwID8gITAgOiBzdGF0ZTtcbn0sIGdldFJlbW90ZVBhdGNoZXMgPSAoZWRpdG9yKSA9PiAoUkVNT1RFX1BBVENIRVMuZ2V0KGVkaXRvcikgfHwgUkVNT1RFX1BBVENIRVMuc2V0KGVkaXRvciwgW10pLCBSRU1PVEVfUEFUQ0hFUy5nZXQoZWRpdG9yKSB8fCBbXSk7XG5mdW5jdGlvbiBjcmVhdGVXaXRoVW5kb1JlZG8ob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgZWRpdG9yQWN0b3IsXG4gICAgYmxvY2tTY2hlbWFUeXBlXG4gIH0gPSBvcHRpb25zO1xuICByZXR1cm4gKGVkaXRvcikgPT4ge1xuICAgIGxldCBwcmV2aW91c1NuYXBzaG90ID0gZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCBibG9ja1NjaGVtYVR5cGUubmFtZSk7XG4gICAgY29uc3QgcmVtb3RlUGF0Y2hlcyA9IGdldFJlbW90ZVBhdGNoZXMoZWRpdG9yKTtcbiAgICBvcHRpb25zLnN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiB7XG4gICAgICBkZWJ1ZyRlKFwiU3Vic2NyaWJpbmcgdG8gcGF0Y2hlc1wiKTtcbiAgICAgIGNvbnN0IHN1YiA9IGVkaXRvckFjdG9yLm9uKFwicGF0Y2hlc1wiLCAoe1xuICAgICAgICBwYXRjaGVzLFxuICAgICAgICBzbmFwc2hvdFxuICAgICAgfSkgPT4ge1xuICAgICAgICBsZXQgcmVzZXQgPSAhMTtcbiAgICAgICAgcGF0Y2hlcy5mb3JFYWNoKChwYXRjaCkgPT4ge1xuICAgICAgICAgIGlmICghcmVzZXQgJiYgcGF0Y2gub3JpZ2luICE9PSBcImxvY2FsXCIgJiYgcmVtb3RlUGF0Y2hlcykge1xuICAgICAgICAgICAgaWYgKHBhdGNoLnR5cGUgPT09IFwidW5zZXRcIiAmJiBwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBkZWJ1ZyRlKFwiU29tZW9uZSBlbHNlIGNsZWFyZWQgdGhlIGNvbnRlbnQsIHJlc2V0dGluZyB1bmRvL3JlZG8gaGlzdG9yeVwiKSwgZWRpdG9yLmhpc3RvcnkgPSB7XG4gICAgICAgICAgICAgICAgdW5kb3M6IFtdLFxuICAgICAgICAgICAgICAgIHJlZG9zOiBbXVxuICAgICAgICAgICAgICB9LCByZW1vdGVQYXRjaGVzLnNwbGljZSgwLCByZW1vdGVQYXRjaGVzLmxlbmd0aCksIFNBVklORy5zZXQoZWRpdG9yLCAhMCksIHJlc2V0ID0gITA7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW90ZVBhdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgIHBhdGNoLFxuICAgICAgICAgICAgICB0aW1lOiAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgc25hcHNob3QsXG4gICAgICAgICAgICAgIHByZXZpb3VzU25hcHNob3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIHByZXZpb3VzU25hcHNob3QgPSBzbmFwc2hvdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGVidWckZShcIlVuc3Vic2NyaWJpbmcgdG8gcGF0Y2hlc1wiKSwgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pLCBlZGl0b3IuaGlzdG9yeSA9IHtcbiAgICAgIHVuZG9zOiBbXSxcbiAgICAgIHJlZG9zOiBbXVxuICAgIH07XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MlxuICAgIH0gPSBlZGl0b3I7XG4gICAgcmV0dXJuIGVkaXRvci5hcHBseSA9IChvcCkgPT4ge1xuICAgICAgaWYgKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgICAgIH0pKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc0NoYW5naW5nUmVtb3RlbHkoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRvaW5nKGVkaXRvcikgfHwgaXNSZWRvaW5nKGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qge1xuICAgICAgICBvcGVyYXRpb25zLFxuICAgICAgICBoaXN0b3J5XG4gICAgICB9ID0gZWRpdG9yLCB7XG4gICAgICAgIHVuZG9zXG4gICAgICB9ID0gaGlzdG9yeSwgc3RlcCA9IHVuZG9zW3VuZG9zLmxlbmd0aCAtIDFdLCBsYXN0T3AgPSBzdGVwICYmIHN0ZXAub3BlcmF0aW9ucyAmJiBzdGVwLm9wZXJhdGlvbnNbc3RlcC5vcGVyYXRpb25zLmxlbmd0aCAtIDFdLCBvdmVyd3JpdGUgPSBzaG91bGRPdmVyd3JpdGUob3AsIGxhc3RPcCksIHNhdmUgPSBpc1NhdmluZyhlZGl0b3IpO1xuICAgICAgbGV0IG1lcmdlID0gITA7XG4gICAgICBpZiAoc2F2ZSkge1xuICAgICAgICBpZiAoc3RlcCA/IG9wZXJhdGlvbnMubGVuZ3RoID09PSAwICYmIChtZXJnZSA9IHNob3VsZE1lcmdlKG9wLCBsYXN0T3ApIHx8IG92ZXJ3cml0ZSkgOiBtZXJnZSA9ICExLCBzdGVwICYmIG1lcmdlKVxuICAgICAgICAgIHN0ZXAub3BlcmF0aW9ucy5wdXNoKG9wKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29uc3QgbmV3U3RlcCA9IHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnM6IFsuLi5lZGl0b3Iuc2VsZWN0aW9uID09PSBudWxsID8gW10gOiBbY3JlYXRlU2VsZWN0T3BlcmF0aW9uKGVkaXRvcildLCBvcF0sXG4gICAgICAgICAgICB0aW1lc3RhbXA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpXG4gICAgICAgICAgfTtcbiAgICAgICAgICB1bmRvcy5wdXNoKG5ld1N0ZXApLCBkZWJ1ZyRlKFwiQ3JlYXRlZCBuZXcgdW5kbyBzdGVwXCIsIHN0ZXApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyB1bmRvcy5sZW5ndGggPiBVTkRPX1NURVBfTElNSVQ7IClcbiAgICAgICAgICB1bmRvcy5zaGlmdCgpO1xuICAgICAgICBzaG91bGRDbGVhcihvcCkgJiYgKGhpc3RvcnkucmVkb3MgPSBbXSk7XG4gICAgICB9XG4gICAgICBhcHBseTIob3ApO1xuICAgIH0sIGVkaXRvci51bmRvID0gKCkgPT4ge1xuICAgICAgaWYgKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgICAgIH0pKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCB7XG4gICAgICAgIHVuZG9zXG4gICAgICB9ID0gZWRpdG9yLmhpc3Rvcnk7XG4gICAgICBpZiAodW5kb3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzdGVwID0gdW5kb3NbdW5kb3MubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChkZWJ1ZyRlKFwiVW5kb2luZ1wiLCBzdGVwKSwgc3RlcC5vcGVyYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBvdGhlclBhdGNoZXMgPSByZW1vdGVQYXRjaGVzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50aW1lID49IHN0ZXAudGltZXN0YW1wKTtcbiAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRPcGVyYXRpb25zID0gc3RlcC5vcGVyYXRpb25zO1xuICAgICAgICAgIG90aGVyUGF0Y2hlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbnMgPSBmbGF0dGVuKHRyYW5zZm9ybWVkT3BlcmF0aW9ucy5tYXAoKG9wKSA9PiB0cmFuc2Zvcm1PcGVyYXRpb24oZWRpdG9yLCBpdGVtLnBhdGNoLCBvcCwgaXRlbS5zbmFwc2hvdCwgaXRlbS5wcmV2aW91c1NuYXBzaG90KSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IHJldmVyc2VkT3BlcmF0aW9ucyA9IHRyYW5zZm9ybWVkT3BlcmF0aW9ucy5tYXAoT3BlcmF0aW9uLmludmVyc2UpLnJldmVyc2UoKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgd2l0aFVuZG9pbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2l0aG91dFNhdmluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldmVyc2VkT3BlcmF0aW9ucy5mb3JFYWNoKChvcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3IuYXBwbHkob3ApO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksIGVkaXRvci5ub3JtYWxpemUoKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBkZWJ1ZyRlKFwiQ291bGQgbm90IHBlcmZvcm0gdW5kbyBzdGVwXCIsIGVyciksIHJlbW90ZVBhdGNoZXMuc3BsaWNlKDAsIHJlbW90ZVBhdGNoZXMubGVuZ3RoKSwgVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpLCBlZGl0b3IuaGlzdG9yeSA9IHtcbiAgICAgICAgICAgICAgdW5kb3M6IFtdLFxuICAgICAgICAgICAgICByZWRvczogW11cbiAgICAgICAgICAgIH0sIFNBVklORy5zZXQoZWRpdG9yLCAhMCksIHNldElzVW5kb2luZyhlZGl0b3IsICExKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGVkaXRvci5oaXN0b3J5LnJlZG9zLnB1c2goc3RlcCksIGVkaXRvci5oaXN0b3J5LnVuZG9zLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgZWRpdG9yLnJlZG8gPSAoKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSkpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVkb3NcbiAgICAgIH0gPSBlZGl0b3IuaGlzdG9yeTtcbiAgICAgIGlmIChyZWRvcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSByZWRvc1tyZWRvcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGRlYnVnJGUoXCJSZWRvaW5nXCIsIHN0ZXApLCBzdGVwLm9wZXJhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IG90aGVyUGF0Y2hlcyA9IHJlbW90ZVBhdGNoZXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnRpbWUgPj0gc3RlcC50aW1lc3RhbXApO1xuICAgICAgICAgIGxldCB0cmFuc2Zvcm1lZE9wZXJhdGlvbnMgPSBzdGVwLm9wZXJhdGlvbnM7XG4gICAgICAgICAgb3RoZXJQYXRjaGVzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkT3BlcmF0aW9ucyA9IGZsYXR0ZW4odHJhbnNmb3JtZWRPcGVyYXRpb25zLm1hcCgob3ApID0+IHRyYW5zZm9ybU9wZXJhdGlvbihlZGl0b3IsIGl0ZW0ucGF0Y2gsIG9wLCBpdGVtLnNuYXBzaG90LCBpdGVtLnByZXZpb3VzU25hcHNob3QpKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHdpdGhSZWRvaW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdpdGhvdXRTYXZpbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbnMuZm9yRWFjaCgob3ApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmFwcGx5KG9wKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLCBlZGl0b3Iubm9ybWFsaXplKCksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGVidWckZShcIkNvdWxkIG5vdCBwZXJmb3JtIHJlZG8gc3RlcFwiLCBlcnIpLCByZW1vdGVQYXRjaGVzLnNwbGljZSgwLCByZW1vdGVQYXRjaGVzLmxlbmd0aCksIFRyYW5zZm9ybXMuZGVzZWxlY3QoZWRpdG9yKSwgZWRpdG9yLmhpc3RvcnkgPSB7XG4gICAgICAgICAgICAgIHVuZG9zOiBbXSxcbiAgICAgICAgICAgICAgcmVkb3M6IFtdXG4gICAgICAgICAgICB9LCBTQVZJTkcuc2V0KGVkaXRvciwgITApLCBzZXRJc1JlZG9pbmcoZWRpdG9yLCAhMSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlZGl0b3IuaGlzdG9yeS51bmRvcy5wdXNoKHN0ZXApLCBlZGl0b3IuaGlzdG9yeS5yZWRvcy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybU9wZXJhdGlvbihlZGl0b3IsIHBhdGNoLCBvcGVyYXRpb24sIHNuYXBzaG90LCBwcmV2aW91c1NuYXBzaG90KSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVkT3BlcmF0aW9uID0ge1xuICAgIC4uLm9wZXJhdGlvblxuICB9O1xuICBpZiAocGF0Y2gudHlwZSA9PT0gXCJpbnNlcnRcIiAmJiBwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGluc2VydEJsb2NrSW5kZXggPSAoc25hcHNob3QgfHwgW10pLmZpbmRJbmRleCgoYmxrKSA9PiBpc0VxdWFsKHtcbiAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgfSwgcGF0Y2gucGF0aFswXSkpO1xuICAgIHJldHVybiBkZWJ1ZyRlKGBBZGp1c3RpbmcgYmxvY2sgcGF0aCAoKyR7cGF0Y2guaXRlbXMubGVuZ3RofSkgZm9yICcke3RyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGV9JyBvcGVyYXRpb24gYW5kIHBhdGNoICcke3BhdGNoLnR5cGV9J2ApLCBbYWRqdXN0QmxvY2tQYXRoKHRyYW5zZm9ybWVkT3BlcmF0aW9uLCBwYXRjaC5pdGVtcy5sZW5ndGgsIGluc2VydEJsb2NrSW5kZXgpXTtcbiAgfVxuICBpZiAocGF0Y2gudHlwZSA9PT0gXCJ1bnNldFwiICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgdW5zZXRCbG9ja0luZGV4ID0gKHByZXZpb3VzU25hcHNob3QgfHwgW10pLmZpbmRJbmRleCgoYmxrKSA9PiBpc0VxdWFsKHtcbiAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgfSwgcGF0Y2gucGF0aFswXSkpO1xuICAgIHJldHVybiBcInBhdGhcIiBpbiB0cmFuc2Zvcm1lZE9wZXJhdGlvbiAmJiBBcnJheS5pc0FycmF5KHRyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGgpICYmIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGhbMF0gPT09IHVuc2V0QmxvY2tJbmRleCA/IChkZWJ1ZyRlKFwiU2tpcHBpbmcgdHJhbnNmb3JtYXRpb24gdGhhdCB0YXJnZXRlZCByZW1vdmVkIGJsb2NrXCIpLCBbXSkgOiBbYWRqdXN0QmxvY2tQYXRoKHRyYW5zZm9ybWVkT3BlcmF0aW9uLCAtMSwgdW5zZXRCbG9ja0luZGV4KV07XG4gIH1cbiAgaWYgKHBhdGNoLnR5cGUgPT09IFwidW5zZXRcIiAmJiBwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gZGVidWckZShgQWRqdXN0aW5nIHNlbGVjdGlvbiBmb3IgdW5zZXQgZXZlcnl0aGluZyBwYXRjaCBhbmQgJHtvcGVyYXRpb24udHlwZX0gb3BlcmF0aW9uYCksIFtdO1xuICBpZiAocGF0Y2gudHlwZSA9PT0gXCJkaWZmTWF0Y2hQYXRjaFwiKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uVGFyZ2V0QmxvY2sgPSBmaW5kT3BlcmF0aW9uVGFyZ2V0QmxvY2soZWRpdG9yLCB0cmFuc2Zvcm1lZE9wZXJhdGlvbik7XG4gICAgcmV0dXJuICFvcGVyYXRpb25UYXJnZXRCbG9jayB8fCAhaXNFcXVhbCh7XG4gICAgICBfa2V5OiBvcGVyYXRpb25UYXJnZXRCbG9jay5fa2V5XG4gICAgfSwgcGF0Y2gucGF0aFswXSkgPyBbdHJhbnNmb3JtZWRPcGVyYXRpb25dIDogKHBhcnNlKHBhdGNoLnZhbHVlKS5mb3JFYWNoKChkaWZmUGF0Y2gpID0+IHtcbiAgICAgIGxldCBhZGp1c3RPZmZzZXRCeSA9IDAsIGNoYW5nZWRPZmZzZXQgPSBkaWZmUGF0Y2gudXRmOFN0YXJ0MTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZGlmZnNcbiAgICAgIH0gPSBkaWZmUGF0Y2g7XG4gICAgICBpZiAoZGlmZnMuZm9yRWFjaCgoZGlmZjIsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IFtkaWZmVHlwZSwgdGV4dF0gPSBkaWZmMjtcbiAgICAgICAgZGlmZlR5cGUgPT09IERJRkZfSU5TRVJUID8gKGFkanVzdE9mZnNldEJ5ICs9IHRleHQubGVuZ3RoLCBjaGFuZ2VkT2Zmc2V0ICs9IHRleHQubGVuZ3RoKSA6IGRpZmZUeXBlID09PSBESUZGX0RFTEVURSA/IChhZGp1c3RPZmZzZXRCeSAtPSB0ZXh0Lmxlbmd0aCwgY2hhbmdlZE9mZnNldCAtPSB0ZXh0Lmxlbmd0aCkgOiBkaWZmVHlwZSA9PT0gRElGRl9FUVVBTCAmJiAoZGlmZnMuc2xpY2UoaW5kZXgpLmV2ZXJ5KChbZFR5cGVdKSA9PiBkVHlwZSA9PT0gRElGRl9FUVVBTCkgfHwgKGNoYW5nZWRPZmZzZXQgKz0gdGV4dC5sZW5ndGgpKTtcbiAgICAgIH0pLCB0cmFuc2Zvcm1lZE9wZXJhdGlvbi50eXBlID09PSBcImluc2VydF90ZXh0XCIgJiYgY2hhbmdlZE9mZnNldCA8IHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9mZnNldCAmJiAodHJhbnNmb3JtZWRPcGVyYXRpb24ub2Zmc2V0ICs9IGFkanVzdE9mZnNldEJ5KSwgdHJhbnNmb3JtZWRPcGVyYXRpb24udHlwZSA9PT0gXCJyZW1vdmVfdGV4dFwiICYmIGNoYW5nZWRPZmZzZXQgPD0gdHJhbnNmb3JtZWRPcGVyYXRpb24ub2Zmc2V0IC0gdHJhbnNmb3JtZWRPcGVyYXRpb24udGV4dC5sZW5ndGggJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9mZnNldCArPSBhZGp1c3RPZmZzZXRCeSksIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb2N1cyA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXM/LmZvY3VzID8ge1xuICAgICAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMuZm9jdXNcbiAgICAgICAgfSA6IHZvaWQgMCwgY3VycmVudEFuY2hvciA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uPy5wcm9wZXJ0aWVzPy5hbmNob3IgPyB7XG4gICAgICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcy5hbmNob3JcbiAgICAgICAgfSA6IHZvaWQgMCwgbmV3Rm9jdXMgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbj8ubmV3UHJvcGVydGllcz8uZm9jdXMgPyB7XG4gICAgICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcy5mb2N1c1xuICAgICAgICB9IDogdm9pZCAwLCBuZXdBbmNob3IgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbj8ubmV3UHJvcGVydGllcz8uYW5jaG9yID8ge1xuICAgICAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMuYW5jaG9yXG4gICAgICAgIH0gOiB2b2lkIDA7XG4gICAgICAgIChjdXJyZW50Rm9jdXMgJiYgY3VycmVudEFuY2hvciB8fCBuZXdGb2N1cyAmJiBuZXdBbmNob3IpICYmIChbY3VycmVudEZvY3VzLCBjdXJyZW50QW5jaG9yLCBuZXdGb2N1cywgbmV3QW5jaG9yXS5mb3JFYWNoKChwb2ludCkgPT4ge1xuICAgICAgICAgIHBvaW50ICYmIGNoYW5nZWRPZmZzZXQgPCBwb2ludC5vZmZzZXQgJiYgKHBvaW50Lm9mZnNldCArPSBhZGp1c3RPZmZzZXRCeSk7XG4gICAgICAgIH0pLCBjdXJyZW50Rm9jdXMgJiYgY3VycmVudEFuY2hvciAmJiAodHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcyA9IHtcbiAgICAgICAgICBmb2N1czogY3VycmVudEZvY3VzLFxuICAgICAgICAgIGFuY2hvcjogY3VycmVudEFuY2hvclxuICAgICAgICB9KSwgbmV3Rm9jdXMgJiYgbmV3QW5jaG9yICYmICh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzID0ge1xuICAgICAgICAgIGZvY3VzOiBuZXdGb2N1cyxcbiAgICAgICAgICBhbmNob3I6IG5ld0FuY2hvclxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSksIFt0cmFuc2Zvcm1lZE9wZXJhdGlvbl0pO1xuICB9XG4gIHJldHVybiBbdHJhbnNmb3JtZWRPcGVyYXRpb25dO1xufVxuZnVuY3Rpb24gYWRqdXN0QmxvY2tQYXRoKG9wZXJhdGlvbiwgbGV2ZWwsIGJsb2NrSW5kZXgpIHtcbiAgY29uc3QgdHJhbnNmb3JtZWRPcGVyYXRpb24gPSB7XG4gICAgLi4ub3BlcmF0aW9uXG4gIH07XG4gIGlmIChibG9ja0luZGV4ID49IDAgJiYgdHJhbnNmb3JtZWRPcGVyYXRpb24udHlwZSAhPT0gXCJzZXRfc2VsZWN0aW9uXCIgJiYgQXJyYXkuaXNBcnJheSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoKSAmJiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoWzBdID49IGJsb2NrSW5kZXggKyBsZXZlbCAmJiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoWzBdICsgbGV2ZWwgPiAtMSkge1xuICAgIGNvbnN0IG5ld1BhdGggPSBbdHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aFswXSArIGxldmVsLCAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoLnNsaWNlKDEpXTtcbiAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoID0gbmV3UGF0aDtcbiAgfVxuICBpZiAodHJhbnNmb3JtZWRPcGVyYXRpb24udHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIpIHtcbiAgICBjb25zdCBjdXJyZW50Rm9jdXMgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzPy5mb2N1cyA/IHtcbiAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMuZm9jdXNcbiAgICB9IDogdm9pZCAwLCBjdXJyZW50QW5jaG9yID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/LnByb3BlcnRpZXM/LmFuY2hvciA/IHtcbiAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMuYW5jaG9yXG4gICAgfSA6IHZvaWQgMCwgbmV3Rm9jdXMgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbj8ubmV3UHJvcGVydGllcz8uZm9jdXMgPyB7XG4gICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzLmZvY3VzXG4gICAgfSA6IHZvaWQgMCwgbmV3QW5jaG9yID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/Lm5ld1Byb3BlcnRpZXM/LmFuY2hvciA/IHtcbiAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMuYW5jaG9yXG4gICAgfSA6IHZvaWQgMDtcbiAgICAoY3VycmVudEZvY3VzICYmIGN1cnJlbnRBbmNob3IgfHwgbmV3Rm9jdXMgJiYgbmV3QW5jaG9yKSAmJiAoW2N1cnJlbnRGb2N1cywgY3VycmVudEFuY2hvciwgbmV3Rm9jdXMsIG5ld0FuY2hvcl0uZm9yRWFjaCgocG9pbnQpID0+IHtcbiAgICAgIHBvaW50ICYmIHBvaW50LnBhdGhbMF0gPj0gYmxvY2tJbmRleCArIGxldmVsICYmIHBvaW50LnBhdGhbMF0gKyBsZXZlbCA+IC0xICYmIChwb2ludC5wYXRoID0gW3BvaW50LnBhdGhbMF0gKyBsZXZlbCwgLi4ucG9pbnQucGF0aC5zbGljZSgxKV0pO1xuICAgIH0pLCBjdXJyZW50Rm9jdXMgJiYgY3VycmVudEFuY2hvciAmJiAodHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcyA9IHtcbiAgICAgIGZvY3VzOiBjdXJyZW50Rm9jdXMsXG4gICAgICBhbmNob3I6IGN1cnJlbnRBbmNob3JcbiAgICB9KSwgbmV3Rm9jdXMgJiYgbmV3QW5jaG9yICYmICh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzID0ge1xuICAgICAgZm9jdXM6IG5ld0ZvY3VzLFxuICAgICAgYW5jaG9yOiBuZXdBbmNob3JcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybWVkT3BlcmF0aW9uO1xufVxuY29uc3Qgc2hvdWxkTWVyZ2UgPSAob3AsIHByZXYpID0+ICEhKG9wLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiIHx8IHByZXYgJiYgb3AudHlwZSA9PT0gXCJpbnNlcnRfdGV4dFwiICYmIHByZXYudHlwZSA9PT0gXCJpbnNlcnRfdGV4dFwiICYmIG9wLm9mZnNldCA9PT0gcHJldi5vZmZzZXQgKyBwcmV2LnRleHQubGVuZ3RoICYmIFBhdGguZXF1YWxzKG9wLnBhdGgsIHByZXYucGF0aCkgJiYgb3AudGV4dCAhPT0gXCIgXCIgfHwgcHJldiAmJiBvcC50eXBlID09PSBcInJlbW92ZV90ZXh0XCIgJiYgcHJldi50eXBlID09PSBcInJlbW92ZV90ZXh0XCIgJiYgb3Aub2Zmc2V0ICsgb3AudGV4dC5sZW5ndGggPT09IHByZXYub2Zmc2V0ICYmIFBhdGguZXF1YWxzKG9wLnBhdGgsIHByZXYucGF0aCkpLCBzaG91bGRPdmVyd3JpdGUgPSAob3AsIHByZXYpID0+ICEhKHByZXYgJiYgb3AudHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIgJiYgcHJldi50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIiksIHNob3VsZENsZWFyID0gKG9wKSA9PiBvcC50eXBlICE9PSBcInNldF9zZWxlY3Rpb25cIjtcbmZ1bmN0aW9uIHdpdGhvdXRTYXZpbmcoZWRpdG9yLCBmbikge1xuICBjb25zdCBwcmV2ID0gaXNTYXZpbmcoZWRpdG9yKTtcbiAgU0FWSU5HLnNldChlZGl0b3IsICExKSwgZm4oKSwgU0FWSU5HLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0T3BlcmF0aW9uKGVkaXRvcikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwic2V0X3NlbGVjdGlvblwiLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIC4uLmVkaXRvci5zZWxlY3Rpb25cbiAgICB9LFxuICAgIG5ld1Byb3BlcnRpZXM6IHtcbiAgICAgIC4uLmVkaXRvci5zZWxlY3Rpb25cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBmaW5kT3BlcmF0aW9uVGFyZ2V0QmxvY2soZWRpdG9yLCBvcGVyYXRpb24pIHtcbiAgbGV0IGJsb2NrO1xuICByZXR1cm4gb3BlcmF0aW9uLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiICYmIGVkaXRvci5zZWxlY3Rpb24gPyBibG9jayA9IGVkaXRvci5jaGlsZHJlbltlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF1dIDogXCJwYXRoXCIgaW4gb3BlcmF0aW9uICYmIChibG9jayA9IGVkaXRvci5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXV0pLCBibG9jaztcbn1cbmNvbnN0IHN5bmNWYWx1ZUNhbGxiYWNrID0gKHtcbiAgc2VuZEJhY2ssXG4gIGlucHV0XG59KSA9PiB7XG4gIHVwZGF0ZVZhbHVlKHtcbiAgICBjb250ZXh0OiBpbnB1dC5jb250ZXh0LFxuICAgIHNlbmRCYWNrLFxuICAgIHNsYXRlRWRpdG9yOiBpbnB1dC5zbGF0ZUVkaXRvcixcbiAgICB2YWx1ZTogaW5wdXQudmFsdWUsXG4gICAgc3RyZWFtQmxvY2tzOiBpbnB1dC5zdHJlYW1CbG9ja3NcbiAgfSk7XG59LCBzeW5jVmFsdWVMb2dpYyA9IGZyb21DYWxsYmFjayhzeW5jVmFsdWVDYWxsYmFjayksIHN5bmNNYWNoaW5lID0gc2V0dXAoe1xuICB0eXBlczoge1xuICAgIGNvbnRleHQ6IHt9LFxuICAgIGlucHV0OiB7fSxcbiAgICBldmVudHM6IHt9LFxuICAgIGVtaXR0ZWQ6IHt9XG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBcImFzc2lnbiBpbml0aWFsIHZhbHVlIHN5bmNlZFwiOiBhc3NpZ24oe1xuICAgICAgaW5pdGlhbFZhbHVlU3luY2VkOiAhMFxuICAgIH0pLFxuICAgIFwiYXNzaWduIHJlYWRPbmx5XCI6IGFzc2lnbih7XG4gICAgICByZWFkT25seTogKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJ1cGRhdGUgcmVhZE9ubHlcIiksIGV2ZW50LnJlYWRPbmx5KVxuICAgIH0pLFxuICAgIFwiYXNzaWduIHBlbmRpbmcgdmFsdWVcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdWYWx1ZTogKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJ1cGRhdGUgdmFsdWVcIiksIGV2ZW50LnZhbHVlKVxuICAgIH0pLFxuICAgIFwiY2xlYXIgcGVuZGluZyB2YWx1ZVwiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ1ZhbHVlOiB2b2lkIDBcbiAgICB9KSxcbiAgICBcImFzc2lnbiBwcmV2aW91cyB2YWx1ZVwiOiBhc3NpZ24oe1xuICAgICAgcHJldmlvdXNWYWx1ZTogKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJkb25lIHN5bmNpbmdcIiksIGV2ZW50LnZhbHVlKVxuICAgIH0pLFxuICAgIFwiZW1pdCBkb25lIHN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiOiBlbWl0KHtcbiAgICAgIHR5cGU6IFwiZG9uZSBzeW5jaW5nIGluaXRpYWwgdmFsdWVcIlxuICAgIH0pXG4gIH0sXG4gIGd1YXJkczoge1xuICAgIFwiaW5pdGlhbCB2YWx1ZSBzeW5jZWRcIjogKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSA9PiBjb250ZXh0LmluaXRpYWxWYWx1ZVN5bmNlZCxcbiAgICBcImlzIGJ1c3lcIjogKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSA9PiAhY29udGV4dC5yZWFkT25seSAmJiAoY29udGV4dC5pc1Byb2Nlc3NpbmdMb2NhbENoYW5nZXMgfHwgKGlzQ2hhbmdpbmdSZW1vdGVseShjb250ZXh0LnNsYXRlRWRpdG9yKSA/PyAhMSkpLFxuICAgIFwidmFsdWUgY2hhbmdlZCB3aGlsZSBzeW5jaW5nXCI6ICh7XG4gICAgICBjb250ZXh0LFxuICAgICAgZXZlbnRcbiAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwiZG9uZSBzeW5jaW5nXCIpLCBjb250ZXh0LnBlbmRpbmdWYWx1ZSAhPT0gZXZlbnQudmFsdWUpLFxuICAgIFwicGVuZGluZyB2YWx1ZSBlcXVhbHMgcHJldmlvdXMgdmFsdWVcIjogKHtcbiAgICAgIGNvbnRleHRcbiAgICB9KSA9PiBpc0VxdWFsKGNvbnRleHQucGVuZGluZ1ZhbHVlLCBjb250ZXh0LnByZXZpb3VzVmFsdWUpXG4gIH0sXG4gIGFjdG9yczoge1xuICAgIFwic3luYyB2YWx1ZVwiOiBzeW5jVmFsdWVMb2dpY1xuICB9XG59KS5jcmVhdGVNYWNoaW5lKHtcbiAgaWQ6IFwic3luY1wiLFxuICBjb250ZXh0OiAoe1xuICAgIGlucHV0XG4gIH0pID0+ICh7XG4gICAgaW5pdGlhbFZhbHVlU3luY2VkOiAhMSxcbiAgICBpc1Byb2Nlc3NpbmdMb2NhbENoYW5nZXM6ICExLFxuICAgIGtleUdlbmVyYXRvcjogaW5wdXQua2V5R2VuZXJhdG9yLFxuICAgIHNjaGVtYTogaW5wdXQuc2NoZW1hLFxuICAgIHJlYWRPbmx5OiBpbnB1dC5yZWFkT25seSxcbiAgICBzbGF0ZUVkaXRvcjogaW5wdXQuc2xhdGVFZGl0b3IsXG4gICAgcGVuZGluZ1ZhbHVlOiB2b2lkIDAsXG4gICAgcHJldmlvdXNWYWx1ZTogdm9pZCAwXG4gIH0pLFxuICBvbjoge1xuICAgIFwiaGFzIHBlbmRpbmcgcGF0Y2hlc1wiOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICBpc1Byb2Nlc3NpbmdMb2NhbENoYW5nZXM6ICEwXG4gICAgICB9KVxuICAgIH0sXG4gICAgbXV0YXRpb246IHtcbiAgICAgIGFjdGlvbnM6IGFzc2lnbih7XG4gICAgICAgIGlzUHJvY2Vzc2luZ0xvY2FsQ2hhbmdlczogITFcbiAgICAgIH0pXG4gICAgfSxcbiAgICBcInVwZGF0ZSByZWFkT25seVwiOiB7XG4gICAgICBhY3Rpb25zOiBbXCJhc3NpZ24gcmVhZE9ubHlcIl1cbiAgICB9XG4gIH0sXG4gIHR5cGU6IFwicGFyYWxsZWxcIixcbiAgc3RhdGVzOiB7XG4gICAgXCJzZXR0aW5nIHVwXCI6IHtcbiAgICAgIGluaXRpYWw6IFwic3luY2luZyBpbml0aWFsIHZhbHVlXCIsXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgXCJzeW5jaW5nIGluaXRpYWwgdmFsdWVcIjoge1xuICAgICAgICAgIGFsd2F5czoge1xuICAgICAgICAgICAgZ3VhcmQ6IFwiaW5pdGlhbCB2YWx1ZSBzeW5jZWRcIixcbiAgICAgICAgICAgIHRhcmdldDogXCJkb25lIHN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRvbmUgc3luY2luZyBpbml0aWFsIHZhbHVlXCI6IHtcbiAgICAgICAgICBlbnRyeTogW1wiZW1pdCBkb25lIHN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiXSxcbiAgICAgICAgICB0eXBlOiBcImZpbmFsXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3luY2luZzoge1xuICAgICAgaW5pdGlhbDogXCJpZGxlXCIsXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgaWRsZToge1xuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBcInVwZGF0ZSB2YWx1ZVwiOiBbe1xuICAgICAgICAgICAgICBndWFyZDogXCJpcyBidXN5XCIsXG4gICAgICAgICAgICAgIHRhcmdldDogXCJidXN5XCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCJdXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHRhcmdldDogXCJzeW5jaW5nXCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCJdXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYnVzeToge1xuICAgICAgICAgIGFmdGVyOiB7XG4gICAgICAgICAgICAxZTM6IFt7XG4gICAgICAgICAgICAgIGd1YXJkOiBcImlzIGJ1c3lcIixcbiAgICAgICAgICAgICAgcmVlbnRlcjogITBcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcInN5bmNpbmdcIlxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBcInVwZGF0ZSB2YWx1ZVwiOiBbe1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJhc3NpZ24gcGVuZGluZyB2YWx1ZVwiXVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN5bmNpbmc6IHtcbiAgICAgICAgICBhbHdheXM6IHtcbiAgICAgICAgICAgIGd1YXJkOiBcInBlbmRpbmcgdmFsdWUgZXF1YWxzIHByZXZpb3VzIHZhbHVlXCIsXG4gICAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiY2xlYXIgcGVuZGluZyB2YWx1ZVwiLCBcImFzc2lnbiBpbml0aWFsIHZhbHVlIHN5bmNlZFwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaW52b2tlOiB7XG4gICAgICAgICAgICBzcmM6IFwic3luYyB2YWx1ZVwiLFxuICAgICAgICAgICAgaWQ6IFwic3luYyB2YWx1ZVwiLFxuICAgICAgICAgICAgaW5wdXQ6ICh7XG4gICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgIH0pID0+ICh7XG4gICAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWU6IGNvbnRleHQucHJldmlvdXNWYWx1ZSxcbiAgICAgICAgICAgICAgICByZWFkT25seTogY29udGV4dC5yZWFkT25seSxcbiAgICAgICAgICAgICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHNsYXRlRWRpdG9yOiBjb250ZXh0LnNsYXRlRWRpdG9yLFxuICAgICAgICAgICAgICBzdHJlYW1CbG9ja3M6ICFjb250ZXh0LmluaXRpYWxWYWx1ZVN5bmNlZCxcbiAgICAgICAgICAgICAgdmFsdWU6IGNvbnRleHQucGVuZGluZ1ZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIFwidXBkYXRlIHZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogW1wiYXNzaWduIHBlbmRpbmcgdmFsdWVcIl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRjaDoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImludmFsaWQgdmFsdWVcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInZhbHVlIGNoYW5nZWRcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRvbmUgc3luY2luZ1wiOiBbe1xuICAgICAgICAgICAgICBndWFyZDogXCJ2YWx1ZSBjaGFuZ2VkIHdoaWxlIHN5bmNpbmdcIixcbiAgICAgICAgICAgICAgYWN0aW9uczogW1wiYXNzaWduIHByZXZpb3VzIHZhbHVlXCIsIFwiYXNzaWduIGluaXRpYWwgdmFsdWUgc3luY2VkXCJdLFxuICAgICAgICAgICAgICByZWVudGVyOiAhMFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiLFxuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJjbGVhciBwZW5kaW5nIHZhbHVlXCIsIFwiYXNzaWduIHByZXZpb3VzIHZhbHVlXCIsIFwiYXNzaWduIGluaXRpYWwgdmFsdWUgc3luY2VkXCJdXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSksIGRlYnVnJGQgPSBkZWJ1Z1dpdGhOYW1lKFwiaG9vazp1c2VTeW5jVmFsdWVcIik7XG5hc3luYyBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh7XG4gIGNvbnRleHQsXG4gIHNlbmRCYWNrLFxuICBzbGF0ZUVkaXRvcixcbiAgc3RyZWFtQmxvY2tzLFxuICB2YWx1ZVxufSkge1xuICBsZXQgaXNDaGFuZ2VkID0gITEsIGlzVmFsaWQgPSAhMDtcbiAgY29uc3QgaGFkU2VsZWN0aW9uID0gISFzbGF0ZUVkaXRvci5zZWxlY3Rpb247XG4gIGlmICgoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCkgJiYgKGRlYnVnJGQoXCJWYWx1ZSBpcyBlbXB0eVwiKSwgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgIHdpdGhvdXRTYXZpbmcoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgIHdpdGhvdXRQYXRjaGluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICBoYWRTZWxlY3Rpb24gJiYgVHJhbnNmb3Jtcy5kZXNlbGVjdChzbGF0ZUVkaXRvcik7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuTGVuZ3RoID0gc2xhdGVFZGl0b3IuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICBzbGF0ZUVkaXRvci5jaGlsZHJlbi5mb3JFYWNoKChfLCBpbmRleCkgPT4ge1xuICAgICAgICAgIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoc2xhdGVFZGl0b3IsIHtcbiAgICAgICAgICAgIGF0OiBbY2hpbGRyZW5MZW5ndGggLSAxIC0gaW5kZXhdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBzbGF0ZUVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2soe1xuICAgICAgICAgIGRlY29yYXRvcnM6IFtdXG4gICAgICAgIH0pLCB7XG4gICAgICAgICAgYXQ6IFswXVxuICAgICAgICB9KSwgaGFkU2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBbMCwgMF0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pLCBpc0NoYW5nZWQgPSAhMCksIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBzbGF0ZVZhbHVlRnJvbVByb3BzID0gdG9TbGF0ZVZhbHVlKHZhbHVlLCB7XG4gICAgICBzY2hlbWFUeXBlczogY29udGV4dC5zY2hlbWFcbiAgICB9KTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICB3aXRoUmVtb3RlQ2hhbmdlcyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIHdpdGhvdXRQYXRjaGluZyhzbGF0ZUVkaXRvciwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW5MZW5ndGggPSBzbGF0ZUVkaXRvci5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoc2xhdGVWYWx1ZUZyb21Qcm9wcy5sZW5ndGggPCBjaGlsZHJlbkxlbmd0aCkge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gY2hpbGRyZW5MZW5ndGggLSAxOyBpID4gc2xhdGVWYWx1ZUZyb21Qcm9wcy5sZW5ndGggLSAxOyBpLS0pXG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgYXQ6IFtpXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpc0NoYW5nZWQgPSAhMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgW2N1cnJlbnRCbG9jaywgY3VycmVudEJsb2NrSW5kZXhdIG9mIGdldEJsb2Nrcyh7XG4gICAgICAgICAgICAgIHNsYXRlVmFsdWU6IHNsYXRlVmFsdWVGcm9tUHJvcHMsXG4gICAgICAgICAgICAgIHN0cmVhbUJsb2Nrc1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGJsb2NrQ2hhbmdlZCxcbiAgICAgICAgICAgICAgICBibG9ja1ZhbGlkXG4gICAgICAgICAgICAgIH0gPSBzeW5jQmxvY2soe1xuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgc2VuZEJhY2ssXG4gICAgICAgICAgICAgICAgYmxvY2s6IGN1cnJlbnRCbG9jayxcbiAgICAgICAgICAgICAgICBpbmRleDogY3VycmVudEJsb2NrSW5kZXgsXG4gICAgICAgICAgICAgICAgc2xhdGVFZGl0b3IsXG4gICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlzQ2hhbmdlZCA9IGJsb2NrQ2hhbmdlZCB8fCBpc0NoYW5nZWQsIGlzVmFsaWQgPSBpc1ZhbGlkICYmIGJsb2NrVmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgZGVidWckZChcIkludmFsaWQgdmFsdWUsIHJldHVybmluZ1wiKSwgc2VuZEJhY2soe1xuICAgICAgdHlwZTogXCJkb25lIHN5bmNpbmdcIixcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpc0NoYW5nZWQpIHtcbiAgICBkZWJ1ZyRkKFwiU2VydmVyIHZhbHVlIGNoYW5nZWQsIHN5bmNpbmcgZWRpdG9yXCIpO1xuICAgIHRyeSB7XG4gICAgICBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpLCBzZW5kQmFjayh7XG4gICAgICAgIHR5cGU6IFwiaW52YWxpZCB2YWx1ZVwiLFxuICAgICAgICByZXNvbHV0aW9uOiBudWxsLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSksIHNlbmRCYWNrKHtcbiAgICAgICAgdHlwZTogXCJkb25lIHN5bmNpbmdcIixcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoYWRTZWxlY3Rpb24gJiYgIXNsYXRlRWRpdG9yLnNlbGVjdGlvbiAmJiAoVHJhbnNmb3Jtcy5zZWxlY3Qoc2xhdGVFZGl0b3IsIHtcbiAgICAgIGFuY2hvcjoge1xuICAgICAgICBwYXRoOiBbMCwgMF0sXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfSxcbiAgICAgIGZvY3VzOiB7XG4gICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9XG4gICAgfSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCkpLCBzZW5kQmFjayh7XG4gICAgICB0eXBlOiBcInZhbHVlIGNoYW5nZWRcIixcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gIH0gZWxzZVxuICAgIGRlYnVnJGQoXCJTZXJ2ZXIgdmFsdWUgYW5kIGVkaXRvciB2YWx1ZSBpcyBlcXVhbCwgbm8gbmVlZCB0byBzeW5jLlwiKTtcbiAgc2VuZEJhY2soe1xuICAgIHR5cGU6IFwiZG9uZSBzeW5jaW5nXCIsXG4gICAgdmFsdWVcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiogZ2V0QmxvY2tzKHtcbiAgc2xhdGVWYWx1ZSxcbiAgc3RyZWFtQmxvY2tzXG59KSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGZvciBhd2FpdCAoY29uc3QgYmxvY2sgb2Ygc2xhdGVWYWx1ZSlcbiAgICBzdHJlYW1CbG9ja3MgJiYgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMCkpLCB5aWVsZCBbYmxvY2ssIGluZGV4XSwgaW5kZXgrKztcbn1cbmZ1bmN0aW9uIHN5bmNCbG9jayh7XG4gIGNvbnRleHQsXG4gIHNlbmRCYWNrLFxuICBibG9jayxcbiAgaW5kZXgsXG4gIHNsYXRlRWRpdG9yLFxuICB2YWx1ZVxufSkge1xuICBsZXQgYmxvY2tDaGFuZ2VkID0gITEsIGJsb2NrVmFsaWQgPSAhMDtcbiAgY29uc3QgY3VycmVudEJsb2NrID0gYmxvY2ssIGN1cnJlbnRCbG9ja0luZGV4ID0gaW5kZXgsIG9sZEJsb2NrID0gc2xhdGVFZGl0b3IuY2hpbGRyZW5bY3VycmVudEJsb2NrSW5kZXhdLCBoYXNDaGFuZ2VzID0gb2xkQmxvY2sgJiYgIWlzRXF1YWwoY3VycmVudEJsb2NrLCBvbGRCbG9jayk7XG4gIHJldHVybiBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgd2l0aFJlbW90ZUNoYW5nZXMoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgIHdpdGhvdXRQYXRjaGluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICBpZiAoaGFzQ2hhbmdlcyAmJiBibG9ja1ZhbGlkKSB7XG4gICAgICAgICAgY29uc3QgdmFsaWRhdGlvblZhbHVlID0gW3ZhbHVlW2N1cnJlbnRCbG9ja0luZGV4XV0sIHZhbGlkYXRpb24gPSB2YWxpZGF0ZVZhbHVlKHZhbGlkYXRpb25WYWx1ZSwgY29udGV4dC5zY2hlbWEsIGNvbnRleHQua2V5R2VuZXJhdG9yKTtcbiAgICAgICAgICAhdmFsaWRhdGlvbi52YWxpZCAmJiB2YWxpZGF0aW9uLnJlc29sdXRpb24/LmF1dG9SZXNvbHZlICYmIHZhbGlkYXRpb24ucmVzb2x1dGlvbj8ucGF0Y2hlcy5sZW5ndGggPiAwICYmICFjb250ZXh0LnJlYWRPbmx5ICYmIGNvbnRleHQucHJldmlvdXNWYWx1ZSAmJiBjb250ZXh0LnByZXZpb3VzVmFsdWUgIT09IHZhbHVlICYmIChjb25zb2xlLndhcm4oYCR7dmFsaWRhdGlvbi5yZXNvbHV0aW9uLmFjdGlvbn0gZm9yIGJsb2NrIHdpdGggX2tleSAnJHt2YWxpZGF0aW9uVmFsdWVbMF0uX2tleX0nLiAke3ZhbGlkYXRpb24ucmVzb2x1dGlvbj8uZGVzY3JpcHRpb259YCksIHZhbGlkYXRpb24ucmVzb2x1dGlvbi5wYXRjaGVzLmZvckVhY2goKHBhdGNoKSA9PiB7XG4gICAgICAgICAgICBzZW5kQmFjayh7XG4gICAgICAgICAgICAgIHR5cGU6IFwicGF0Y2hcIixcbiAgICAgICAgICAgICAgcGF0Y2hcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pKSwgdmFsaWRhdGlvbi52YWxpZCB8fCB2YWxpZGF0aW9uLnJlc29sdXRpb24/LmF1dG9SZXNvbHZlID8gKG9sZEJsb2NrLl9rZXkgPT09IGN1cnJlbnRCbG9jay5fa2V5ID8gKGRlYnVnJGQuZW5hYmxlZCAmJiBkZWJ1ZyRkKFwiVXBkYXRpbmcgYmxvY2tcIiwgb2xkQmxvY2ssIGN1cnJlbnRCbG9jayksIF91cGRhdGVCbG9jayhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCBvbGRCbG9jaywgY3VycmVudEJsb2NrSW5kZXgpKSA6IChkZWJ1ZyRkLmVuYWJsZWQgJiYgZGVidWckZChcIlJlcGxhY2luZyBibG9ja1wiLCBvbGRCbG9jaywgY3VycmVudEJsb2NrKSwgX3JlcGxhY2VCbG9jayhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCBjdXJyZW50QmxvY2tJbmRleCkpLCBibG9ja0NoYW5nZWQgPSAhMCkgOiAoc2VuZEJhY2soe1xuICAgICAgICAgICAgdHlwZTogXCJpbnZhbGlkIHZhbHVlXCIsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiB2YWxpZGF0aW9uLnJlc29sdXRpb24sXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0pLCBibG9ja1ZhbGlkID0gITEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb2xkQmxvY2sgJiYgYmxvY2tWYWxpZCkge1xuICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25WYWx1ZSA9IFt2YWx1ZVtjdXJyZW50QmxvY2tJbmRleF1dLCB2YWxpZGF0aW9uID0gdmFsaWRhdGVWYWx1ZSh2YWxpZGF0aW9uVmFsdWUsIGNvbnRleHQuc2NoZW1hLCBjb250ZXh0LmtleUdlbmVyYXRvcik7XG4gICAgICAgICAgZGVidWckZC5lbmFibGVkICYmIGRlYnVnJGQoXCJWYWxpZGF0aW5nIGFuZCBpbnNlcnRpbmcgbmV3IGJsb2NrIGluIHRoZSBlbmQgb2YgdGhlIHZhbHVlXCIsIGN1cnJlbnRCbG9jayksIHZhbGlkYXRpb24udmFsaWQgfHwgdmFsaWRhdGlvbi5yZXNvbHV0aW9uPy5hdXRvUmVzb2x2ZSA/IFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywge1xuICAgICAgICAgICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleF1cbiAgICAgICAgICB9KSA6IChkZWJ1ZyRkKFwiSW52YWxpZFwiLCB2YWxpZGF0aW9uKSwgc2VuZEJhY2soe1xuICAgICAgICAgICAgdHlwZTogXCJpbnZhbGlkIHZhbHVlXCIsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiB2YWxpZGF0aW9uLnJlc29sdXRpb24sXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0pLCBibG9ja1ZhbGlkID0gITEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSksIHtcbiAgICBibG9ja0NoYW5nZWQsXG4gICAgYmxvY2tWYWxpZFxuICB9O1xufVxuZnVuY3Rpb24gX3JlcGxhY2VCbG9jayhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCBjdXJyZW50QmxvY2tJbmRleCkge1xuICBjb25zdCBjdXJyZW50U2VsZWN0aW9uID0gc2xhdGVFZGl0b3Iuc2VsZWN0aW9uLCBzZWxlY3Rpb25Gb2N1c09uQmxvY2sgPSBjdXJyZW50U2VsZWN0aW9uICYmIGN1cnJlbnRTZWxlY3Rpb24uZm9jdXMucGF0aFswXSA9PT0gY3VycmVudEJsb2NrSW5kZXg7XG4gIHNlbGVjdGlvbkZvY3VzT25CbG9jayAmJiBUcmFuc2Zvcm1zLmRlc2VsZWN0KHNsYXRlRWRpdG9yKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXhdXG4gIH0pLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2ssIHtcbiAgICBhdDogW2N1cnJlbnRCbG9ja0luZGV4XVxuICB9KSwgc2xhdGVFZGl0b3Iub25DaGFuZ2UoKSwgc2VsZWN0aW9uRm9jdXNPbkJsb2NrICYmIFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBjdXJyZW50U2VsZWN0aW9uKTtcbn1cbmZ1bmN0aW9uIF91cGRhdGVCbG9jayhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCBvbGRCbG9jaywgY3VycmVudEJsb2NrSW5kZXgpIHtcbiAgaWYgKFRyYW5zZm9ybXMuc2V0Tm9kZXMoc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywge1xuICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXhdXG4gIH0pLCBzbGF0ZUVkaXRvci5pc1RleHRCbG9jayhjdXJyZW50QmxvY2spICYmIHNsYXRlRWRpdG9yLmlzVGV4dEJsb2NrKG9sZEJsb2NrKSkge1xuICAgIGNvbnN0IG9sZEJsb2NrQ2hpbGRyZW5MZW5ndGggPSBvbGRCbG9jay5jaGlsZHJlbi5sZW5ndGg7XG4gICAgY3VycmVudEJsb2NrLmNoaWxkcmVuLmxlbmd0aCA8IG9sZEJsb2NrQ2hpbGRyZW5MZW5ndGggJiYgQXJyYXkuZnJvbShBcnJheShvbGRCbG9ja0NoaWxkcmVuTGVuZ3RoIC0gY3VycmVudEJsb2NrLmNoaWxkcmVuLmxlbmd0aCkpLmZvckVhY2goKF8sIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBjaGlsZEluZGV4ID0gb2xkQmxvY2tDaGlsZHJlbkxlbmd0aCAtIDEgLSBpbmRleDtcbiAgICAgIGNoaWxkSW5kZXggPiAwICYmIChkZWJ1ZyRkKFwiUmVtb3ZpbmcgY2hpbGRcIiksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoc2xhdGVFZGl0b3IsIHtcbiAgICAgICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleCwgY2hpbGRJbmRleF1cbiAgICAgIH0pKTtcbiAgICB9KSwgY3VycmVudEJsb2NrLmNoaWxkcmVuLmZvckVhY2goKGN1cnJlbnRCbG9ja0NoaWxkLCBjdXJyZW50QmxvY2tDaGlsZEluZGV4KSA9PiB7XG4gICAgICBjb25zdCBvbGRCbG9ja0NoaWxkID0gb2xkQmxvY2suY2hpbGRyZW5bY3VycmVudEJsb2NrQ2hpbGRJbmRleF0sIGlzQ2hpbGRDaGFuZ2VkID0gIWlzRXF1YWwoY3VycmVudEJsb2NrQ2hpbGQsIG9sZEJsb2NrQ2hpbGQpLCBpc1RleHRDaGFuZ2VkID0gIWlzRXF1YWwoY3VycmVudEJsb2NrQ2hpbGQudGV4dCwgb2xkQmxvY2tDaGlsZD8udGV4dCksIHBhdGggPSBbY3VycmVudEJsb2NrSW5kZXgsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXhdO1xuICAgICAgaWYgKGlzQ2hpbGRDaGFuZ2VkKVxuICAgICAgICBpZiAoY3VycmVudEJsb2NrQ2hpbGQuX2tleSA9PT0gb2xkQmxvY2tDaGlsZD8uX2tleSkge1xuICAgICAgICAgIGRlYnVnJGQoXCJVcGRhdGluZyBjaGFuZ2VkIGNoaWxkXCIsIGN1cnJlbnRCbG9ja0NoaWxkLCBvbGRCbG9ja0NoaWxkKSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrQ2hpbGQsIHtcbiAgICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3QgaXNTcGFuTm9kZSA9IFRleHQuaXNUZXh0KGN1cnJlbnRCbG9ja0NoaWxkKSAmJiBjdXJyZW50QmxvY2tDaGlsZC5fdHlwZSA9PT0gXCJzcGFuXCIgJiYgVGV4dC5pc1RleHQob2xkQmxvY2tDaGlsZCkgJiYgb2xkQmxvY2tDaGlsZC5fdHlwZSA9PT0gXCJzcGFuXCI7XG4gICAgICAgICAgaXNTcGFuTm9kZSAmJiBpc1RleHRDaGFuZ2VkID8gKFRyYW5zZm9ybXMuZGVsZXRlKHNsYXRlRWRpdG9yLCB7XG4gICAgICAgICAgICBhdDoge1xuICAgICAgICAgICAgICBmb2N1czoge1xuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBvbGRCbG9ja0NoaWxkLnRleHQubGVuZ3RoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnRUZXh0KHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2tDaGlsZC50ZXh0LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKSA6IGlzU3Bhbk5vZGUgfHwgKGRlYnVnJGQoXCJVcGRhdGluZyBjaGFuZ2VkIGlubGluZSBvYmplY3QgY2hpbGRcIiwgY3VycmVudEJsb2NrQ2hpbGQpLCBUcmFuc2Zvcm1zLnNldE5vZGVzKHNsYXRlRWRpdG9yLCB7XG4gICAgICAgICAgICBfa2V5OiBWT0lEX0NISUxEX0tFWVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiBbLi4ucGF0aCwgMF0sXG4gICAgICAgICAgICB2b2lkczogITBcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSBvbGRCbG9ja0NoaWxkID8gKGRlYnVnJGQoXCJSZXBsYWNpbmcgY2hpbGRcIiwgY3VycmVudEJsb2NrQ2hpbGQpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKHNsYXRlRWRpdG9yLCB7XG4gICAgICAgICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleCwgY3VycmVudEJsb2NrQ2hpbGRJbmRleF1cbiAgICAgICAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9ja0NoaWxkLCB7XG4gICAgICAgICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleCwgY3VycmVudEJsb2NrQ2hpbGRJbmRleF1cbiAgICAgICAgfSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCkpIDogb2xkQmxvY2tDaGlsZCB8fCAoZGVidWckZChcIkluc2VydGluZyBuZXcgY2hpbGRcIiwgY3VycmVudEJsb2NrQ2hpbGQpLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2tDaGlsZCwge1xuICAgICAgICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXgsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXhdXG4gICAgICAgIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKTtcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgZGVidWckYyA9IGRlYnVnV2l0aE5hbWUoXCJjb21wb25lbnQ6UG9ydGFibGVUZXh0RWRpdG9yOlN5bmNocm9uaXplclwiKTtcbmZ1bmN0aW9uIFN5bmNocm9uaXplcihwcm9wcykge1xuICBjb25zdCAkID0gYyg0MCksIHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBzbGF0ZUVkaXRvclxuICB9ID0gcHJvcHMsIHZhbHVlID0gdXNlU2VsZWN0b3IocHJvcHMuZWRpdG9yQWN0b3IsIF90ZW1wKSwgcmVhZE9ubHkgPSB1c2VTZWxlY3Rvcihwcm9wcy5lZGl0b3JBY3RvciwgX3RlbXAyKTtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBwcm9wcy5lZGl0b3JBY3RvciA/ICh0MCA9IHByb3BzLmVkaXRvckFjdG9yLmdldFNuYXBzaG90KCksICRbMF0gPSBwcm9wcy5lZGl0b3JBY3RvciwgJFsxXSA9IHQwKSA6IHQwID0gJFsxXTtcbiAgY29uc3QgdDEgPSB0MC5jb250ZXh0LmtleUdlbmVyYXRvcjtcbiAgbGV0IHQyO1xuICAkWzJdICE9PSBwcm9wcy5lZGl0b3JBY3RvciA/ICh0MiA9IHByb3BzLmVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICB9KSwgJFsyXSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzNdID0gdDIpIDogdDIgPSAkWzNdO1xuICBsZXQgdDM7XG4gICRbNF0gIT09IHByb3BzLmVkaXRvckFjdG9yID8gKHQzID0gcHJvcHMuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKSwgJFs0XSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzVdID0gdDMpIDogdDMgPSAkWzVdO1xuICBsZXQgdDQ7XG4gICRbNl0gIT09IHNsYXRlRWRpdG9yIHx8ICRbN10gIT09IHQwLmNvbnRleHQua2V5R2VuZXJhdG9yIHx8ICRbOF0gIT09IHQyIHx8ICRbOV0gIT09IHQzLmNvbnRleHQuc2NoZW1hID8gKHQ0ID0ge1xuICAgIGlucHV0OiB7XG4gICAgICBrZXlHZW5lcmF0b3I6IHQxLFxuICAgICAgcmVhZE9ubHk6IHQyLFxuICAgICAgc2NoZW1hOiB0My5jb250ZXh0LnNjaGVtYSxcbiAgICAgIHNsYXRlRWRpdG9yXG4gICAgfVxuICB9LCAkWzZdID0gc2xhdGVFZGl0b3IsICRbN10gPSB0MC5jb250ZXh0LmtleUdlbmVyYXRvciwgJFs4XSA9IHQyLCAkWzldID0gdDMuY29udGV4dC5zY2hlbWEsICRbMTBdID0gdDQpIDogdDQgPSAkWzEwXTtcbiAgY29uc3Qgc3luY0FjdG9yUmVmID0gdXNlQWN0b3JSZWYoc3luY01hY2hpbmUsIHQ0KTtcbiAgbGV0IHQ1O1xuICAkWzExXSAhPT0gZWRpdG9yQWN0b3IgPyAodDUgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLCAkWzExXSA9IGVkaXRvckFjdG9yLCAkWzEyXSA9IHQ1KSA6IHQ1ID0gJFsxMl07XG4gIGxldCB0NjtcbiAgJFsxM10gIT09IHNsYXRlRWRpdG9yIHx8ICRbMTRdICE9PSB0NS5jb250ZXh0LnNjaGVtYSA/ICh0NiA9IHtcbiAgICBpbnB1dDoge1xuICAgICAgc2NoZW1hOiB0NS5jb250ZXh0LnNjaGVtYSxcbiAgICAgIHNsYXRlRWRpdG9yXG4gICAgfVxuICB9LCAkWzEzXSA9IHNsYXRlRWRpdG9yLCAkWzE0XSA9IHQ1LmNvbnRleHQuc2NoZW1hLCAkWzE1XSA9IHQ2KSA6IHQ2ID0gJFsxNV07XG4gIGNvbnN0IG11dGF0aW9uQWN0b3JSZWYgPSB1c2VBY3RvclJlZihtdXRhdGlvbk1hY2hpbmUsIHQ2KTtcbiAgbGV0IHQ3LCB0ODtcbiAgJFsxNl0gIT09IGVkaXRvckFjdG9yIHx8ICRbMTddICE9PSBtdXRhdGlvbkFjdG9yUmVmIHx8ICRbMThdICE9PSBzeW5jQWN0b3JSZWYgPyAodDcgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gbXV0YXRpb25BY3RvclJlZi5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC50eXBlID09PSBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIiAmJiBzeW5jQWN0b3JSZWYuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiaGFzIHBlbmRpbmcgcGF0Y2hlc1wiXG4gICAgICB9KSwgZXZlbnQudHlwZSA9PT0gXCJtdXRhdGlvblwiICYmIChzeW5jQWN0b3JSZWYuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwibXV0YXRpb25cIlxuICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcIm11dGF0aW9uXCIsXG4gICAgICAgIHBhdGNoZXM6IGV2ZW50LnBhdGNoZXMsXG4gICAgICAgIHNuYXBzaG90OiBldmVudC5zbmFwc2hvdCxcbiAgICAgICAgdmFsdWU6IGV2ZW50LnNuYXBzaG90XG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIHQ4ID0gW211dGF0aW9uQWN0b3JSZWYsIHN5bmNBY3RvclJlZiwgZWRpdG9yQWN0b3JdLCAkWzE2XSA9IGVkaXRvckFjdG9yLCAkWzE3XSA9IG11dGF0aW9uQWN0b3JSZWYsICRbMThdID0gc3luY0FjdG9yUmVmLCAkWzE5XSA9IHQ3LCAkWzIwXSA9IHQ4KSA6ICh0NyA9ICRbMTldLCB0OCA9ICRbMjBdKSwgdXNlRWZmZWN0KHQ3LCB0OCk7XG4gIGxldCB0MTAsIHQ5O1xuICAkWzIxXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgfHwgJFsyMl0gIT09IHN5bmNBY3RvclJlZiA/ICh0OSA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25fMCA9IHN5bmNBY3RvclJlZi5vbihcIipcIiwgKGV2ZW50XzApID0+IHtcbiAgICAgIGJiMTU6IHN3aXRjaCAoZXZlbnRfMC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJpbnZhbGlkIHZhbHVlXCI6IHtcbiAgICAgICAgICBwcm9wcy5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIC4uLmV2ZW50XzAsXG4gICAgICAgICAgICB0eXBlOiBcIm5vdGlmeS5pbnZhbGlkIHZhbHVlXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhayBiYjE1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ2YWx1ZSBjaGFuZ2VkXCI6IHtcbiAgICAgICAgICBwcm9wcy5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIC4uLmV2ZW50XzAsXG4gICAgICAgICAgICB0eXBlOiBcIm5vdGlmeS52YWx1ZSBjaGFuZ2VkXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhayBiYjE1O1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcHJvcHMuZWRpdG9yQWN0b3Iuc2VuZChldmVudF8wKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uXzAudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCB0MTAgPSBbcHJvcHMuZWRpdG9yQWN0b3IsIHN5bmNBY3RvclJlZl0sICRbMjFdID0gcHJvcHMuZWRpdG9yQWN0b3IsICRbMjJdID0gc3luY0FjdG9yUmVmLCAkWzIzXSA9IHQxMCwgJFsyNF0gPSB0OSkgOiAodDEwID0gJFsyM10sIHQ5ID0gJFsyNF0pLCB1c2VFZmZlY3QodDksIHQxMCk7XG4gIGxldCB0MTEsIHQxMjtcbiAgJFsyNV0gIT09IHJlYWRPbmx5IHx8ICRbMjZdICE9PSBzeW5jQWN0b3JSZWYgPyAodDExID0gKCkgPT4ge1xuICAgIHN5bmNBY3RvclJlZi5zZW5kKHtcbiAgICAgIHR5cGU6IFwidXBkYXRlIHJlYWRPbmx5XCIsXG4gICAgICByZWFkT25seVxuICAgIH0pO1xuICB9LCB0MTIgPSBbc3luY0FjdG9yUmVmLCByZWFkT25seV0sICRbMjVdID0gcmVhZE9ubHksICRbMjZdID0gc3luY0FjdG9yUmVmLCAkWzI3XSA9IHQxMSwgJFsyOF0gPSB0MTIpIDogKHQxMSA9ICRbMjddLCB0MTIgPSAkWzI4XSksIHVzZUVmZmVjdCh0MTEsIHQxMik7XG4gIGxldCB0MTMsIHQxNDtcbiAgJFsyOV0gIT09IHN5bmNBY3RvclJlZiB8fCAkWzMwXSAhPT0gdmFsdWUgPyAodDEzID0gKCkgPT4ge1xuICAgIGRlYnVnJGMoXCJWYWx1ZSBmcm9tIHByb3BzIGNoYW5nZWQsIHN5bmNpbmcgbmV3IHZhbHVlXCIpLCBzeW5jQWN0b3JSZWYuc2VuZCh7XG4gICAgICB0eXBlOiBcInVwZGF0ZSB2YWx1ZVwiLFxuICAgICAgdmFsdWVcbiAgICB9KTtcbiAgfSwgdDE0ID0gW3N5bmNBY3RvclJlZiwgdmFsdWVdLCAkWzI5XSA9IHN5bmNBY3RvclJlZiwgJFszMF0gPSB2YWx1ZSwgJFszMV0gPSB0MTMsICRbMzJdID0gdDE0KSA6ICh0MTMgPSAkWzMxXSwgdDE0ID0gJFszMl0pLCB1c2VFZmZlY3QodDEzLCB0MTQpO1xuICBsZXQgdDE1O1xuICAkWzMzXSAhPT0gZWRpdG9yQWN0b3IgfHwgJFszNF0gIT09IG11dGF0aW9uQWN0b3JSZWYgPyAodDE1ID0gKCkgPT4ge1xuICAgIGRlYnVnJGMoXCJTdWJzY3JpYmluZyB0byBwYXRjaCBldmVudHNcIik7XG4gICAgY29uc3Qgc3ViID0gZWRpdG9yQWN0b3Iub24oXCJwYXRjaFwiLCAoZXZlbnRfMSkgPT4ge1xuICAgICAgbXV0YXRpb25BY3RvclJlZi5zZW5kKGV2ZW50XzEpO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZWJ1ZyRjKFwiVW5zdWJzY3JpYmluZyB0byBwYXRjaCBldmVudHNcIiksIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sICRbMzNdID0gZWRpdG9yQWN0b3IsICRbMzRdID0gbXV0YXRpb25BY3RvclJlZiwgJFszNV0gPSB0MTUpIDogdDE1ID0gJFszNV07XG4gIGxldCB0MTY7XG4gIHJldHVybiAkWzM2XSAhPT0gZWRpdG9yQWN0b3IgfHwgJFszN10gIT09IG11dGF0aW9uQWN0b3JSZWYgfHwgJFszOF0gIT09IHNsYXRlRWRpdG9yID8gKHQxNiA9IFtlZGl0b3JBY3RvciwgbXV0YXRpb25BY3RvclJlZiwgc2xhdGVFZGl0b3JdLCAkWzM2XSA9IGVkaXRvckFjdG9yLCAkWzM3XSA9IG11dGF0aW9uQWN0b3JSZWYsICRbMzhdID0gc2xhdGVFZGl0b3IsICRbMzldID0gdDE2KSA6IHQxNiA9ICRbMzldLCB1c2VFZmZlY3QodDE1LCB0MTYpLCBudWxsO1xufVxuZnVuY3Rpb24gX3RlbXAyKHNfMCkge1xuICByZXR1cm4gc18wLm1hdGNoZXMoe1xuICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgfSk7XG59XG5mdW5jdGlvbiBfdGVtcChzKSB7XG4gIHJldHVybiBzLmNvbnRleHQudmFsdWU7XG59XG5TeW5jaHJvbml6ZXIuZGlzcGxheU5hbWUgPSBcIlN5bmNocm9uaXplclwiO1xuY29uc3QgY29udmVydGVySnNvbiA9IHtcbiAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICBzZXJpYWxpemU6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgY29uc3QgcG9ydGFibGVUZXh0Q29udmVydGVyID0gY29udGV4dC5jb252ZXJ0ZXJzLmZpbmQoKGNvbnZlcnRlcikgPT4gY29udmVydGVyLm1pbWVUeXBlID09PSBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiKTtcbiAgICByZXR1cm4gcG9ydGFibGVUZXh0Q29udmVydGVyID8ge1xuICAgICAgLi4ucG9ydGFibGVUZXh0Q29udmVydGVyLnNlcmlhbGl6ZSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSxcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICAgIH0gOiB7XG4gICAgICB0eXBlOiBcInNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50LFxuICAgICAgcmVhc29uOiBcIk5vIGFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dCBDb252ZXJ0ZXIgZm91bmRcIlxuICAgIH07XG4gIH0sXG4gIGRlc2VyaWFsaXplOiAoe1xuICAgIGNvbnRleHQsXG4gICAgZXZlbnRcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHBvcnRhYmxlVGV4dENvbnZlcnRlciA9IGNvbnRleHQuY29udmVydGVycy5maW5kKChjb252ZXJ0ZXIpID0+IGNvbnZlcnRlci5taW1lVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXBvcnRhYmxlLXRleHRcIik7XG4gICAgcmV0dXJuIHBvcnRhYmxlVGV4dENvbnZlcnRlciA/IHtcbiAgICAgIC4uLnBvcnRhYmxlVGV4dENvbnZlcnRlci5kZXNlcmlhbGl6ZSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSxcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH0gOiB7XG4gICAgICB0eXBlOiBcImRlc2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICByZWFzb246IFwiTm8gYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0IENvbnZlcnRlciBmb3VuZFwiXG4gICAgfTtcbiAgfVxufTtcbmZ1bmN0aW9uIGlzVHlwZWRPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiBpc1JlY29yZChvYmplY3QpICYmIHR5cGVvZiBvYmplY3QuX3R5cGUgPT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzUmVjb3JkKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgdmFsdWUgPT0gXCJmdW5jdGlvblwiKTtcbn1cbmZ1bmN0aW9uIHBhcnNlQmxvY2soe1xuICBjb250ZXh0LFxuICBibG9jayxcbiAgb3B0aW9uc1xufSkge1xuICBpZiAoIWlzVHlwZWRPYmplY3QoYmxvY2spIHx8IGJsb2NrLl90eXBlICE9PSBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lICYmICFjb250ZXh0LnNjaGVtYS5ibG9ja09iamVjdHMuc29tZSgoYmxvY2tPYmplY3QpID0+IGJsb2NrT2JqZWN0Lm5hbWUgPT09IGJsb2NrLl90eXBlKSlcbiAgICByZXR1cm47XG4gIGlmIChibG9jay5fdHlwZSAhPT0gY29udGV4dC5zY2hlbWEuYmxvY2submFtZSkge1xuICAgIGNvbnN0IF9rZXkgPSBvcHRpb25zLnJlZnJlc2hLZXlzID8gY29udGV4dC5rZXlHZW5lcmF0b3IoKSA6IHR5cGVvZiBibG9jay5fa2V5ID09IFwic3RyaW5nXCIgPyBibG9jay5fa2V5IDogY29udGV4dC5rZXlHZW5lcmF0b3IoKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uYmxvY2ssXG4gICAgICBfa2V5XG4gICAgfTtcbiAgfVxuICBpZiAoIWlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSlcbiAgICByZXR1cm4ge1xuICAgICAgX3R5cGU6IGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsXG4gICAgICBfa2V5OiBvcHRpb25zLnJlZnJlc2hLZXlzID8gY29udGV4dC5rZXlHZW5lcmF0b3IoKSA6IHR5cGVvZiBibG9jay5fa2V5ID09IFwic3RyaW5nXCIgPyBibG9jay5fa2V5IDogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICBfdHlwZTogY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lLFxuICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICBtYXJrczogW11cbiAgICAgIH1dLFxuICAgICAgbWFya0RlZnM6IFtdLFxuICAgICAgc3R5bGU6IGNvbnRleHQuc2NoZW1hLnN0eWxlc1swXS52YWx1ZVxuICAgIH07XG4gIGNvbnN0IG1hcmtEZWZLZXlNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCBtYXJrRGVmcyA9IChibG9jay5tYXJrRGVmcyA/PyBbXSkuZmxhdE1hcCgobWFya0RlZikgPT4ge1xuICAgIGlmIChjb250ZXh0LnNjaGVtYS5hbm5vdGF0aW9ucy5zb21lKChhbm5vdGF0aW9uKSA9PiBhbm5vdGF0aW9uLm5hbWUgPT09IG1hcmtEZWYuX3R5cGUpKSB7XG4gICAgICBjb25zdCBfa2V5ID0gb3B0aW9ucy5yZWZyZXNoS2V5cyA/IGNvbnRleHQua2V5R2VuZXJhdG9yKCkgOiBtYXJrRGVmLl9rZXk7XG4gICAgICByZXR1cm4gbWFya0RlZktleU1hcC5zZXQobWFya0RlZi5fa2V5LCBfa2V5KSwgW3tcbiAgICAgICAgLi4ubWFya0RlZixcbiAgICAgICAgX2tleVxuICAgICAgfV07XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfSksIGNoaWxkcmVuID0gYmxvY2suY2hpbGRyZW4uZmxhdE1hcCgoY2hpbGQpID0+IHtcbiAgICBpZiAoIWlzVHlwZWRPYmplY3QoY2hpbGQpKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIGlmIChjaGlsZC5fdHlwZSAhPT0gY29udGV4dC5zY2hlbWEuc3Bhbi5uYW1lICYmICFjb250ZXh0LnNjaGVtYS5pbmxpbmVPYmplY3RzLnNvbWUoKGlubGluZU9iamVjdCkgPT4gaW5saW5lT2JqZWN0Lm5hbWUgPT09IGNoaWxkLl90eXBlKSlcbiAgICAgIHJldHVybiBbXTtcbiAgICBpZiAoIWlzUG9ydGFibGVUZXh0U3BhbiQxKGNoaWxkKSlcbiAgICAgIHJldHVybiBbe1xuICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgX2tleTogb3B0aW9ucy5yZWZyZXNoS2V5cyA/IGNvbnRleHQua2V5R2VuZXJhdG9yKCkgOiBjaGlsZC5fa2V5XG4gICAgICB9XTtcbiAgICBjb25zdCBtYXJrcyA9IChjaGlsZC5tYXJrcyA/PyBbXSkuZmxhdE1hcCgobWFyaykgPT4gbWFya0RlZktleU1hcC5oYXMobWFyaykgPyBbbWFya0RlZktleU1hcC5nZXQobWFyayldIDogY29udGV4dC5zY2hlbWEuZGVjb3JhdG9ycy5zb21lKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci52YWx1ZSA9PT0gbWFyaykgPyBbbWFya10gOiBbXSk7XG4gICAgcmV0dXJuIFt7XG4gICAgICAuLi5jaGlsZCxcbiAgICAgIF9rZXk6IG9wdGlvbnMucmVmcmVzaEtleXMgPyBjb250ZXh0LmtleUdlbmVyYXRvcigpIDogY2hpbGQuX2tleSxcbiAgICAgIG1hcmtzXG4gICAgfV07XG4gIH0pLCBwYXJzZWRCbG9jayA9IHtcbiAgICAuLi5ibG9jayxcbiAgICBfa2V5OiBvcHRpb25zLnJlZnJlc2hLZXlzID8gY29udGV4dC5rZXlHZW5lcmF0b3IoKSA6IGJsb2NrLl9rZXksXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLmxlbmd0aCA+IDAgPyBjaGlsZHJlbiA6IFt7XG4gICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgX3R5cGU6IGNvbnRleHQuc2NoZW1hLnNwYW4ubmFtZSxcbiAgICAgIHRleHQ6IFwiXCIsXG4gICAgICBtYXJrczogW11cbiAgICB9XSxcbiAgICBtYXJrRGVmc1xuICB9O1xuICBpZiAoIWNvbnRleHQuc2NoZW1hLnN0eWxlcy5maW5kKChzdHlsZSkgPT4gc3R5bGUudmFsdWUgPT09IGJsb2NrLnN0eWxlKSkge1xuICAgIGNvbnN0IGRlZmF1bHRTdHlsZSA9IGNvbnRleHQuc2NoZW1hLnN0eWxlc1swXS52YWx1ZTtcbiAgICBkZWZhdWx0U3R5bGUgIT09IHZvaWQgMCA/IHBhcnNlZEJsb2NrLnN0eWxlID0gZGVmYXVsdFN0eWxlIDogZGVsZXRlIHBhcnNlZEJsb2NrLnN0eWxlO1xuICB9XG4gIHJldHVybiBjb250ZXh0LnNjaGVtYS5saXN0cy5maW5kKChsaXN0KSA9PiBsaXN0LnZhbHVlID09PSBibG9jay5saXN0SXRlbSkgfHwgKGRlbGV0ZSBwYXJzZWRCbG9jay5saXN0SXRlbSwgZGVsZXRlIHBhcnNlZEJsb2NrLmxldmVsKSwgcGFyc2VkQmxvY2s7XG59XG5jb25zdCBjb252ZXJ0ZXJQb3J0YWJsZVRleHQgPSB7XG4gIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLFxuICBzZXJpYWxpemU6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgaWYgKCFjb250ZXh0LnNlbGVjdGlvbilcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLFxuICAgICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnQsXG4gICAgICAgIHJlYXNvbjogXCJObyBzZWxlY3Rpb25cIlxuICAgICAgfTtcbiAgICBjb25zdCBibG9ja3MgPSBzbGljZUJsb2Nrcyh7XG4gICAgICBibG9ja3M6IGNvbnRleHQudmFsdWUsXG4gICAgICBzZWxlY3Rpb246IGNvbnRleHQuc2VsZWN0aW9uXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwic2VyaWFsaXphdGlvbi5zdWNjZXNzXCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShibG9ja3MpLFxuICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIsXG4gICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnRcbiAgICB9O1xuICB9LFxuICBkZXNlcmlhbGl6ZTogKHtcbiAgICBjb250ZXh0LFxuICAgIGV2ZW50XG4gIH0pID0+IHtcbiAgICBjb25zdCBibG9ja3MgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShibG9ja3MpKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJkZXNlcmlhbGl6YXRpb24uZmFpbHVyZVwiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi94LXBvcnRhYmxlLXRleHRcIixcbiAgICAgICAgcmVhc29uOiBcIkRhdGEgaXMgbm90IGFuIGFycmF5XCJcbiAgICAgIH07XG4gICAgY29uc3QgcGFyc2VkQmxvY2tzID0gYmxvY2tzLmZsYXRNYXAoKGJsb2NrKSA9PiB7XG4gICAgICBjb25zdCBwYXJzZWRCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBibG9jayxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHJlZnJlc2hLZXlzOiAhMFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJzZWRCbG9jayA/IFtwYXJzZWRCbG9ja10gOiBbXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGFyc2VkQmxvY2tzLmxlbmd0aCA9PT0gMCAmJiBibG9ja3MubGVuZ3RoID4gMCA/IHtcbiAgICAgIHR5cGU6IFwiZGVzZXJpYWxpemF0aW9uLmZhaWx1cmVcIixcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLFxuICAgICAgcmVhc29uOiBcIk5vIGJsb2NrcyB3ZXJlIHBhcnNlZFwiXG4gICAgfSA6IHtcbiAgICAgIHR5cGU6IFwiZGVzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIixcbiAgICAgIGRhdGE6IHBhcnNlZEJsb2NrcyxcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiXG4gICAgfTtcbiAgfVxufSwgY29udmVydGVyVGV4dEh0bWwgPSB7XG4gIG1pbWVUeXBlOiBcInRleHQvaHRtbFwiLFxuICBzZXJpYWxpemU6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgaWYgKCFjb250ZXh0LnNlbGVjdGlvbilcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcInRleHQvaHRtbFwiLFxuICAgICAgICBvcmlnaW5FdmVudDogZXZlbnQub3JpZ2luRXZlbnQsXG4gICAgICAgIHJlYXNvbjogXCJObyBzZWxlY3Rpb25cIlxuICAgICAgfTtcbiAgICBjb25zdCBibG9ja3MgPSBzbGljZUJsb2Nrcyh7XG4gICAgICBibG9ja3M6IGNvbnRleHQudmFsdWUsXG4gICAgICBzZWxlY3Rpb246IGNvbnRleHQuc2VsZWN0aW9uXG4gICAgfSksIGh0bWwgPSB0b0hUTUwoYmxvY2tzLCB7XG4gICAgICBvbk1pc3NpbmdDb21wb25lbnQ6ICExLFxuICAgICAgY29tcG9uZW50czoge1xuICAgICAgICB1bmtub3duVHlwZTogKHtcbiAgICAgICAgICBjaGlsZHJlblxuICAgICAgICB9KSA9PiBjaGlsZHJlbiAhPT0gdm9pZCAwID8gYCR7Y2hpbGRyZW59YCA6IFwiXCJcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaHRtbCA9PT0gXCJcIiA/IHtcbiAgICAgIHR5cGU6IFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgICBtaW1lVHlwZTogXCJ0ZXh0L2h0bWxcIixcbiAgICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudCxcbiAgICAgIHJlYXNvbjogXCJTZXJpYWxpemVkIEhUTUwgaXMgZW1wdHlcIlxuICAgIH0gOiB7XG4gICAgICB0eXBlOiBcInNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiLFxuICAgICAgZGF0YTogaHRtbCxcbiAgICAgIG1pbWVUeXBlOiBcInRleHQvaHRtbFwiLFxuICAgICAgb3JpZ2luRXZlbnQ6IGV2ZW50Lm9yaWdpbkV2ZW50XG4gICAgfTtcbiAgfSxcbiAgZGVzZXJpYWxpemU6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiAoe1xuICAgIHR5cGU6IFwiZGVzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIixcbiAgICBkYXRhOiBodG1sVG9CbG9ja3MoZXZlbnQuZGF0YSwgY29udGV4dC5zY2hlbWEucG9ydGFibGVUZXh0LCB7XG4gICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgdW5zdGFibGVfd2hpdGVzcGFjZU9uUGFzdGVNb2RlOiBjb250ZXh0LnNjaGVtYS5ibG9jay5vcHRpb25zLnVuc3RhYmxlX3doaXRlc3BhY2VPblBhc3RlTW9kZVxuICAgIH0pLFxuICAgIG1pbWVUeXBlOiBcInRleHQvaHRtbFwiXG4gIH0pXG59LCBjb252ZXJ0ZXJUZXh0UGxhaW4gPSB7XG4gIG1pbWVUeXBlOiBcInRleHQvcGxhaW5cIixcbiAgc2VyaWFsaXplOiAoe1xuICAgIGNvbnRleHQsXG4gICAgZXZlbnRcbiAgfSkgPT4gY29udGV4dC5zZWxlY3Rpb24gPyB7XG4gICAgdHlwZTogXCJzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIixcbiAgICBkYXRhOiBzbGljZUJsb2Nrcyh7XG4gICAgICBibG9ja3M6IGNvbnRleHQudmFsdWUsXG4gICAgICBzZWxlY3Rpb246IGNvbnRleHQuc2VsZWN0aW9uXG4gICAgfSkubWFwKChibG9jaykgPT4gaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soYmxvY2spID8gYmxvY2suY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gY2hpbGQuX3R5cGUgPT09IGNvbnRleHQuc2NoZW1hLnNwYW4ubmFtZSA/IGNoaWxkLnRleHQgOiBgWyR7Y29udGV4dC5zY2hlbWEuaW5saW5lT2JqZWN0cy5maW5kKChpbmxpbmVPYmplY3RUeXBlKSA9PiBpbmxpbmVPYmplY3RUeXBlLm5hbWUgPT09IGNoaWxkLl90eXBlKT8udGl0bGUgPz8gXCJPYmplY3RcIn1dYCkuam9pbihcIlwiKSA6IGBbJHtjb250ZXh0LnNjaGVtYS5ibG9ja09iamVjdHMuZmluZCgoYmxvY2tPYmplY3RUeXBlKSA9PiBibG9ja09iamVjdFR5cGUubmFtZSA9PT0gYmxvY2suX3R5cGUpPy50aXRsZSA/PyBcIk9iamVjdFwifV1gKS5qb2luKGBcblxuYCksXG4gICAgbWltZVR5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudFxuICB9IDoge1xuICAgIHR5cGU6IFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCIsXG4gICAgbWltZVR5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgIG9yaWdpbkV2ZW50OiBldmVudC5vcmlnaW5FdmVudCxcbiAgICByZWFzb246IFwiTm8gc2VsZWN0aW9uXCJcbiAgfSxcbiAgZGVzZXJpYWxpemU6ICh7XG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KSA9PiB7XG4gICAgY29uc3QgdGV4dFRvSHRtbCA9IGA8aHRtbD48Ym9keT4ke2VzY2FwZUh0bWwoZXZlbnQuZGF0YSkuc3BsaXQoL1xcbnsyLH0vKS5tYXAoKGxpbmUpID0+IGxpbmUgPyBgPHA+JHtsaW5lLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCBcIjxici8+XCIpfTwvcD5gIDogXCI8cD48L3A+XCIpLmpvaW4oXCJcIil9PC9ib2R5PjwvaHRtbD5gO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImRlc2VyaWFsaXphdGlvbi5zdWNjZXNzXCIsXG4gICAgICBkYXRhOiBodG1sVG9CbG9ja3ModGV4dFRvSHRtbCwgY29udGV4dC5zY2hlbWEucG9ydGFibGVUZXh0LCB7XG4gICAgICAgIGtleUdlbmVyYXRvcjogY29udGV4dC5rZXlHZW5lcmF0b3JcbiAgICAgIH0pLFxuICAgICAgbWltZVR5cGU6IFwidGV4dC9wbGFpblwiXG4gICAgfTtcbiAgfVxufSwgZW50aXR5TWFwID0ge1xuICBcIiZcIjogXCImYW1wO1wiLFxuICBcIjxcIjogXCImbHQ7XCIsXG4gIFwiPlwiOiBcIiZndDtcIixcbiAgJ1wiJzogXCImcXVvdDtcIixcbiAgXCInXCI6IFwiJiMzOTtcIixcbiAgXCIvXCI6IFwiJiN4MkY7XCIsXG4gIFwiYFwiOiBcIiYjeDYwO1wiLFxuICBcIj1cIjogXCImI3gzRDtcIlxufTtcbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKC9bJjw+XCInYD0vXS9nLCAocykgPT4gZW50aXR5TWFwW3NdKTtcbn1cbmNvbnN0IGNvcmVDb252ZXJ0ZXJzID0gW2NvbnZlcnRlckpzb24sIGNvbnZlcnRlclBvcnRhYmxlVGV4dCwgY29udmVydGVyVGV4dEh0bWwsIGNvbnZlcnRlclRleHRQbGFpbl0sIGRlYnVnJGIgPSBkZWJ1Z1dpdGhOYW1lKFwib3BlcmF0aW9uVG9QYXRjaGVzXCIpO1xuZnVuY3Rpb24gY3JlYXRlT3BlcmF0aW9uVG9QYXRjaGVzKHR5cGVzKSB7XG4gIGNvbnN0IHRleHRCbG9ja05hbWUgPSB0eXBlcy5ibG9jay5uYW1lO1xuICBmdW5jdGlvbiBpbnNlcnRUZXh0UGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgZGVidWckYi5lbmFibGVkICYmIGRlYnVnJGIoXCJPcGVyYXRpb25cIiwgSlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLCBudWxsLCAyKSk7XG4gICAgY29uc3QgYmxvY2sgPSBlZGl0b3IuaXNUZXh0QmxvY2soZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXSkgJiYgZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICBpZiAoIWJsb2NrKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYmxvY2tcIik7XG4gICAgY29uc3QgdGV4dENoaWxkID0gZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBlZGl0b3IuaXNUZXh0U3BhbihibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0pICYmIGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgICBpZiAoIXRleHRDaGlsZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGNoaWxkXCIpO1xuICAgIGNvbnN0IHBhdGggPSBbe1xuICAgICAgX2tleTogYmxvY2suX2tleVxuICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgX2tleTogdGV4dENoaWxkLl9rZXlcbiAgICB9LCBcInRleHRcIl0sIHByZXZCbG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdXSwgcHJldkNoaWxkID0gZWRpdG9yLmlzVGV4dEJsb2NrKHByZXZCbG9jaykgJiYgcHJldkJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSwgcHJldlRleHQgPSBlZGl0b3IuaXNUZXh0U3BhbihwcmV2Q2hpbGQpID8gcHJldkNoaWxkLnRleHQgOiBcIlwiLCBwYXRjaCA9IGRpZmZNYXRjaFBhdGNoJDEocHJldlRleHQsIHRleHRDaGlsZC50ZXh0LCBwYXRoKTtcbiAgICByZXR1cm4gcGF0Y2gudmFsdWUubGVuZ3RoID8gW3BhdGNoXSA6IFtdO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZVRleHRQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgYmVmb3JlVmFsdWUpIHtcbiAgICBjb25zdCBibG9jayA9IGVkaXRvciAmJiBlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgIGlmICghYmxvY2spXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBibG9ja1wiKTtcbiAgICBjb25zdCBjaGlsZCA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dIHx8IHZvaWQgMCwgdGV4dENoaWxkID0gZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpID8gY2hpbGQgOiB2b2lkIDA7XG4gICAgaWYgKGNoaWxkICYmICF0ZXh0Q2hpbGQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBzcGFuXCIpO1xuICAgIGlmICghdGV4dENoaWxkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgY2hpbGRcIik7XG4gICAgY29uc3QgcGF0aCA9IFt7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICBfa2V5OiB0ZXh0Q2hpbGQuX2tleVxuICAgIH0sIFwidGV4dFwiXSwgYmVmb3JlQmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIHByZXZUZXh0Q2hpbGQgPSBlZGl0b3IuaXNUZXh0QmxvY2soYmVmb3JlQmxvY2spICYmIGJlZm9yZUJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSwgcHJldlRleHQgPSBlZGl0b3IuaXNUZXh0U3BhbihwcmV2VGV4dENoaWxkKSAmJiBwcmV2VGV4dENoaWxkLnRleHQsIHBhdGNoID0gZGlmZk1hdGNoUGF0Y2gkMShwcmV2VGV4dCB8fCBcIlwiLCB0ZXh0Q2hpbGQudGV4dCwgcGF0aCk7XG4gICAgcmV0dXJuIHBhdGNoLnZhbHVlID8gW3BhdGNoXSA6IFtdO1xuICB9XG4gIGZ1bmN0aW9uIHNldE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbikge1xuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICAgIGlmICh0eXBlb2YgYmxvY2suX2tleSAhPSBcInN0cmluZ1wiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBibG9jayB0byBoYXZlIGEgX2tleVwiKTtcbiAgICAgIGNvbnN0IHNldE5vZGUgPSBvbWl0Qnkoe1xuICAgICAgICAuLi5lZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dLFxuICAgICAgICAuLi5vcGVyYXRpb24ubmV3UHJvcGVydGllc1xuICAgICAgfSwgaXNVbmRlZmluZWQpO1xuICAgICAgcmV0dXJuIFtzZXQoZnJvbVNsYXRlVmFsdWUoW3NldE5vZGVdLCB0ZXh0QmxvY2tOYW1lKVswXSwgW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV0pXTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgYmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhibG9jaykpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV07XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGNvbnN0IGJsb2NrS2V5ID0gYmxvY2suX2tleSwgY2hpbGRLZXkgPSBjaGlsZC5fa2V5LCBwYXRjaGVzID0gW10sIGtleXMgPSBPYmplY3Qua2V5cyhvcGVyYXRpb24ubmV3UHJvcGVydGllcyk7XG4gICAgICAgICAgcmV0dXJuIGtleXMuZm9yRWFjaCgoa2V5TmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmIGtleU5hbWUgPT09IFwiX2tleVwiKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGdldChvcGVyYXRpb24ubmV3UHJvcGVydGllcywga2V5TmFtZSk7XG4gICAgICAgICAgICAgIHBhdGNoZXMucHVzaChzZXQodmFsLCBbe1xuICAgICAgICAgICAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwgYmxvY2suY2hpbGRyZW4uaW5kZXhPZihjaGlsZCksIGtleU5hbWVdKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCB2YWwgPSBnZXQob3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMsIGtleU5hbWUpO1xuICAgICAgICAgICAgICBwYXRjaGVzLnB1c2goc2V0KHZhbCwgW3tcbiAgICAgICAgICAgICAgICBfa2V5OiBibG9ja0tleVxuICAgICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgICAgICBfa2V5OiBjaGlsZEtleVxuICAgICAgICAgICAgICB9LCBrZXlOYW1lXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLCBwYXRjaGVzO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgdmFsaWQgY2hpbGRcIik7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBhIHZhbGlkIGJsb2NrXCIpO1xuICAgIH0gZWxzZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHBhdGggZW5jb3VudGVyZWQ6ICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLnBhdGgpfWApO1xuICB9XG4gIGZ1bmN0aW9uIGluc2VydE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgYmVmb3JlVmFsdWUpIHtcbiAgICBjb25zdCBibG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdXSwgaXNUZXh0QmxvY2sgPSBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spO1xuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gb3BlcmF0aW9uLnBhdGhbMF0gPT09IDAgPyBcImJlZm9yZVwiIDogXCJhZnRlclwiLCBiZWZvcmVCbG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdIC0gMV0sIHRhcmdldEtleSA9IG9wZXJhdGlvbi5wYXRoWzBdID09PSAwID8gYmxvY2s/Ll9rZXkgOiBiZWZvcmVCbG9jaz8uX2tleTtcbiAgICAgIHJldHVybiB0YXJnZXRLZXkgPyBbaW5zZXJ0KFtmcm9tU2xhdGVWYWx1ZShbb3BlcmF0aW9uLm5vZGVdLCB0ZXh0QmxvY2tOYW1lKVswXV0sIHBvc2l0aW9uLCBbe1xuICAgICAgICBfa2V5OiB0YXJnZXRLZXlcbiAgICAgIH1dKV0gOiBbc2V0SWZNaXNzaW5nKGJlZm9yZVZhbHVlLCBbXSksIGluc2VydChbZnJvbVNsYXRlVmFsdWUoW29wZXJhdGlvbi5ub2RlXSwgdGV4dEJsb2NrTmFtZSlbMF1dLCBcImJlZm9yZVwiLCBbb3BlcmF0aW9uLnBhdGhbMF1dKV07XG4gICAgfSBlbHNlIGlmIChpc1RleHRCbG9jayAmJiBvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIgJiYgZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXSkge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBibG9jay5jaGlsZHJlbi5sZW5ndGggPT09IDAgfHwgIWJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdIC0gMV0gPyBcImJlZm9yZVwiIDogXCJhZnRlclwiLCBub2RlID0ge1xuICAgICAgICAuLi5vcGVyYXRpb24ubm9kZVxuICAgICAgfTtcbiAgICAgICFub2RlLl90eXBlICYmIFRleHQuaXNUZXh0KG5vZGUpICYmIChub2RlLl90eXBlID0gXCJzcGFuXCIsIG5vZGUubWFya3MgPSBbXSk7XG4gICAgICBjb25zdCBjaGlsZCA9IGZyb21TbGF0ZVZhbHVlKFt7XG4gICAgICAgIF9rZXk6IFwiYm9ndXNcIixcbiAgICAgICAgX3R5cGU6IHRleHRCbG9ja05hbWUsXG4gICAgICAgIGNoaWxkcmVuOiBbbm9kZV1cbiAgICAgIH1dLCB0ZXh0QmxvY2tOYW1lKVswXS5jaGlsZHJlblswXTtcbiAgICAgIHJldHVybiBbaW5zZXJ0KFtjaGlsZF0sIHBvc2l0aW9uLCBbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA8PSAxIHx8ICFibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdID8gMCA6IHtcbiAgICAgICAgX2tleTogYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV0gLSAxXS5fa2V5XG4gICAgICB9XSldO1xuICAgIH1cbiAgICByZXR1cm4gZGVidWckYihcIlNvbWV0aGluZyB3YXMgaW5zZXJ0ZWQgaW50byBhIHZvaWQgYmxvY2suIE5vdCBwcm9kdWNpbmcgZWRpdG9yIHBhdGNoZXMuXCIpLCBbXTtcbiAgfVxuICBmdW5jdGlvbiBzcGxpdE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgYmVmb3JlVmFsdWUpIHtcbiAgICBjb25zdCBwYXRjaGVzID0gW10sIHNwbGl0QmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgIGlmICghZWRpdG9yLmlzVGV4dEJsb2NrKHNwbGl0QmxvY2spKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCbG9jayB3aXRoIHBhdGggJHtKU09OLnN0cmluZ2lmeShvcGVyYXRpb24ucGF0aFswXSl9IGlzIG5vdCBhIHRleHQgYmxvY2sgYW5kIGNhbid0IGJlIHNwbGl0YCk7XG4gICAgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3Qgb2xkQmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV07XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG9sZEJsb2NrKSkge1xuICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9IGZyb21TbGF0ZVZhbHVlKFtlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF0gKyAxXV0sIHRleHRCbG9ja05hbWUpWzBdO1xuICAgICAgICB0YXJnZXRWYWx1ZSAmJiAocGF0Y2hlcy5wdXNoKGluc2VydChbdGFyZ2V0VmFsdWVdLCBcImFmdGVyXCIsIFt7XG4gICAgICAgICAgX2tleTogc3BsaXRCbG9jay5fa2V5XG4gICAgICAgIH1dKSksIG9sZEJsb2NrLmNoaWxkcmVuLnNsaWNlKG9wZXJhdGlvbi5wb3NpdGlvbikuZm9yRWFjaCgoc3BhbikgPT4ge1xuICAgICAgICAgIGNvbnN0IHBhdGggPSBbe1xuICAgICAgICAgICAgX2tleTogb2xkQmxvY2suX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgX2tleTogc3Bhbi5fa2V5XG4gICAgICAgICAgfV07XG4gICAgICAgICAgcGF0Y2hlcy5wdXNoKHVuc2V0KHBhdGgpKTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGNoZXM7XG4gICAgfVxuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNvbnN0IHNwbGl0U3BhbiA9IHNwbGl0QmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dO1xuICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKHNwbGl0U3BhbikpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0U3BhbnMgPSBmcm9tU2xhdGVWYWx1ZShbe1xuICAgICAgICAgIC4uLnNwbGl0QmxvY2ssXG4gICAgICAgICAgY2hpbGRyZW46IHNwbGl0QmxvY2suY2hpbGRyZW4uc2xpY2Uob3BlcmF0aW9uLnBhdGhbMV0gKyAxLCBvcGVyYXRpb24ucGF0aFsxXSArIDIpXG4gICAgICAgIH1dLCB0ZXh0QmxvY2tOYW1lKVswXS5jaGlsZHJlbjtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKGluc2VydCh0YXJnZXRTcGFucywgXCJhZnRlclwiLCBbe1xuICAgICAgICAgIF9rZXk6IHNwbGl0QmxvY2suX2tleVxuICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICBfa2V5OiBzcGxpdFNwYW4uX2tleVxuICAgICAgICB9XSkpLCBwYXRjaGVzLnB1c2goc2V0KHNwbGl0U3Bhbi50ZXh0LCBbe1xuICAgICAgICAgIF9rZXk6IHNwbGl0QmxvY2suX2tleVxuICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICBfa2V5OiBzcGxpdFNwYW4uX2tleVxuICAgICAgICB9LCBcInRleHRcIl0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRjaGVzO1xuICAgIH1cbiAgICByZXR1cm4gcGF0Y2hlcztcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgYmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV07XG4gICAgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKGJsb2NrICYmIGJsb2NrLl9rZXkpXG4gICAgICAgIHJldHVybiBbdW5zZXQoW3tcbiAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgIH1dKV07XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCbG9jayBub3QgZm91bmRcIik7XG4gICAgfSBlbHNlIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3Qgc3BhblRvUmVtb3ZlID0gYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dO1xuICAgICAgcmV0dXJuIHNwYW5Ub1JlbW92ZSA/IGJsb2NrLmNoaWxkcmVuLmZpbHRlcigoc3BhbikgPT4gc3Bhbi5fa2V5ID09PSBvcGVyYXRpb24ubm9kZS5fa2V5KS5sZW5ndGggPiAxID8gKGNvbnNvbGUud2FybihgTXVsdGlwbGUgc3BhbnMgaGF2ZSBcXGBfa2V5XFxgICR7b3BlcmF0aW9uLm5vZGUuX2tleX0uIEl0J3MgYW1iaWd1b3VzIHdoaWNoIG9uZSB0byByZW1vdmUuYCwgSlNPTi5zdHJpbmdpZnkoYmxvY2ssIG51bGwsIDIpKSwgW10pIDogW3Vuc2V0KFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiBzcGFuVG9SZW1vdmUuX2tleVxuICAgICAgfV0pXSA6IChkZWJ1ZyRiKFwiU3BhbiBub3QgZm91bmQgaW4gZWRpdG9yIHRyeWluZyB0byByZW1vdmUgbm9kZVwiKSwgW10pO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIGRlYnVnJGIoXCJOb3QgY3JlYXRpbmcgcGF0Y2ggaW5zaWRlIG9iamVjdCBibG9ja1wiKSwgW107XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgcGF0Y2hlcyA9IFtdLCBibG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdXSwgdXBkYXRlZEJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxKVxuICAgICAgaWYgKGJsb2NrPy5fa2V5KSB7XG4gICAgICAgIGNvbnN0IG5ld0Jsb2NrID0gZnJvbVNsYXRlVmFsdWUoW2VkaXRvci5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXSAtIDFdXSwgdGV4dEJsb2NrTmFtZSlbMF07XG4gICAgICAgIHBhdGNoZXMucHVzaChzZXQobmV3QmxvY2ssIFt7XG4gICAgICAgICAgX2tleTogbmV3QmxvY2suX2tleVxuICAgICAgICB9XSkpLCBwYXRjaGVzLnB1c2godW5zZXQoW3tcbiAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgIH1dKSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGFyZ2V0IGtleSBub3QgZm91bmQhXCIpO1xuICAgIGVsc2UgaWYgKGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKHVwZGF0ZWRCbG9jaykgJiYgb3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAyKSB7XG4gICAgICBjb25zdCB1cGRhdGVkU3BhbiA9IHVwZGF0ZWRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdICYmIGVkaXRvci5pc1RleHRTcGFuKHVwZGF0ZWRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdKSA/IHVwZGF0ZWRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdIDogdm9pZCAwLCByZW1vdmVkU3BhbiA9IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSAmJiBlZGl0b3IuaXNUZXh0U3BhbihibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0pID8gYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dIDogdm9pZCAwO1xuICAgICAgdXBkYXRlZFNwYW4gJiYgKGJsb2NrLmNoaWxkcmVuLmZpbHRlcigoc3BhbikgPT4gc3Bhbi5fa2V5ID09PSB1cGRhdGVkU3Bhbi5fa2V5KS5sZW5ndGggPT09IDEgPyBwYXRjaGVzLnB1c2goc2V0KHVwZGF0ZWRTcGFuLnRleHQsIFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiB1cGRhdGVkU3Bhbi5fa2V5XG4gICAgICB9LCBcInRleHRcIl0pKSA6IGNvbnNvbGUud2FybihgTXVsdGlwbGUgc3BhbnMgaGF2ZSBcXGBfa2V5XFxgICR7dXBkYXRlZFNwYW4uX2tleX0uIEl0J3MgYW1iaWd1b3VzIHdoaWNoIG9uZSB0byB1cGRhdGUuYCwgSlNPTi5zdHJpbmdpZnkoYmxvY2ssIG51bGwsIDIpKSksIHJlbW92ZWRTcGFuICYmIChibG9jay5jaGlsZHJlbi5maWx0ZXIoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0gcmVtb3ZlZFNwYW4uX2tleSkubGVuZ3RoID09PSAxID8gcGF0Y2hlcy5wdXNoKHVuc2V0KFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiByZW1vdmVkU3Bhbi5fa2V5XG4gICAgICB9XSkpIDogY29uc29sZS53YXJuKGBNdWx0aXBsZSBzcGFucyBoYXZlIFxcYF9rZXlcXGAgJHtyZW1vdmVkU3Bhbi5fa2V5fS4gSXQncyBhbWJpZ3VvdXMgd2hpY2ggb25lIHRvIHJlbW92ZS5gLCBKU09OLnN0cmluZ2lmeShibG9jaywgbnVsbCwgMikpKTtcbiAgICB9IGVsc2VcbiAgICAgIGRlYnVnJGIoXCJWb2lkIG5vZGVzIGNhbid0IGJlIG1lcmdlZCwgbm90IGNyZWF0aW5nIGFueSBwYXRjaGVzXCIpO1xuICAgIHJldHVybiBwYXRjaGVzO1xuICB9XG4gIGZ1bmN0aW9uIG1vdmVOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgcGF0Y2hlcyA9IFtdLCBibG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdXSwgdGFyZ2V0QmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ubmV3UGF0aFswXV07XG4gICAgaWYgKCF0YXJnZXRCbG9jaylcbiAgICAgIHJldHVybiBwYXRjaGVzO1xuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gb3BlcmF0aW9uLnBhdGhbMF0gPiBvcGVyYXRpb24ubmV3UGF0aFswXSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCI7XG4gICAgICBwYXRjaGVzLnB1c2godW5zZXQoW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV0pKSwgcGF0Y2hlcy5wdXNoKGluc2VydChbZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgdGV4dEJsb2NrTmFtZSlbMF1dLCBwb3NpdGlvbiwgW3tcbiAgICAgICAgX2tleTogdGFyZ2V0QmxvY2suX2tleVxuICAgICAgfV0pKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMiAmJiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIGVkaXRvci5pc1RleHRCbG9jayh0YXJnZXRCbG9jaykpIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dLCB0YXJnZXRDaGlsZCA9IHRhcmdldEJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5uZXdQYXRoWzFdXSwgcG9zaXRpb24gPSBvcGVyYXRpb24ubmV3UGF0aFsxXSA9PT0gdGFyZ2V0QmxvY2suY2hpbGRyZW4ubGVuZ3RoID8gXCJhZnRlclwiIDogXCJiZWZvcmVcIiwgY2hpbGRUb0luc2VydCA9IGZyb21TbGF0ZVZhbHVlKFtibG9ja10sIHRleHRCbG9ja05hbWUpWzBdLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgICAgIHBhdGNoZXMucHVzaCh1bnNldChbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgfV0pKSwgcGF0Y2hlcy5wdXNoKGluc2VydChbY2hpbGRUb0luc2VydF0sIHBvc2l0aW9uLCBbe1xuICAgICAgICBfa2V5OiB0YXJnZXRCbG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogdGFyZ2V0Q2hpbGQuX2tleVxuICAgICAgfV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGNoZXM7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpbnNlcnROb2RlUGF0Y2gsXG4gICAgaW5zZXJ0VGV4dFBhdGNoLFxuICAgIG1lcmdlTm9kZVBhdGNoLFxuICAgIG1vdmVOb2RlUGF0Y2gsXG4gICAgcmVtb3ZlTm9kZVBhdGNoLFxuICAgIHJlbW92ZVRleHRQYXRjaCxcbiAgICBzZXROb2RlUGF0Y2gsXG4gICAgc3BsaXROb2RlUGF0Y2hcbiAgfTtcbn1cbmNvbnN0IElTX0FQUExZSU5HX0JFSEFWSU9SX0FDVElPTlMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHdpdGhBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcik7XG4gIElTX0FQUExZSU5HX0JFSEFWSU9SX0FDVElPTlMuc2V0KGVkaXRvciwgITApLCBmbigpLCBJU19BUFBMWUlOR19CRUhBVklPUl9BQ1RJT05TLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpIHtcbiAgcmV0dXJuIElTX0FQUExZSU5HX0JFSEFWSU9SX0FDVElPTlMuZ2V0KGVkaXRvcikgPz8gITE7XG59XG5mdW5jdGlvbiBjcmVhdGVXaXRoRXZlbnRMaXN0ZW5lcnMoZWRpdG9yQWN0b3IsIHN1YnNjcmlwdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQubWF4QmxvY2tzICE9PSB2b2lkIDApXG4gICAgICByZXR1cm4gZWRpdG9yO1xuICAgIHN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiB7XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBlZGl0b3JBY3Rvci5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICAgIC8vIFRoZXNlIGV2ZW50cyBhcmUgbm90IHJlbGV2YW50IGZvciBCZWhhdmlvcnNcbiAgICAgICAgICBjYXNlIFwiYmx1cnJlZFwiOlxuICAgICAgICAgIGNhc2UgXCJkb25lIGxvYWRpbmdcIjpcbiAgICAgICAgICBjYXNlIFwiZWRpdGFibGVcIjpcbiAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICBjYXNlIFwiZm9jdXNlZFwiOlxuICAgICAgICAgIGNhc2UgXCJpbnZhbGlkIHZhbHVlXCI6XG4gICAgICAgICAgY2FzZSBcImxvYWRpbmdcIjpcbiAgICAgICAgICBjYXNlIFwibXV0YXRpb25cIjpcbiAgICAgICAgICBjYXNlIFwicGF0Y2hcIjpcbiAgICAgICAgICBjYXNlIFwicGF0Y2hlc1wiOlxuICAgICAgICAgIGNhc2UgXCJyZWFkIG9ubHlcIjpcbiAgICAgICAgICBjYXNlIFwicmVhZHlcIjpcbiAgICAgICAgICBjYXNlIFwic2VsZWN0aW9uXCI6XG4gICAgICAgICAgY2FzZSBcInZhbHVlIGNoYW5nZWRcIjpcbiAgICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjdXN0b20uKlwiOlxuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiY3VzdG9tIGJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IGV2ZW50LmV2ZW50LFxuICAgICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbGV0ZUJhY2t3YXJkOiBkZWxldGVCYWNrd2FyZDIsXG4gICAgICBkZWxldGVGb3J3YXJkOiBkZWxldGVGb3J3YXJkMixcbiAgICAgIGluc2VydEJyZWFrLFxuICAgICAgaW5zZXJ0RGF0YSxcbiAgICAgIGluc2VydFNvZnRCcmVhayxcbiAgICAgIGluc2VydFRleHQ6IGluc2VydFRleHQyLFxuICAgICAgc2VsZWN0LFxuICAgICAgc2V0RnJhZ21lbnREYXRhXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmRlbGV0ZUJhY2t3YXJkID0gKHVuaXQpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcikpIHtcbiAgICAgICAgZGVsZXRlQmFja3dhcmQyKHVuaXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJkZWxldGUuYmFja3dhcmRcIixcbiAgICAgICAgICB1bml0XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yLmRlbGV0ZUZvcndhcmQgPSAodW5pdCkgPT4ge1xuICAgICAgaWYgKGlzQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZWRpdG9yKSkge1xuICAgICAgICBkZWxldGVGb3J3YXJkMih1bml0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZGVsZXRlLmZvcndhcmRcIixcbiAgICAgICAgICB1bml0XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yLmluc2VydEJyZWFrID0gKCkgPT4ge1xuICAgICAgaWYgKGlzQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZWRpdG9yKSkge1xuICAgICAgICBpbnNlcnRCcmVhaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJpbnNlcnQuYnJlYWtcIlxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvci5pbnNlcnREYXRhID0gKGRhdGFUcmFuc2ZlcikgPT4ge1xuICAgICAgaWYgKGlzQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZWRpdG9yKSkge1xuICAgICAgICBpbnNlcnREYXRhKGRhdGFUcmFuc2Zlcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImRlc2VyaWFsaXplXCIsXG4gICAgICAgICAgZGF0YVRyYW5zZmVyXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yLmluc2VydFNvZnRCcmVhayA9ICgpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcikpIHtcbiAgICAgICAgaW5zZXJ0U29mdEJyZWFrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImluc2VydC5zb2Z0IGJyZWFrXCJcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0VGV4dCA9ICh0ZXh0LCBvcHRpb25zKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGluc2VydFRleHQyKHRleHQsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJpbnNlcnQudGV4dFwiLFxuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICB9LFxuICAgICAgICBlZGl0b3IsXG4gICAgICAgIGRlZmF1bHRBY3Rpb25DYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgIGluc2VydFRleHQyKHRleHQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3Iuc2VsZWN0ID0gKGxvY2F0aW9uKSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIHNlbGVjdChsb2NhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJhbmdlID0gRWRpdG9yLnJhbmdlKGVkaXRvciwgbG9jYXRpb24pO1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwic2VsZWN0XCIsXG4gICAgICAgICAgc2VsZWN0aW9uOiB0b1BvcnRhYmxlVGV4dFJhbmdlKGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIHJhbmdlLCBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hKVxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3IsXG4gICAgICAgIGRlZmF1bHRBY3Rpb25DYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgIHNlbGVjdChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvci5zZXRGcmFnbWVudERhdGEgPSAoZGF0YVRyYW5zZmVyLCBvcmlnaW5FdmVudCkgPT4ge1xuICAgICAgaWYgKG9yaWdpbkV2ZW50ID09PSBcImRyYWdcIikge1xuICAgICAgICBzZXRGcmFnbWVudERhdGEoZGF0YVRyYW5zZmVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZWRpdG9yKSkge1xuICAgICAgICBzZXRGcmFnbWVudERhdGEoZGF0YVRyYW5zZmVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGF0YVRyYW5zZmVyLmNsZWFyRGF0YSgpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJzZXJpYWxpemVcIixcbiAgICAgICAgICBkYXRhVHJhbnNmZXIsXG4gICAgICAgICAgb3JpZ2luRXZlbnQ6IG9yaWdpbkV2ZW50ID8/IFwidW5rbm93blwiXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlV2l0aE1heEJsb2NrcyhlZGl0b3JBY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MlxuICAgIH0gPSBlZGl0b3I7XG4gICAgcmV0dXJuIGVkaXRvci5hcHBseSA9IChvcGVyYXRpb24pID0+IHtcbiAgICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gICAgICB9KSkge1xuICAgICAgICBhcHBseTIob3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRvaW5nKGVkaXRvcikgfHwgaXNSZWRvaW5nKGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJvd3MgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQubWF4QmxvY2tzID8/IC0xO1xuICAgICAgcm93cyA+IDAgJiYgZWRpdG9yLmNoaWxkcmVuLmxlbmd0aCA+PSByb3dzICYmIChvcGVyYXRpb24udHlwZSA9PT0gXCJpbnNlcnRfbm9kZVwiIHx8IG9wZXJhdGlvbi50eXBlID09PSBcInNwbGl0X25vZGVcIikgJiYgb3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxIHx8IGFwcGx5MihvcGVyYXRpb24pO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdpdGhPYmplY3RLZXlzKGVkaXRvckFjdG9yLCBzY2hlbWFUeXBlcykge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MixcbiAgICAgIG5vcm1hbGl6ZU5vZGVcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3IuYXBwbHkgPSAob3BlcmF0aW9uKSA9PiB7XG4gICAgICBpZiAoaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZG9pbmcoZWRpdG9yKSB8fCBpc1JlZG9pbmcoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdGlvbi50eXBlID09PSBcInNwbGl0X25vZGVcIikge1xuICAgICAgICBjb25zdCBleGlzdGluZ0tleXMgPSBbLi4uTm9kZS5kZXNjZW5kYW50cyhlZGl0b3IpXS5tYXAoKFtub2RlXSkgPT4gbm9kZS5fa2V5KTtcbiAgICAgICAgYXBwbHkyKHtcbiAgICAgICAgICAuLi5vcGVyYXRpb24sXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgLi4ub3BlcmF0aW9uLnByb3BlcnRpZXMsXG4gICAgICAgICAgICBfa2V5OiBvcGVyYXRpb24ucHJvcGVydGllcy5fa2V5ID09PSB2b2lkIDAgfHwgZXhpc3RpbmdLZXlzLmluY2x1ZGVzKG9wZXJhdGlvbi5wcm9wZXJ0aWVzLl9rZXkpID8gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpIDogb3BlcmF0aW9uLnByb3BlcnRpZXMuX2tleVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gXCJpbnNlcnRfbm9kZVwiICYmICFFZGl0b3IuaXNFZGl0b3Iob3BlcmF0aW9uLm5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nS2V5cyA9IFsuLi5Ob2RlLmRlc2NlbmRhbnRzKGVkaXRvcildLm1hcCgoW25vZGVdKSA9PiBub2RlLl9rZXkpO1xuICAgICAgICBhcHBseTIoe1xuICAgICAgICAgIC4uLm9wZXJhdGlvbixcbiAgICAgICAgICBub2RlOiB7XG4gICAgICAgICAgICAuLi5vcGVyYXRpb24ubm9kZSxcbiAgICAgICAgICAgIF9rZXk6IG9wZXJhdGlvbi5ub2RlLl9rZXkgPT09IHZvaWQgMCB8fCBleGlzdGluZ0tleXMuaW5jbHVkZXMob3BlcmF0aW9uLm5vZGUuX2tleSkgPyBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCkgOiBvcGVyYXRpb24ubm9kZS5fa2V5XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgfSwgZWRpdG9yLm5vcm1hbGl6ZU5vZGUgPSAoZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IFtub2RlLCBwYXRoXSA9IGVudHJ5O1xuICAgICAgaWYgKEVsZW1lbnQuaXNFbGVtZW50KG5vZGUpICYmIG5vZGUuX3R5cGUgPT09IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUpIHtcbiAgICAgICAgaWYgKCFub2RlLl9rZXkpIHtcbiAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBOb2RlLmNoaWxkcmVuKGVkaXRvciwgcGF0aCkpXG4gICAgICAgICAgaWYgKCFjaGlsZC5fa2V5KSB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vcm1hbGl6ZU5vZGUoZW50cnkpO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJGEgPSBkZWJ1Z1dpdGhOYW1lKFwiYXBwbHlQYXRjaGVzXCIpLCBkZWJ1Z1ZlcmJvc2UgPSBkZWJ1ZyRhLmVuYWJsZWQgJiYgITA7XG5mdW5jdGlvbiBjcmVhdGVBcHBseVBhdGNoKHNjaGVtYVR5cGVzKSB7XG4gIHJldHVybiAoZWRpdG9yLCBwYXRjaCkgPT4ge1xuICAgIGxldCBjaGFuZ2VkID0gITE7XG4gICAgZGVidWdWZXJib3NlICYmIChkZWJ1ZyRhKGBcblxuTkVXIFBBVENIID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1gKSwgZGVidWckYShKU09OLnN0cmluZ2lmeShwYXRjaCwgbnVsbCwgMikpKTtcbiAgICB0cnkge1xuICAgICAgc3dpdGNoIChwYXRjaC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJpbnNlcnRcIjpcbiAgICAgICAgICBjaGFuZ2VkID0gaW5zZXJ0UGF0Y2goZWRpdG9yLCBwYXRjaCwgc2NoZW1hVHlwZXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICBjaGFuZ2VkID0gdW5zZXRQYXRjaChlZGl0b3IsIHBhdGNoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNldFwiOlxuICAgICAgICAgIGNoYW5nZWQgPSBzZXRQYXRjaChlZGl0b3IsIHBhdGNoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImRpZmZNYXRjaFBhdGNoXCI6XG4gICAgICAgICAgY2hhbmdlZCA9IGRpZmZNYXRjaFBhdGNoKGVkaXRvciwgcGF0Y2gpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGRlYnVnJGEoXCJVbmhhbmRsZWQgcGF0Y2hcIiwgcGF0Y2gudHlwZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9O1xufVxuZnVuY3Rpb24gZGlmZk1hdGNoUGF0Y2goZWRpdG9yLCBwYXRjaCkge1xuICBjb25zdCB7XG4gICAgYmxvY2ssXG4gICAgY2hpbGQsXG4gICAgY2hpbGRQYXRoXG4gIH0gPSBmaW5kQmxvY2tBbmRDaGlsZEZyb21QYXRoKGVkaXRvciwgcGF0Y2gucGF0aCk7XG4gIGlmICghYmxvY2spXG4gICAgcmV0dXJuIGRlYnVnJGEoXCJCbG9jayBub3QgZm91bmRcIiksICExO1xuICBpZiAoIWNoaWxkIHx8ICFjaGlsZFBhdGgpXG4gICAgcmV0dXJuIGRlYnVnJGEoXCJDaGlsZCBub3QgZm91bmRcIiksICExO1xuICBpZiAoIShibG9jayAmJiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSA0ICYmIHBhdGNoLnBhdGhbMV0gPT09IFwiY2hpbGRyZW5cIiAmJiBwYXRjaC5wYXRoWzNdID09PSBcInRleHRcIikgfHwgIVRleHQuaXNUZXh0KGNoaWxkKSlcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IHBhdGNoZXMgPSBwYXJzZShwYXRjaC52YWx1ZSksIFtuZXdWYWx1ZV0gPSBhcHBseShwYXRjaGVzLCBjaGlsZC50ZXh0LCB7XG4gICAgYWxsb3dFeGNlZWRpbmdJbmRpY2VzOiAhMFxuICB9KSwgZGlmZiQxID0gY2xlYW51cEVmZmljaWVuY3koZGlmZihjaGlsZC50ZXh0LCBuZXdWYWx1ZSksIDUpO1xuICBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJiZWZvcmVcIik7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IFtvcCwgdGV4dF0gb2YgZGlmZiQxKVxuICAgIG9wID09PSBESUZGX0lOU0VSVCA/IChlZGl0b3IuYXBwbHkoe1xuICAgICAgdHlwZTogXCJpbnNlcnRfdGV4dFwiLFxuICAgICAgcGF0aDogY2hpbGRQYXRoLFxuICAgICAgb2Zmc2V0LFxuICAgICAgdGV4dFxuICAgIH0pLCBvZmZzZXQgKz0gdGV4dC5sZW5ndGgpIDogb3AgPT09IERJRkZfREVMRVRFID8gZWRpdG9yLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwicmVtb3ZlX3RleHRcIixcbiAgICAgIHBhdGg6IGNoaWxkUGF0aCxcbiAgICAgIG9mZnNldCxcbiAgICAgIHRleHRcbiAgICB9KSA6IG9wID09PSBESUZGX0VRVUFMICYmIChvZmZzZXQgKz0gdGV4dC5sZW5ndGgpO1xuICByZXR1cm4gZGVidWdTdGF0ZShlZGl0b3IsIFwiYWZ0ZXJcIiksICEwO1xufVxuZnVuY3Rpb24gaW5zZXJ0UGF0Y2goZWRpdG9yLCBwYXRjaCwgc2NoZW1hVHlwZXMpIHtcbiAgY29uc3Qge1xuICAgIGJsb2NrOiB0YXJnZXRCbG9jayxcbiAgICBjaGlsZDogdGFyZ2V0Q2hpbGQsXG4gICAgYmxvY2tQYXRoOiB0YXJnZXRCbG9ja1BhdGgsXG4gICAgY2hpbGRQYXRoOiB0YXJnZXRDaGlsZFBhdGhcbiAgfSA9IGZpbmRCbG9ja0FuZENoaWxkRnJvbVBhdGgoZWRpdG9yLCBwYXRjaC5wYXRoKTtcbiAgaWYgKCF0YXJnZXRCbG9jayB8fCAhdGFyZ2V0QmxvY2tQYXRoKVxuICAgIHJldHVybiBkZWJ1ZyRhKFwiQmxvY2sgbm90IGZvdW5kXCIpLCAhMTtcbiAgaWYgKHBhdGNoLnBhdGgubGVuZ3RoID4gMSAmJiBwYXRjaC5wYXRoWzFdICE9PSBcImNoaWxkcmVuXCIpXG4gICAgcmV0dXJuIGRlYnVnJGEoXCJJZ25vcmluZyBwYXRjaCB0YXJnZXRpbmcgdm9pZCB2YWx1ZVwiKSwgITE7XG4gIGlmIChwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGl0ZW1zOiBpdGVtczIsXG4gICAgICBwb3NpdGlvbjogcG9zaXRpb24yXG4gICAgfSA9IHBhdGNoLCBibG9ja3NUb0luc2VydCA9IHRvU2xhdGVWYWx1ZShpdGVtczIsIHtcbiAgICAgIHNjaGVtYVR5cGVzXG4gICAgfSwgS0VZX1RPX1NMQVRFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCB0YXJnZXRCbG9ja0luZGV4ID0gdGFyZ2V0QmxvY2tQYXRoWzBdLCBub3JtYWxpemVkSWR4MiA9IHBvc2l0aW9uMiA9PT0gXCJhZnRlclwiID8gdGFyZ2V0QmxvY2tJbmRleCArIDEgOiB0YXJnZXRCbG9ja0luZGV4O1xuICAgIHJldHVybiBkZWJ1ZyRhKGBJbnNlcnRpbmcgYmxvY2tzIGF0IHBhdGggWyR7bm9ybWFsaXplZElkeDJ9XWApLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJiZWZvcmVcIiksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBibG9ja3NUb0luc2VydCwge1xuICAgICAgYXQ6IFtub3JtYWxpemVkSWR4Ml1cbiAgICB9KSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYWZ0ZXJcIiksICEwO1xuICB9XG4gIGNvbnN0IHtcbiAgICBpdGVtcyxcbiAgICBwb3NpdGlvblxuICB9ID0gcGF0Y2g7XG4gIGlmICghdGFyZ2V0Q2hpbGQgfHwgIXRhcmdldENoaWxkUGF0aClcbiAgICByZXR1cm4gZGVidWckYShcIkNoaWxkIG5vdCBmb3VuZFwiKSwgITE7XG4gIGNvbnN0IGNoaWxkcmVuVG9JbnNlcnQgPSB0YXJnZXRCbG9jayAmJiB0b1NsYXRlVmFsdWUoW3tcbiAgICAuLi50YXJnZXRCbG9jayxcbiAgICBjaGlsZHJlbjogaXRlbXNcbiAgfV0sIHtcbiAgICBzY2hlbWFUeXBlc1xuICB9LCBLRVlfVE9fU0xBVEVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIHRhcmdldENoaWxkSW5kZXggPSB0YXJnZXRDaGlsZFBhdGhbMV0sIG5vcm1hbGl6ZWRJZHggPSBwb3NpdGlvbiA9PT0gXCJhZnRlclwiID8gdGFyZ2V0Q2hpbGRJbmRleCArIDEgOiB0YXJnZXRDaGlsZEluZGV4LCBjaGlsZEluc2VydFBhdGggPSBbdGFyZ2V0Q2hpbGRQYXRoWzBdLCBub3JtYWxpemVkSWR4XTtcbiAgcmV0dXJuIGRlYnVnJGEoYEluc2VydGluZyBjaGlsZHJlbiBhdCBwYXRoICR7Y2hpbGRJbnNlcnRQYXRofWApLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJiZWZvcmVcIiksIGNoaWxkcmVuVG9JbnNlcnQgJiYgRWxlbWVudC5pc0VsZW1lbnQoY2hpbGRyZW5Ub0luc2VydFswXSkgJiYgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGNoaWxkcmVuVG9JbnNlcnRbMF0uY2hpbGRyZW4sIHtcbiAgICBhdDogY2hpbGRJbnNlcnRQYXRoXG4gIH0pLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJhZnRlclwiKSwgITA7XG59XG5mdW5jdGlvbiBzZXRQYXRjaChlZGl0b3IsIHBhdGNoKSB7XG4gIGxldCB2YWx1ZSA9IHBhdGNoLnZhbHVlO1xuICB0eXBlb2YgcGF0Y2gucGF0aFszXSA9PSBcInN0cmluZ1wiICYmICh2YWx1ZSA9IHt9LCB2YWx1ZVtwYXRjaC5wYXRoWzNdXSA9IHBhdGNoLnZhbHVlKTtcbiAgY29uc3Qge1xuICAgIGJsb2NrLFxuICAgIGJsb2NrUGF0aCxcbiAgICBjaGlsZCxcbiAgICBjaGlsZFBhdGhcbiAgfSA9IGZpbmRCbG9ja0FuZENoaWxkRnJvbVBhdGgoZWRpdG9yLCBwYXRjaC5wYXRoKTtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm4gZGVidWckYShcIkJsb2NrIG5vdCBmb3VuZFwiKSwgITE7XG4gIGNvbnN0IGlzVGV4dEJsb2NrID0gZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKTtcbiAgaWYgKGlzVGV4dEJsb2NrICYmIHBhdGNoLnBhdGgubGVuZ3RoID4gMSAmJiBwYXRjaC5wYXRoWzFdICE9PSBcImNoaWxkcmVuXCIpXG4gICAgcmV0dXJuIGRlYnVnJGEoXCJJZ25vcmluZyBzZXR0aW5nIHZvaWQgdmFsdWVcIiksICExO1xuICBpZiAoZGVidWdTdGF0ZShlZGl0b3IsIFwiYmVmb3JlXCIpLCBpc1RleHRCbG9jayAmJiBjaGlsZCAmJiBjaGlsZFBhdGgpIHtcbiAgICBpZiAoVGV4dC5pc1RleHQodmFsdWUpICYmIFRleHQuaXNUZXh0KGNoaWxkKSkge1xuICAgICAgY29uc3QgbmV3VGV4dCA9IGNoaWxkLnRleHQ7XG4gICAgICB2YWx1ZS50ZXh0ICE9PSBuZXdUZXh0ICYmIChkZWJ1ZyRhKFwiU2V0dGluZyB0ZXh0IHByb3BlcnR5XCIpLCBlZGl0b3IuYXBwbHkoe1xuICAgICAgICB0eXBlOiBcInJlbW92ZV90ZXh0XCIsXG4gICAgICAgIHBhdGg6IGNoaWxkUGF0aCxcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICB0ZXh0OiBuZXdUZXh0XG4gICAgICB9KSwgZWRpdG9yLmFwcGx5KHtcbiAgICAgICAgdHlwZTogXCJpbnNlcnRfdGV4dFwiLFxuICAgICAgICBwYXRoOiBjaGlsZFBhdGgsXG4gICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgdGV4dDogdmFsdWUudGV4dFxuICAgICAgfSksIGVkaXRvci5vbkNoYW5nZSgpKTtcbiAgICB9IGVsc2VcbiAgICAgIGRlYnVnJGEoXCJTZXR0aW5nIG5vbi10ZXh0IHByb3BlcnR5XCIpLCBlZGl0b3IuYXBwbHkoe1xuICAgICAgICB0eXBlOiBcInNldF9ub2RlXCIsXG4gICAgICAgIHBhdGg6IGNoaWxkUGF0aCxcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIG5ld1Byb3BlcnRpZXM6IHZhbHVlXG4gICAgICB9KTtcbiAgICByZXR1cm4gITA7XG4gIH0gZWxzZSBpZiAoRWxlbWVudC5pc0VsZW1lbnQoYmxvY2spICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAxICYmIGJsb2NrUGF0aCkge1xuICAgIGRlYnVnJGEoXCJTZXR0aW5nIGJsb2NrIHByb3BlcnR5XCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgLi4ubmV4dFJlc3RcbiAgICB9ID0gdmFsdWUsIHtcbiAgICAgIGNoaWxkcmVuOiBwcmV2Q2hpbGRyZW4sXG4gICAgICAuLi5wcmV2UmVzdFxuICAgIH0gPSBibG9jayB8fCB7XG4gICAgICBjaGlsZHJlbjogdm9pZCAwXG4gICAgfTtcbiAgICBlZGl0b3IuYXBwbHkoe1xuICAgICAgdHlwZTogXCJzZXRfbm9kZVwiLFxuICAgICAgcGF0aDogYmxvY2tQYXRoLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAuLi5wcmV2UmVzdFxuICAgICAgfSxcbiAgICAgIG5ld1Byb3BlcnRpZXM6IG5leHRSZXN0XG4gICAgfSksIGRlYnVnJGEoXCJTZXR0aW5nIGNoaWxkcmVuXCIpLCBibG9jay5jaGlsZHJlbi5mb3JFYWNoKChjMiwgY0luZGV4KSA9PiB7XG4gICAgICBlZGl0b3IuYXBwbHkoe1xuICAgICAgICB0eXBlOiBcInJlbW92ZV9ub2RlXCIsXG4gICAgICAgIHBhdGg6IGJsb2NrUGF0aC5jb25jYXQoYmxvY2suY2hpbGRyZW4ubGVuZ3RoIC0gMSAtIGNJbmRleCksXG4gICAgICAgIG5vZGU6IGMyXG4gICAgICB9KTtcbiAgICB9KSwgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4uZm9yRWFjaCgoYzIsIGNJbmRleCkgPT4ge1xuICAgICAgZWRpdG9yLmFwcGx5KHtcbiAgICAgICAgdHlwZTogXCJpbnNlcnRfbm9kZVwiLFxuICAgICAgICBwYXRoOiBibG9ja1BhdGguY29uY2F0KGNJbmRleCksXG4gICAgICAgIG5vZGU6IGMyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChibG9jayAmJiBcInZhbHVlXCIgaW4gYmxvY2spIHtcbiAgICBjb25zdCBuZXdWYWwgPSBhcHBseUFsbChbYmxvY2sudmFsdWVdLCBbcGF0Y2hdKVswXTtcbiAgICByZXR1cm4gVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgIC4uLmJsb2NrLFxuICAgICAgdmFsdWU6IG5ld1ZhbFxuICAgIH0sIHtcbiAgICAgIGF0OiBibG9ja1BhdGhcbiAgICB9KSwgITA7XG4gIH1cbiAgcmV0dXJuIGRlYnVnU3RhdGUoZWRpdG9yLCBcImFmdGVyXCIpLCAhMDtcbn1cbmZ1bmN0aW9uIHVuc2V0UGF0Y2goZWRpdG9yLCBwYXRjaCkge1xuICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICBkZWJ1ZyRhKFwiUmVtb3ZpbmcgZXZlcnl0aGluZ1wiKSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYmVmb3JlXCIpO1xuICAgIGNvbnN0IHByZXZpb3VzU2VsZWN0aW9uID0gZWRpdG9yLnNlbGVjdGlvbjtcbiAgICByZXR1cm4gVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpLCBlZGl0b3IuY2hpbGRyZW4uZm9yRWFjaCgoX2NoaWxkLCBpKSA9PiB7XG4gICAgICBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogW2ldXG4gICAgICB9KTtcbiAgICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2soe1xuICAgICAgZGVjb3JhdG9yczogW11cbiAgICB9KSksIHByZXZpb3VzU2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwge1xuICAgICAgYW5jaG9yOiB7XG4gICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9LFxuICAgICAgZm9jdXM6IHtcbiAgICAgICAgcGF0aDogWzAsIDBdLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH1cbiAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImFmdGVyXCIpLCAhMDtcbiAgfVxuICBjb25zdCB7XG4gICAgYmxvY2ssXG4gICAgYmxvY2tQYXRoLFxuICAgIGNoaWxkLFxuICAgIGNoaWxkUGF0aFxuICB9ID0gZmluZEJsb2NrQW5kQ2hpbGRGcm9tUGF0aChlZGl0b3IsIHBhdGNoLnBhdGgpO1xuICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoIWJsb2NrIHx8ICFibG9ja1BhdGgpXG4gICAgICByZXR1cm4gZGVidWckYShcIkJsb2NrIG5vdCBmb3VuZFwiKSwgITE7XG4gICAgY29uc3QgYmxvY2tJbmRleCA9IGJsb2NrUGF0aFswXTtcbiAgICByZXR1cm4gZGVidWckYShgUmVtb3ZpbmcgYmxvY2sgYXQgcGF0aCBbJHtibG9ja0luZGV4fV1gKSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYmVmb3JlXCIpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgYXQ6IFtibG9ja0luZGV4XVxuICAgIH0pLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJhZnRlclwiKSwgITA7XG4gIH1cbiAgcmV0dXJuIGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgcGF0Y2gucGF0aFsxXSA9PT0gXCJjaGlsZHJlblwiICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAzID8gIWNoaWxkIHx8ICFjaGlsZFBhdGggPyAoZGVidWckYShcIkNoaWxkIG5vdCBmb3VuZFwiKSwgITEpIDogKGRlYnVnJGEoYFVuc2V0dGluZyBjaGlsZCBhdCBwYXRoICR7SlNPTi5zdHJpbmdpZnkoY2hpbGRQYXRoKX1gKSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYmVmb3JlXCIpLCBkZWJ1Z1ZlcmJvc2UgJiYgZGVidWckYShgUmVtb3ZpbmcgY2hpbGQgYXQgcGF0aCAke0pTT04uc3RyaW5naWZ5KGNoaWxkUGF0aCl9YCksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgYXQ6IGNoaWxkUGF0aFxuICB9KSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYWZ0ZXJcIiksICEwKSA6ICExO1xufVxuZnVuY3Rpb24gaXNLZXllZFNlZ21lbnQoc2VnbWVudCkge1xuICByZXR1cm4gdHlwZW9mIHNlZ21lbnQgPT0gXCJvYmplY3RcIiAmJiBcIl9rZXlcIiBpbiBzZWdtZW50O1xufVxuZnVuY3Rpb24gZGVidWdTdGF0ZShlZGl0b3IsIHN0YXRlTmFtZSkge1xuICBkZWJ1Z1ZlcmJvc2UgJiYgKGRlYnVnJGEoYENoaWxkcmVuICR7c3RhdGVOYW1lfTpgLCBKU09OLnN0cmluZ2lmeShlZGl0b3IuY2hpbGRyZW4sIG51bGwsIDIpKSwgZGVidWckYShgU2VsZWN0aW9uICR7c3RhdGVOYW1lfTogYCwgSlNPTi5zdHJpbmdpZnkoZWRpdG9yLnNlbGVjdGlvbiwgbnVsbCwgMikpKTtcbn1cbmZ1bmN0aW9uIGZpbmRCbG9ja0Zyb21QYXRoKGVkaXRvciwgcGF0aCkge1xuICBsZXQgYmxvY2tJbmRleCA9IC0xO1xuICBjb25zdCBibG9jayA9IGVkaXRvci5jaGlsZHJlbi5maW5kKChub2RlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBpc0tleWVkU2VnbWVudChwYXRoWzBdKSA/IG5vZGUuX2tleSA9PT0gcGF0aFswXS5fa2V5IDogaW5kZXggPT09IHBhdGhbMF07XG4gICAgcmV0dXJuIGlzTWF0Y2ggJiYgKGJsb2NrSW5kZXggPSBpbmRleCksIGlzTWF0Y2g7XG4gIH0pO1xuICByZXR1cm4gYmxvY2sgPyB7XG4gICAgYmxvY2ssXG4gICAgcGF0aDogW2Jsb2NrSW5kZXhdXG4gIH0gOiB7fTtcbn1cbmZ1bmN0aW9uIGZpbmRCbG9ja0FuZENoaWxkRnJvbVBhdGgoZWRpdG9yLCBwYXRoKSB7XG4gIGNvbnN0IHtcbiAgICBibG9jayxcbiAgICBwYXRoOiBibG9ja1BhdGhcbiAgfSA9IGZpbmRCbG9ja0Zyb21QYXRoKGVkaXRvciwgcGF0aCk7XG4gIGlmICghKEVsZW1lbnQuaXNFbGVtZW50KGJsb2NrKSAmJiBwYXRoWzFdID09PSBcImNoaWxkcmVuXCIpKVxuICAgIHJldHVybiB7XG4gICAgICBibG9jayxcbiAgICAgIGJsb2NrUGF0aCxcbiAgICAgIGNoaWxkOiB2b2lkIDAsXG4gICAgICBjaGlsZFBhdGg6IHZvaWQgMFxuICAgIH07XG4gIGxldCBjaGlsZEluZGV4ID0gLTE7XG4gIGNvbnN0IGNoaWxkID0gYmxvY2suY2hpbGRyZW4uZmluZCgobm9kZSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBpc01hdGNoID0gaXNLZXllZFNlZ21lbnQocGF0aFsyXSkgPyBub2RlLl9rZXkgPT09IHBhdGhbMl0uX2tleSA6IGluZGV4ID09PSBwYXRoWzJdO1xuICAgIHJldHVybiBpc01hdGNoICYmIChjaGlsZEluZGV4ID0gaW5kZXgpLCBpc01hdGNoO1xuICB9KTtcbiAgcmV0dXJuIGNoaWxkID8ge1xuICAgIGJsb2NrLFxuICAgIGNoaWxkLFxuICAgIGJsb2NrUGF0aCxcbiAgICBjaGlsZFBhdGg6IGJsb2NrUGF0aD8uY29uY2F0KGNoaWxkSW5kZXgpXG4gIH0gOiB7XG4gICAgYmxvY2ssXG4gICAgYmxvY2tQYXRoLFxuICAgIGNoaWxkOiB2b2lkIDAsXG4gICAgY2hpbGRQYXRoOiB2b2lkIDBcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJDkgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhQYXRjaGVzXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFBhdGNoZXMoe1xuICBlZGl0b3JBY3RvcixcbiAgcGF0Y2hGdW5jdGlvbnMsXG4gIHNjaGVtYVR5cGVzLFxuICBzdWJzY3JpcHRpb25zXG59KSB7XG4gIGxldCBwcmV2aW91c0NoaWxkcmVuO1xuICBjb25zdCBhcHBseVBhdGNoID0gY3JlYXRlQXBwbHlQYXRjaChzY2hlbWFUeXBlcyk7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBJU19QUk9DRVNTSU5HX1JFTU9URV9DSEFOR0VTLnNldChlZGl0b3IsICExKSwgUEFUQ0hJTkcuc2V0KGVkaXRvciwgITApLCBwcmV2aW91c0NoaWxkcmVuID0gWy4uLmVkaXRvci5jaGlsZHJlbl07XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MlxuICAgIH0gPSBlZGl0b3I7XG4gICAgbGV0IGJ1ZmZlcmVkUGF0Y2hlcyA9IFtdO1xuICAgIGNvbnN0IGhhbmRsZUJ1ZmZlcmVkUmVtb3RlUGF0Y2hlcyA9ICgpID0+IHtcbiAgICAgIGlmIChidWZmZXJlZFBhdGNoZXMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBwYXRjaGVzID0gYnVmZmVyZWRQYXRjaGVzO1xuICAgICAgYnVmZmVyZWRQYXRjaGVzID0gW107XG4gICAgICBsZXQgY2hhbmdlZCA9ICExO1xuICAgICAgd2l0aFJlbW90ZUNoYW5nZXMoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgd2l0aG91dFBhdGNoaW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgd2l0aG91dFNhdmluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgcGF0Y2hlcy5mb3JFYWNoKChwYXRjaCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlYnVnJDkuZW5hYmxlZCAmJiBkZWJ1ZyQ5KGBIYW5kbGluZyByZW1vdGUgcGF0Y2ggJHtKU09OLnN0cmluZ2lmeShwYXRjaCl9YCksIGNoYW5nZWQgPSBhcHBseVBhdGNoKGVkaXRvciwgcGF0Y2gpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgY2hhbmdlZCAmJiAoZWRpdG9yLm5vcm1hbGl6ZSgpLCBlZGl0b3Iub25DaGFuZ2UoKSk7XG4gICAgICB9KTtcbiAgICB9LCBoYW5kbGVQYXRjaGVzID0gKHtcbiAgICAgIHBhdGNoZXNcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCByZW1vdGVQYXRjaGVzID0gcGF0Y2hlcy5maWx0ZXIoKHApID0+IHAub3JpZ2luICE9PSBcImxvY2FsXCIpO1xuICAgICAgcmVtb3RlUGF0Y2hlcy5sZW5ndGggIT09IDAgJiYgKGJ1ZmZlcmVkUGF0Y2hlcyA9IGJ1ZmZlcmVkUGF0Y2hlcy5jb25jYXQocmVtb3RlUGF0Y2hlcyksIGhhbmRsZUJ1ZmZlcmVkUmVtb3RlUGF0Y2hlcygpKTtcbiAgICB9O1xuICAgIHJldHVybiBzdWJzY3JpcHRpb25zLnB1c2goKCkgPT4ge1xuICAgICAgZGVidWckOShcIlN1YnNjcmliaW5nIHRvIHJlbW90ZSBwYXRjaGVzXCIpO1xuICAgICAgY29uc3Qgc3ViID0gZWRpdG9yQWN0b3Iub24oXCJwYXRjaGVzXCIsIGhhbmRsZVBhdGNoZXMpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGVidWckOShcIlVuc3Vic2NyaWJpbmcgdG8gcmVtb3RlIHBhdGNoZXNcIiksIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgfTtcbiAgICB9KSwgZWRpdG9yLmFwcGx5ID0gKG9wZXJhdGlvbikgPT4ge1xuICAgICAgbGV0IHBhdGNoZXMgPSBbXTtcbiAgICAgIHByZXZpb3VzQ2hpbGRyZW4gPSBlZGl0b3IuY2hpbGRyZW47XG4gICAgICBjb25zdCBlZGl0b3JXYXNFbXB0eSA9IGlzRXF1YWxUb0VtcHR5RWRpdG9yKHByZXZpb3VzQ2hpbGRyZW4sIHNjaGVtYVR5cGVzKTtcbiAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgY29uc3QgZWRpdG9ySXNFbXB0eSA9IGlzRXF1YWxUb0VtcHR5RWRpdG9yKGVkaXRvci5jaGlsZHJlbiwgc2NoZW1hVHlwZXMpO1xuICAgICAgaWYgKCFpc1BhdGNoaW5nKGVkaXRvcikpXG4gICAgICAgIHJldHVybiBlZGl0b3I7XG4gICAgICBzd2l0Y2ggKGVkaXRvcldhc0VtcHR5ICYmICFlZGl0b3JJc0VtcHR5ICYmIG9wZXJhdGlvbi50eXBlICE9PSBcInNldF9zZWxlY3Rpb25cIiAmJiBwYXRjaGVzLnB1c2goaW5zZXJ0KHByZXZpb3VzQ2hpbGRyZW4sIFwiYmVmb3JlXCIsIFswXSkpLCBvcGVyYXRpb24udHlwZSkge1xuICAgICAgICBjYXNlIFwiaW5zZXJ0X3RleHRcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLmluc2VydFRleHRQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlX3RleHRcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLnJlbW92ZVRleHRQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlX25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLnJlbW92ZU5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3BsaXRfbm9kZVwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4ucGF0Y2hGdW5jdGlvbnMuc3BsaXROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImluc2VydF9ub2RlXCI6XG4gICAgICAgICAgcGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCAuLi5wYXRjaEZ1bmN0aW9ucy5pbnNlcnROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNldF9ub2RlXCI6XG4gICAgICAgICAgcGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCAuLi5wYXRjaEZ1bmN0aW9ucy5zZXROb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1lcmdlX25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLm1lcmdlTm9kZVBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBwcmV2aW91c0NoaWxkcmVuKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtb3ZlX25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLm1vdmVOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybiAhZWRpdG9yV2FzRW1wdHkgJiYgZWRpdG9ySXNFbXB0eSAmJiBbXCJtZXJnZV9ub2RlXCIsIFwic2V0X25vZGVcIiwgXCJyZW1vdmVfdGV4dFwiLCBcInJlbW92ZV9ub2RlXCJdLmluY2x1ZGVzKG9wZXJhdGlvbi50eXBlKSAmJiAocGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCB1bnNldChbXSldLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJub3RpZnkudW5zZXRcIixcbiAgICAgICAgcHJldmlvdXNWYWx1ZTogZnJvbVNsYXRlVmFsdWUocHJldmlvdXNDaGlsZHJlbiwgc2NoZW1hVHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpXG4gICAgICB9KSksIGVkaXRvcldhc0VtcHR5ICYmIHBhdGNoZXMubGVuZ3RoID4gMCAmJiAocGF0Y2hlcyA9IFtzZXRJZk1pc3NpbmcoW10sIFtdKSwgLi4ucGF0Y2hlc10pLCBwYXRjaGVzLmxlbmd0aCA+IDAgJiYgcGF0Y2hlcy5mb3JFYWNoKChwYXRjaCkgPT4ge1xuICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcInBhdGNoXCIsXG4gICAgICAgICAgcGF0Y2g6IHtcbiAgICAgICAgICAgIC4uLnBhdGNoLFxuICAgICAgICAgICAgb3JpZ2luOiBcImxvY2FsXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSksIGVkaXRvcjtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5jb25zdCBkZWJ1ZyQ4ID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoUGxhY2Vob2xkZXJCbG9ja1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhQbGFjZWhvbGRlckJsb2NrKGVkaXRvckFjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBseTogYXBwbHkyXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLmFwcGx5ID0gKG9wKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgICAgfSkpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZG9pbmcoZWRpdG9yKSB8fCBpc1JlZG9pbmcoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJyZW1vdmVfbm9kZVwiKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBvcC5ub2RlO1xuICAgICAgICBpZiAob3AucGF0aFswXSA9PT0gMCAmJiBFZGl0b3IuaXNWb2lkKGVkaXRvciwgbm9kZSkpIHtcbiAgICAgICAgICBjb25zdCBuZXh0UGF0aCA9IFBhdGgubmV4dChvcC5wYXRoKTtcbiAgICAgICAgICBlZGl0b3IuY2hpbGRyZW5bbmV4dFBhdGhbMF1dIHx8IChkZWJ1ZyQ4KFwiQWRkaW5nIHBsYWNlaG9sZGVyIGJsb2NrXCIpLCBFZGl0b3IuaW5zZXJ0Tm9kZShlZGl0b3IsIGVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2soe1xuICAgICAgICAgICAgZGVjb3JhdG9yczogW11cbiAgICAgICAgICB9KSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBseTIob3ApO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJDcgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhQb3J0YWJsZVRleHRCbG9ja1N0eWxlXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFBvcnRhYmxlVGV4dEJsb2NrU3R5bGUoZWRpdG9yQWN0b3IsIHR5cGVzKSB7XG4gIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHR5cGVzLnN0eWxlc1swXS52YWx1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IHtcbiAgICAgIG5vcm1hbGl6ZU5vZGVcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3Iubm9ybWFsaXplTm9kZSA9IChub2RlRW50cnkpID0+IHtcbiAgICAgIGNvbnN0IFssIHBhdGhdID0gbm9kZUVudHJ5O1xuICAgICAgZm9yIChjb25zdCBvcCBvZiBlZGl0b3Iub3BlcmF0aW9ucylcbiAgICAgICAgaWYgKG9wLnR5cGUgPT09IFwic3BsaXRfbm9kZVwiICYmIG9wLnBhdGgubGVuZ3RoID09PSAxICYmIGVkaXRvci5pc1RleHRCbG9jayhvcC5wcm9wZXJ0aWVzKSAmJiBvcC5wcm9wZXJ0aWVzLnN0eWxlICE9PSBkZWZhdWx0U3R5bGUgJiYgb3AucGF0aFswXSA9PT0gcGF0aFswXSAmJiAhUGF0aC5lcXVhbHMocGF0aCwgb3AucGF0aCkpIHtcbiAgICAgICAgICBjb25zdCBbY2hpbGRdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBbb3AucGF0aFswXSArIDEsIDBdKTtcbiAgICAgICAgICBpZiAoVGV4dC5pc1RleHQoY2hpbGQpICYmIGNoaWxkLnRleHQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIGRlYnVnJDcoYE5vcm1hbGl6aW5nIHNwbGl0IG5vZGUgdG8gJHtkZWZhdWx0U3R5bGV9IHN0eWxlYCwgb3ApLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IGRlZmF1bHRTdHlsZVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhdDogW29wLnBhdGhbMF0gKyAxXSxcbiAgICAgICAgICAgICAgdm9pZHM6ICExXG4gICAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIG5vcm1hbGl6ZU5vZGUobm9kZUVudHJ5KTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5mdW5jdGlvbiBpc1BvcnRhYmxlVGV4dFNwYW4obm9kZSkge1xuICByZXR1cm4gbm9kZS5fdHlwZSA9PT0gXCJzcGFuXCIgJiYgXCJ0ZXh0XCIgaW4gbm9kZSAmJiB0eXBlb2Ygbm9kZS50ZXh0ID09IFwic3RyaW5nXCIgJiYgKHR5cGVvZiBub2RlLm1hcmtzID4gXCJ1XCIgfHwgQXJyYXkuaXNBcnJheShub2RlLm1hcmtzKSAmJiBub2RlLm1hcmtzLmV2ZXJ5KChtYXJrKSA9PiB0eXBlb2YgbWFyayA9PSBcInN0cmluZ1wiKSk7XG59XG5mdW5jdGlvbiBpc1BvcnRhYmxlVGV4dEJsb2NrKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICAvLyBBIGJsb2NrIGRvZXNuJ3QgX2hhdmVfIHRvIGJlIG5hbWVkICdibG9jaycgLSB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW5cbiAgICAvLyBhbGxvd2VkIGNoaWxkIHR5cGVzIGFuZCBtYXJrcywgb25lIG1pZ2h0IG5hbWUgdGhlbSBkaWZmZXJlbnRseVxuICAgIHR5cGVvZiBub2RlLl90eXBlID09IFwic3RyaW5nXCIgJiYgLy8gVG9vbGtpdC10eXBlcyBsaWtlIG5lc3RlZCBzcGFucyBhcmUgQC1wcmVmaXhlZFxuICAgIG5vZGUuX3R5cGVbMF0gIT09IFwiQFwiICYmIC8vIGBtYXJrRGVmc2AgaXNuJ3QgX3JlcXVpcmVkXyBwZXIgc2F5LCBidXQgaWYgaXQncyB0aGVyZSwgaXQgbmVlZHMgdG8gYmUgYW4gYXJyYXlcbiAgICAoIShcIm1hcmtEZWZzXCIgaW4gbm9kZSkgfHwgIW5vZGUubWFya0RlZnMgfHwgQXJyYXkuaXNBcnJheShub2RlLm1hcmtEZWZzKSAmJiAvLyBFdmVyeSBtYXJrIGRlZmluaXRpb24gbmVlZHMgdG8gaGF2ZSBhbiBgX2tleWAgdG8gYmUgbWFwcGFibGUgaW4gY2hpbGQgc3BhbnNcbiAgICBub2RlLm1hcmtEZWZzLmV2ZXJ5KChkZWYpID0+IHR5cGVvZiBkZWYuX2tleSA9PSBcInN0cmluZ1wiKSkgJiYgLy8gYGNoaWxkcmVuYCBpcyByZXF1aXJlZCBhbmQgbmVlZHMgdG8gYmUgYW4gYXJyYXlcbiAgICBcImNoaWxkcmVuXCIgaW4gbm9kZSAmJiBBcnJheS5pc0FycmF5KG5vZGUuY2hpbGRyZW4pICYmIC8vIEFsbCBjaGlsZHJlbiBhcmUgb2JqZWN0cyB3aXRoIGBfdHlwZWAgKHVzdWFsbHkgc3BhbnMsIGJ1dCBjYW4gY29udGFpbiBvdGhlciBzdHVmZilcbiAgICBub2RlLmNoaWxkcmVuLmV2ZXJ5KChjaGlsZCkgPT4gdHlwZW9mIGNoaWxkID09IFwib2JqZWN0XCIgJiYgXCJfdHlwZVwiIGluIGNoaWxkKVxuICApO1xufVxuZnVuY3Rpb24gZ2V0UHJldmlvdXNTcGFuKHtcbiAgZWRpdG9yLFxuICBibG9ja1BhdGgsXG4gIHNwYW5QYXRoXG59KSB7XG4gIGxldCBwcmV2aW91c1NwYW47XG4gIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBibG9ja1BhdGgsIHtcbiAgICByZXZlcnNlOiAhMFxuICB9KSlcbiAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpICYmIFBhdGguaXNCZWZvcmUoY2hpbGRQYXRoLCBzcGFuUGF0aCkpIHtcbiAgICAgIHByZXZpb3VzU3BhbiA9IGNoaWxkO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICByZXR1cm4gcHJldmlvdXNTcGFuO1xufVxuZnVuY3Rpb24gZ2V0TmV4dFNwYW4oe1xuICBlZGl0b3IsXG4gIGJsb2NrUGF0aCxcbiAgc3BhblBhdGhcbn0pIHtcbiAgbGV0IG5leHRTcGFuO1xuICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoKSlcbiAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpICYmIFBhdGguaXNBZnRlcihjaGlsZFBhdGgsIHNwYW5QYXRoKSkge1xuICAgICAgbmV4dFNwYW4gPSBjaGlsZDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgcmV0dXJuIG5leHRTcGFuO1xufVxuY29uc3QgZGVidWckNiA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aFBvcnRhYmxlVGV4dE1hcmtNb2RlbFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhQb3J0YWJsZVRleHRNYXJrTW9kZWwoZWRpdG9yQWN0b3IsIHR5cGVzKSB7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBseTogYXBwbHkyLFxuICAgICAgbm9ybWFsaXplTm9kZVxuICAgIH0gPSBlZGl0b3IsIGRlY29yYXRvcnMgPSB0eXBlcy5kZWNvcmF0b3JzLm1hcCgodCkgPT4gdC52YWx1ZSk7XG4gICAgcmV0dXJuIGVkaXRvci5ub3JtYWxpemVOb2RlID0gKG5vZGVFbnRyeSkgPT4ge1xuICAgICAgY29uc3QgW25vZGUsIHBhdGhdID0gbm9kZUVudHJ5O1xuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhub2RlKSkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBwYXRoKTtcbiAgICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgICBjb25zdCBuZXh0Tm9kZSA9IG5vZGUuY2hpbGRyZW5bY2hpbGRQYXRoWzFdICsgMV07XG4gICAgICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSAmJiBlZGl0b3IuaXNUZXh0U3BhbihuZXh0Tm9kZSkgJiYgY2hpbGQubWFya3M/LmV2ZXJ5KChtYXJrKSA9PiBuZXh0Tm9kZS5tYXJrcz8uaW5jbHVkZXMobWFyaykpICYmIG5leHROb2RlLm1hcmtzPy5ldmVyeSgobWFyaykgPT4gY2hpbGQubWFya3M/LmluY2x1ZGVzKG1hcmspKSkge1xuICAgICAgICAgICAgZGVidWckNihcIk1lcmdpbmcgc3BhbnNcIiwgSlNPTi5zdHJpbmdpZnkoY2hpbGQsIG51bGwsIDIpLCBKU09OLnN0cmluZ2lmeShuZXh0Tm9kZSwgbnVsbCwgMikpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5tZXJnZU5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICBhdDogW2NoaWxkUGF0aFswXSwgY2hpbGRQYXRoWzFdICsgMV0sXG4gICAgICAgICAgICAgIHZvaWRzOiAhMFxuICAgICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpICYmICFBcnJheS5pc0FycmF5KG5vZGUubWFya0RlZnMpKSB7XG4gICAgICAgIGRlYnVnJDYoXCJBZGRpbmcgLm1hcmtEZWZzIHRvIGJsb2NrIG5vZGVcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrRGVmczogW11cbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKG5vZGUpICYmICFBcnJheS5pc0FycmF5KG5vZGUubWFya3MpKSB7XG4gICAgICAgIGRlYnVnJDYoXCJBZGRpbmcgLm1hcmtzIHRvIHNwYW4gbm9kZVwiKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIG1hcmtzOiBbXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4obm9kZSkpIHtcbiAgICAgICAgY29uc3QgYmxvY2tQYXRoID0gUGF0aC5wYXJlbnQocGF0aCksIFtibG9ja10gPSBFZGl0b3Iubm9kZShlZGl0b3IsIGJsb2NrUGF0aCksIGRlY29yYXRvcnMyID0gdHlwZXMuZGVjb3JhdG9ycy5tYXAoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLnZhbHVlKSwgYW5ub3RhdGlvbnMgPSBub2RlLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzMi5pbmNsdWRlcyhtYXJrKSk7XG4gICAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIG5vZGUudGV4dCA9PT0gXCJcIiAmJiBhbm5vdGF0aW9ucyAmJiBhbm5vdGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGVidWckNihcIlJlbW92aW5nIGFubm90YXRpb25zIGZyb20gZW1wdHkgc3BhbiBub2RlXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbWFya3M6IG5vZGUubWFya3M/LmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9yczIuaW5jbHVkZXMobWFyaykpXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhub2RlKSkge1xuICAgICAgICBjb25zdCBkZWNvcmF0b3JzMiA9IHR5cGVzLmRlY29yYXRvcnMubWFwKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci52YWx1ZSk7XG4gICAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBwYXRoKSlcbiAgICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrcyA9IGNoaWxkLm1hcmtzID8/IFtdLCBvcnBoYW5lZEFubm90YXRpb25zID0gbWFya3MuZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9yczIuaW5jbHVkZXMobWFyaykgJiYgIW5vZGUubWFya0RlZnM/LmZpbmQoKGRlZikgPT4gZGVmLl9rZXkgPT09IG1hcmspKTtcbiAgICAgICAgICAgIGlmIChvcnBoYW5lZEFubm90YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgZGVidWckNihcIlJlbW92aW5nIG9ycGhhbmVkIGFubm90YXRpb25zIGZyb20gc3BhbiBub2RlXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgbWFya3M6IG1hcmtzLmZpbHRlcigobWFyaykgPT4gIW9ycGhhbmVkQW5ub3RhdGlvbnMuaW5jbHVkZXMobWFyaykpXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBhdDogY2hpbGRQYXRoXG4gICAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3Bhbihub2RlKSkge1xuICAgICAgICBjb25zdCBibG9ja1BhdGggPSBQYXRoLnBhcmVudChwYXRoKSwgW2Jsb2NrXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgYmxvY2tQYXRoKTtcbiAgICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhibG9jaykpIHtcbiAgICAgICAgICBjb25zdCBkZWNvcmF0b3JzMiA9IHR5cGVzLmRlY29yYXRvcnMubWFwKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci52YWx1ZSksIG1hcmtzID0gbm9kZS5tYXJrcyA/PyBbXSwgb3JwaGFuZWRBbm5vdGF0aW9ucyA9IG1hcmtzLmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMyLmluY2x1ZGVzKG1hcmspICYmICFibG9jay5tYXJrRGVmcz8uZmluZCgoZGVmKSA9PiBkZWYuX2tleSA9PT0gbWFyaykpO1xuICAgICAgICAgIGlmIChvcnBoYW5lZEFubm90YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGRlYnVnJDYoXCJSZW1vdmluZyBvcnBoYW5lZCBhbm5vdGF0aW9ucyBmcm9tIHNwYW4gbm9kZVwiKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIG1hcmtzOiBtYXJrcy5maWx0ZXIoKG1hcmspID0+ICFvcnBoYW5lZEFubm90YXRpb25zLmluY2x1ZGVzKG1hcmspKVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IG1hcmtEZWZzID0gbm9kZS5tYXJrRGVmcyA/PyBbXSwgbWFya0RlZktleXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLCBuZXdNYXJrRGVmcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG1hcmtEZWYgb2YgbWFya0RlZnMpXG4gICAgICAgICAgbWFya0RlZktleXMuaGFzKG1hcmtEZWYuX2tleSkgfHwgKG1hcmtEZWZLZXlzLmFkZChtYXJrRGVmLl9rZXkpLCBuZXdNYXJrRGVmcy5wdXNoKG1hcmtEZWYpKTtcbiAgICAgICAgaWYgKG1hcmtEZWZzLmxlbmd0aCAhPT0gbmV3TWFya0RlZnMubGVuZ3RoKSB7XG4gICAgICAgICAgZGVidWckNihcIlJlbW92aW5nIGR1cGxpY2F0ZSBtYXJrRGVmc1wiKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hcmtEZWZzOiBuZXdNYXJrRGVmc1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkgJiYgIWVkaXRvci5vcGVyYXRpb25zLnNvbWUoKG9wKSA9PiBvcC50eXBlID09PSBcIm1lcmdlX25vZGVcIiAmJiBcIm1hcmtEZWZzXCIgaW4gb3AucHJvcGVydGllcyAmJiBvcC5wYXRoLmxlbmd0aCA9PT0gMSkpIHtcbiAgICAgICAgY29uc3QgbmV3TWFya0RlZnMgPSAobm9kZS5tYXJrRGVmcyB8fCBbXSkuZmlsdGVyKChkZWYpID0+IG5vZGUuY2hpbGRyZW4uZmluZCgoY2hpbGQpID0+IFRleHQuaXNUZXh0KGNoaWxkKSAmJiBBcnJheS5pc0FycmF5KGNoaWxkLm1hcmtzKSAmJiBjaGlsZC5tYXJrcy5pbmNsdWRlcyhkZWYuX2tleSkpKTtcbiAgICAgICAgaWYgKG5vZGUubWFya0RlZnMgJiYgIWlzRXF1YWwobmV3TWFya0RlZnMsIG5vZGUubWFya0RlZnMpKSB7XG4gICAgICAgICAgZGVidWckNihcIlJlbW92aW5nIG1hcmtEZWYgbm90IGluIHVzZVwiKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hcmtEZWZzOiBuZXdNYXJrRGVmc1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vcm1hbGl6ZU5vZGUobm9kZUVudHJ5KTtcbiAgICB9LCBlZGl0b3IuYXBwbHkgPSAob3ApID0+IHtcbiAgICAgIGlmIChpc0NoYW5naW5nUmVtb3RlbHkoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRvaW5nKGVkaXRvcikgfHwgaXNSZWRvaW5nKGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG9wLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiICYmIEVkaXRvci5tYXJrcyhlZGl0b3IpICYmIG9wLnByb3BlcnRpZXMgJiYgb3AubmV3UHJvcGVydGllcyAmJiBvcC5wcm9wZXJ0aWVzLmFuY2hvciAmJiBvcC5wcm9wZXJ0aWVzLmZvY3VzICYmIG9wLm5ld1Byb3BlcnRpZXMuYW5jaG9yICYmIG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNTZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IFJhbmdlLmlzQ29sbGFwc2VkKHtcbiAgICAgICAgICBhbmNob3I6IG9wLnByb3BlcnRpZXMuYW5jaG9yLFxuICAgICAgICAgIGZvY3VzOiBvcC5wcm9wZXJ0aWVzLmZvY3VzXG4gICAgICAgIH0pLCBuZXdTZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IFJhbmdlLmlzQ29sbGFwc2VkKHtcbiAgICAgICAgICBhbmNob3I6IG9wLm5ld1Byb3BlcnRpZXMuYW5jaG9yLFxuICAgICAgICAgIGZvY3VzOiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJldmlvdXNTZWxlY3Rpb25Jc0NvbGxhcHNlZCAmJiBuZXdTZWxlY3Rpb25Jc0NvbGxhcHNlZCkge1xuICAgICAgICAgIGNvbnN0IGZvY3VzU3BhbiA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbW9kZTogXCJsb3dlc3RcIixcbiAgICAgICAgICAgIGF0OiBvcC5wcm9wZXJ0aWVzLmZvY3VzLFxuICAgICAgICAgICAgbWF0Y2g6IChuKSA9PiBlZGl0b3IuaXNUZXh0U3BhbihuKSxcbiAgICAgICAgICAgIHZvaWRzOiAhMVxuICAgICAgICAgIH0pKVswXT8uWzBdLCBuZXdGb2N1c1NwYW4gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1vZGU6IFwibG93ZXN0XCIsXG4gICAgICAgICAgICBhdDogb3AubmV3UHJvcGVydGllcy5mb2N1cyxcbiAgICAgICAgICAgIG1hdGNoOiAobikgPT4gZWRpdG9yLmlzVGV4dFNwYW4obiksXG4gICAgICAgICAgICB2b2lkczogITFcbiAgICAgICAgICB9KSlbMF0/LlswXSwgbW92ZWRUb05leHRTcGFuID0gZm9jdXNTcGFuICYmIG5ld0ZvY3VzU3BhbiAmJiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMF0gPT09IG9wLnByb3BlcnRpZXMuZm9jdXMucGF0aFswXSAmJiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMV0gPT09IG9wLnByb3BlcnRpZXMuZm9jdXMucGF0aFsxXSArIDEgJiYgZm9jdXNTcGFuLnRleHQubGVuZ3RoID09PSBvcC5wcm9wZXJ0aWVzLmZvY3VzLm9mZnNldCAmJiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzLm9mZnNldCA9PT0gMCwgbW92ZWRUb1ByZXZpb3VzU3BhbiA9IGZvY3VzU3BhbiAmJiBuZXdGb2N1c1NwYW4gJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cy5wYXRoWzBdID09PSBvcC5wcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMF0gJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cy5wYXRoWzFdID09PSBvcC5wcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMV0gLSAxICYmIG9wLnByb3BlcnRpZXMuZm9jdXMub2Zmc2V0ID09PSAwICYmIG5ld0ZvY3VzU3Bhbi50ZXh0Lmxlbmd0aCA9PT0gb3AubmV3UHJvcGVydGllcy5mb2N1cy5vZmZzZXQ7XG4gICAgICAgICAgaWYgKG1vdmVkVG9OZXh0U3BhbiB8fCBtb3ZlZFRvUHJldmlvdXNTcGFuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJpbnNlcnRfbm9kZVwiKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBzZWxlY3Rpb25cbiAgICAgICAgfSA9IGVkaXRvcjtcbiAgICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICAgIGNvbnN0IFtfYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNlbGVjdGlvbiwge1xuICAgICAgICAgICAgZGVwdGg6IDFcbiAgICAgICAgICB9KSwgcHJldmlvdXNTcGFuID0gZ2V0UHJldmlvdXNTcGFuKHtcbiAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgIGJsb2NrUGF0aCxcbiAgICAgICAgICAgIHNwYW5QYXRoOiBvcC5wYXRoXG4gICAgICAgICAgfSksIHByZXZpb3VzU3BhbkFubm90YXRpb25zID0gcHJldmlvdXNTcGFuID8gcHJldmlvdXNTcGFuLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKSA6IFtdLCBuZXh0U3BhbiA9IGdldE5leHRTcGFuKHtcbiAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgIGJsb2NrUGF0aCxcbiAgICAgICAgICAgIHNwYW5QYXRoOiBbb3AucGF0aFswXSwgb3AucGF0aFsxXSAtIDFdXG4gICAgICAgICAgfSksIG5leHRTcGFuQW5ub3RhdGlvbnMgPSBuZXh0U3BhbiA/IG5leHRTcGFuLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKSA6IFtdLCBhbm5vdGF0aW9uc0VuZGluZyA9IHByZXZpb3VzU3BhbkFubm90YXRpb25zPy5maWx0ZXIoKGFubm90YXRpb24pID0+ICFuZXh0U3BhbkFubm90YXRpb25zPy5pbmNsdWRlcyhhbm5vdGF0aW9uKSkgPz8gW10sIGF0VGhlRW5kT2ZBbm5vdGF0aW9uID0gYW5ub3RhdGlvbnNFbmRpbmcubGVuZ3RoID4gMDtcbiAgICAgICAgICBpZiAoYXRUaGVFbmRPZkFubm90YXRpb24gJiYgaXNQb3J0YWJsZVRleHRTcGFuKG9wLm5vZGUpICYmIG9wLm5vZGUubWFya3M/LnNvbWUoKG1hcmspID0+IGFubm90YXRpb25zRW5kaW5nLmluY2x1ZGVzKG1hcmspKSkge1xuICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgLi4ub3Aubm9kZSxcbiAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICBtYXJrczogb3Aubm9kZS5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhYW5ub3RhdGlvbnNFbmRpbmcuaW5jbHVkZXMobWFyaykpID8/IFtdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYW5ub3RhdGlvbnNTdGFydGluZyA9IG5leHRTcGFuQW5ub3RhdGlvbnM/LmZpbHRlcigoYW5ub3RhdGlvbikgPT4gIXByZXZpb3VzU3BhbkFubm90YXRpb25zPy5pbmNsdWRlcyhhbm5vdGF0aW9uKSkgPz8gW10sIGF0VGhlU3RhcnRPZkFubm90YXRpb24gPSBhbm5vdGF0aW9uc1N0YXJ0aW5nLmxlbmd0aCA+IDA7XG4gICAgICAgICAgaWYgKGF0VGhlU3RhcnRPZkFubm90YXRpb24gJiYgaXNQb3J0YWJsZVRleHRTcGFuKG9wLm5vZGUpICYmIG9wLm5vZGUubWFya3M/LnNvbWUoKG1hcmspID0+IGFubm90YXRpb25zU3RhcnRpbmcuaW5jbHVkZXMobWFyaykpKSB7XG4gICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAuLi5vcC5ub2RlLFxuICAgICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgICAgIG1hcmtzOiBvcC5ub2RlLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFhbm5vdGF0aW9uc1N0YXJ0aW5nLmluY2x1ZGVzKG1hcmspKSA/PyBbXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG5leHRTcGFuRGVjb3JhdG9ycyA9IG5leHRTcGFuPy5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKSA/PyBbXTtcbiAgICAgICAgICBpZiAobmV4dFNwYW5EZWNvcmF0b3JzLmxlbmd0aCA+IDAgJiYgYXRUaGVFbmRPZkFubm90YXRpb24gJiYgIWF0VGhlU3RhcnRPZkFubm90YXRpb24gJiYgaXNQb3J0YWJsZVRleHRTcGFuKG9wLm5vZGUpICYmIG9wLm5vZGUubWFya3M/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgLi4ub3Aubm9kZSxcbiAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICBtYXJrczogbmV4dFNwYW5EZWNvcmF0b3JzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcC50eXBlID09PSBcImluc2VydF90ZXh0XCIpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHNlbGVjdGlvblxuICAgICAgICB9ID0gZWRpdG9yLCBjb2xsYXBzZWRTZWxlY3Rpb24gPSBzZWxlY3Rpb24gPyBSYW5nZS5pc0NvbGxhcHNlZChzZWxlY3Rpb24pIDogITE7XG4gICAgICAgIGlmIChzZWxlY3Rpb24gJiYgY29sbGFwc2VkU2VsZWN0aW9uKSB7XG4gICAgICAgICAgY29uc3QgW19ibG9jaywgYmxvY2tQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgc2VsZWN0aW9uLCB7XG4gICAgICAgICAgICBkZXB0aDogMVxuICAgICAgICAgIH0pLCBbc3Bhbiwgc3BhblBhdGhdID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtb2RlOiBcImxvd2VzdFwiLFxuICAgICAgICAgICAgYXQ6IHNlbGVjdGlvbi5mb2N1cyxcbiAgICAgICAgICAgIG1hdGNoOiAobikgPT4gZWRpdG9yLmlzVGV4dFNwYW4obiksXG4gICAgICAgICAgICB2b2lkczogITFcbiAgICAgICAgICB9KSlbMF0gPz8gW3ZvaWQgMCwgdm9pZCAwXSwgbWFya3MgPSBzcGFuLm1hcmtzID8/IFtdLCBtYXJrc1dpdGhvdXRBbm5vdGF0aW9ucyA9IG1hcmtzLmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSksIHNwYW5IYXNBbm5vdGF0aW9ucyA9IG1hcmtzLmxlbmd0aCA+IG1hcmtzV2l0aG91dEFubm90YXRpb25zLmxlbmd0aCwgc3BhbklzRW1wdHkgPSBzcGFuLnRleHQubGVuZ3RoID09PSAwLCBhdFRoZUJlZ2lubmluZ09mU3BhbiA9IHNlbGVjdGlvbi5hbmNob3Iub2Zmc2V0ID09PSAwLCBhdFRoZUVuZE9mU3BhbiA9IHNlbGVjdGlvbi5hbmNob3Iub2Zmc2V0ID09PSBzcGFuLnRleHQubGVuZ3RoLCBwcmV2aW91c1NwYW4gPSBnZXRQcmV2aW91c1NwYW4oe1xuICAgICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgICAgYmxvY2tQYXRoLFxuICAgICAgICAgICAgc3BhblBhdGhcbiAgICAgICAgICB9KSwgbmV4dFNwYW4gPSBnZXROZXh0U3Bhbih7XG4gICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICBzcGFuUGF0aFxuICAgICAgICAgIH0pLCBuZXh0U3BhbkFubm90YXRpb25zID0gbmV4dFNwYW4/Lm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKSA/PyBbXSwgc3BhbkFubm90YXRpb25zID0gbWFya3MuZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSksIHByZXZpb3VzU3Bhbkhhc0Fubm90YXRpb25zID0gcHJldmlvdXNTcGFuID8gcHJldmlvdXNTcGFuLm1hcmtzPy5zb21lKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSkgOiAhMSwgcHJldmlvdXNTcGFuSGFzU2FtZUFubm90YXRpb25zID0gcHJldmlvdXNTcGFuID8gcHJldmlvdXNTcGFuLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKS5ldmVyeSgobWFyaykgPT4gbWFya3MuaW5jbHVkZXMobWFyaykpIDogITEsIHByZXZpb3VzU3Bhbkhhc1NhbWVBbm5vdGF0aW9uID0gcHJldmlvdXNTcGFuID8gcHJldmlvdXNTcGFuLm1hcmtzPy5zb21lKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSAmJiBtYXJrcy5pbmNsdWRlcyhtYXJrKSkgOiAhMSwgcHJldmlvdXNTcGFuSGFzU2FtZU1hcmtzID0gcHJldmlvdXNTcGFuID8gcHJldmlvdXNTcGFuLm1hcmtzPy5ldmVyeSgobWFyaykgPT4gbWFya3MuaW5jbHVkZXMobWFyaykpIDogITEsIG5leHRTcGFuU2hhcmVzU29tZUFubm90YXRpb25zID0gc3BhbkFubm90YXRpb25zLnNvbWUoKG1hcmspID0+IG5leHRTcGFuQW5ub3RhdGlvbnM/LmluY2x1ZGVzKG1hcmspKTtcbiAgICAgICAgICBpZiAoc3Bhbkhhc0Fubm90YXRpb25zICYmICFzcGFuSXNFbXB0eSkge1xuICAgICAgICAgICAgaWYgKGF0VGhlQmVnaW5uaW5nT2ZTcGFuKSB7XG4gICAgICAgICAgICAgIGlmIChwcmV2aW91c1NwYW5IYXNTYW1lTWFya3MpIHtcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICAgICAgdGV4dDogb3AudGV4dCxcbiAgICAgICAgICAgICAgICAgIG1hcmtzOiBwcmV2aW91c1NwYW4/Lm1hcmtzID8/IFtdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzU3Bhbkhhc1NhbWVBbm5vdGF0aW9ucykge1xuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBvcC50ZXh0LFxuICAgICAgICAgICAgICAgICAgbWFya3M6IHByZXZpb3VzU3Bhbj8ubWFya3MgPz8gW11cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNTcGFuSGFzU2FtZUFubm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghcHJldmlvdXNTcGFuKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICAgICAgICAgIHRleHQ6IG9wLnRleHQsXG4gICAgICAgICAgICAgICAgICBtYXJrczogW11cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhdFRoZUVuZE9mU3Bhbikge1xuICAgICAgICAgICAgICBpZiAobmV4dFNwYW4gJiYgbmV4dFNwYW5TaGFyZXNTb21lQW5ub3RhdGlvbnMgJiYgbmV4dFNwYW5Bbm5vdGF0aW9ucy5sZW5ndGggPCBzcGFuQW5ub3RhdGlvbnMubGVuZ3RoIHx8ICFuZXh0U3BhblNoYXJlc1NvbWVBbm5vdGF0aW9ucykge1xuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBvcC50ZXh0LFxuICAgICAgICAgICAgICAgICAgbWFya3M6IG5leHRTcGFuPy5tYXJrcyA/PyBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIW5leHRTcGFuKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICAgICAgICAgIHRleHQ6IG9wLnRleHQsXG4gICAgICAgICAgICAgICAgICBtYXJrczogW11cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGF0VGhlQmVnaW5uaW5nT2ZTcGFuICYmICFzcGFuSXNFbXB0eSAmJiBwcmV2aW91c1NwYW4pIHtcbiAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICB0ZXh0OiBvcC50ZXh0LFxuICAgICAgICAgICAgICBtYXJrczogcHJldmlvdXNTcGFuSGFzQW5ub3RhdGlvbnMgPyBbXSA6IChwcmV2aW91c1NwYW4ubWFya3MgPz8gW10pLmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wLnR5cGUgPT09IFwicmVtb3ZlX3RleHRcIikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgc2VsZWN0aW9uXG4gICAgICAgIH0gPSBlZGl0b3I7XG4gICAgICAgIGlmIChzZWxlY3Rpb24gJiYgUmFuZ2UuaXNFeHBhbmRlZChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBzZWxlY3Rpb24sIHtcbiAgICAgICAgICAgIGRlcHRoOiAxXG4gICAgICAgICAgfSksIFtzcGFuLCBzcGFuUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1vZGU6IFwibG93ZXN0XCIsXG4gICAgICAgICAgICBhdDoge1xuICAgICAgICAgICAgICBwYXRoOiBvcC5wYXRoLFxuICAgICAgICAgICAgICBvZmZzZXQ6IG9wLm9mZnNldFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdGNoOiAobikgPT4gZWRpdG9yLmlzVGV4dFNwYW4obiksXG4gICAgICAgICAgICB2b2lkczogITFcbiAgICAgICAgICB9KSlbMF0gPz8gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgICAgICAgICBpZiAoc3BhbiAmJiBibG9jayAmJiBpc1BvcnRhYmxlVGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgICAgICAgY29uc3QgbWFya0RlZnMgPSBibG9jay5tYXJrRGVmcyA/PyBbXSwgbWFya3MgPSBzcGFuLm1hcmtzID8/IFtdLCBzcGFuSGFzQW5ub3RhdGlvbnMgPSBtYXJrcy5zb21lKChtYXJrKSA9PiBtYXJrRGVmcy5maW5kKChtYXJrRGVmKSA9PiBtYXJrRGVmLl9rZXkgPT09IG1hcmspKSwgZGVsZXRpbmdGcm9tVGhlRW5kID0gb3Aub2Zmc2V0ICsgb3AudGV4dC5sZW5ndGggPT09IHNwYW4udGV4dC5sZW5ndGgsIGRlbGV0aW5nQWxsVGV4dCA9IG9wLm9mZnNldCA9PT0gMCAmJiBkZWxldGluZ0Zyb21UaGVFbmQsIHByZXZpb3VzU3BhbiA9IGdldFByZXZpb3VzU3Bhbih7XG4gICAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgICAgYmxvY2tQYXRoLFxuICAgICAgICAgICAgICBzcGFuUGF0aFxuICAgICAgICAgICAgfSksIG5leHRTcGFuID0gZ2V0TmV4dFNwYW4oe1xuICAgICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICAgIGJsb2NrUGF0aCxcbiAgICAgICAgICAgICAgc3BhblBhdGhcbiAgICAgICAgICAgIH0pLCBwcmV2aW91c1NwYW5IYXNTYW1lQW5ub3RhdGlvbiA9IHByZXZpb3VzU3BhbiA/IHByZXZpb3VzU3Bhbi5tYXJrcz8uc29tZSgobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykgJiYgbWFya3MuaW5jbHVkZXMobWFyaykpIDogITEsIG5leHRTcGFuSGFzU2FtZUFubm90YXRpb24gPSBuZXh0U3BhbiA/IG5leHRTcGFuLm1hcmtzPy5zb21lKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSAmJiBtYXJrcy5pbmNsdWRlcyhtYXJrKSkgOiAhMTtcbiAgICAgICAgICAgIGlmIChzcGFuSGFzQW5ub3RhdGlvbnMgJiYgZGVsZXRpbmdBbGxUZXh0ICYmICFwcmV2aW91c1NwYW5IYXNTYW1lQW5ub3RhdGlvbiAmJiAhbmV4dFNwYW5IYXNTYW1lQW5ub3RhdGlvbikge1xuICAgICAgICAgICAgICBjb25zdCBtYXJrc1dpdGhvdXRBbm5vdGF0aW9uTWFya3MgPSAoe1xuICAgICAgICAgICAgICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9XG4gICAgICAgICAgICAgIH0ubWFya3MgfHwgW10pLmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSk7XG4gICAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXBwbHkyKG9wKSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICAgIG1hcmtzOiBtYXJrc1dpdGhvdXRBbm5vdGF0aW9uTWFya3NcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICBhdDogb3AucGF0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcC50eXBlID09PSBcIm1lcmdlX25vZGVcIiAmJiBvcC5wYXRoLmxlbmd0aCA9PT0gMSAmJiBcIm1hcmtEZWZzXCIgaW4gb3AucHJvcGVydGllcyAmJiBvcC5wcm9wZXJ0aWVzLl90eXBlID09PSB0eXBlcy5ibG9jay5uYW1lICYmIEFycmF5LmlzQXJyYXkob3AucHJvcGVydGllcy5tYXJrRGVmcykgJiYgb3AucHJvcGVydGllcy5tYXJrRGVmcy5sZW5ndGggPiAwICYmIG9wLnBhdGhbMF0gLSAxID49IDApIHtcbiAgICAgICAgY29uc3QgW3RhcmdldEJsb2NrLCB0YXJnZXRQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgW29wLnBhdGhbMF0gLSAxXSk7XG4gICAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2sodGFyZ2V0QmxvY2spKSB7XG4gICAgICAgICAgY29uc3Qgb2xkRGVmcyA9IEFycmF5LmlzQXJyYXkodGFyZ2V0QmxvY2subWFya0RlZnMpICYmIHRhcmdldEJsb2NrLm1hcmtEZWZzIHx8IFtdLCBuZXdNYXJrRGVmcyA9IHVuaXEoWy4uLm9sZERlZnMsIC4uLm9wLnByb3BlcnRpZXMubWFya0RlZnNdKTtcbiAgICAgICAgICBkZWJ1ZyQ2KFwiQ29weWluZyBtYXJrRGVmcyBvdmVyIHRvIG1lcmdlZCBibG9ja1wiLCBvcCksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrRGVmczogbmV3TWFya0RlZnNcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogdGFyZ2V0UGF0aCxcbiAgICAgICAgICAgIHZvaWRzOiAhMVxuICAgICAgICAgIH0pLCBhcHBseTIob3ApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwbHkyKG9wKTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5jb25zdCBhZGREZWNvcmF0b3JBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBlZGl0b3IgPSBhY3Rpb24uZWRpdG9yLCBtYXJrID0gYWN0aW9uLmRlY29yYXRvcjtcbiAgaWYgKGVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICBpZiAoUmFuZ2UuaXNFeHBhbmRlZChlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHt9LCB7XG4gICAgICAgIG1hdGNoOiBUZXh0LmlzVGV4dCxcbiAgICAgICAgc3BsaXQ6ICEwLFxuICAgICAgICBoYW5naW5nOiAhMFxuICAgICAgfSk7XG4gICAgICBjb25zdCBzcGxpdFRleHROb2RlcyA9IFJhbmdlLmlzUmFuZ2UoZWRpdG9yLnNlbGVjdGlvbikgPyBbLi4uRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgICAgbWF0Y2g6IFRleHQuaXNUZXh0XG4gICAgICB9KV0gOiBbXTtcbiAgICAgIHNwbGl0VGV4dE5vZGVzLmxlbmd0aCA+IDEgJiYgc3BsaXRUZXh0Tm9kZXMuZXZlcnkoKG5vZGUpID0+IG5vZGVbMF0ubWFya3M/LmluY2x1ZGVzKG1hcmspKSA/IGVkaXRvci5yZW1vdmVNYXJrKG1hcmspIDogc3BsaXRUZXh0Tm9kZXMuZm9yRWFjaCgoW25vZGUsIHBhdGhdKSA9PiB7XG4gICAgICAgIGNvbnN0IG1hcmtzID0gWy4uLihBcnJheS5pc0FycmF5KG5vZGUubWFya3MpID8gbm9kZS5tYXJrcyA6IFtdKS5maWx0ZXIoKGVNYXJrKSA9PiBlTWFyayAhPT0gbWFyayksIG1hcmtdO1xuICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIG1hcmtzXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aCxcbiAgICAgICAgICBtYXRjaDogVGV4dC5pc1RleHQsXG4gICAgICAgICAgc3BsaXQ6ICEwLFxuICAgICAgICAgIGhhbmdpbmc6ICEwXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IFtibG9jaywgYmxvY2tQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgZWRpdG9yLnNlbGVjdGlvbiwge1xuICAgICAgICBkZXB0aDogMVxuICAgICAgfSksIGxvbmVseUVtcHR5U3BhbiA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGVkaXRvci5pc1RleHRTcGFuKGJsb2NrLmNoaWxkcmVuWzBdKSAmJiBibG9jay5jaGlsZHJlblswXS50ZXh0ID09PSBcIlwiID8gYmxvY2suY2hpbGRyZW5bMF0gOiB2b2lkIDA7XG4gICAgICBpZiAobG9uZWx5RW1wdHlTcGFuKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nTWFya3MgPSBsb25lbHlFbXB0eVNwYW4ubWFya3MgPz8gW10sIGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yID0gZXhpc3RpbmdNYXJrcy5maWx0ZXIoKGV4aXN0aW5nTWFyaykgPT4gZXhpc3RpbmdNYXJrICE9PSBtYXJrKTtcbiAgICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogZXhpc3RpbmdNYXJrcy5sZW5ndGggPT09IGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yLmxlbmd0aCA/IFsuLi5leGlzdGluZ01hcmtzLCBtYXJrXSA6IGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogYmxvY2tQYXRoLFxuICAgICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dFNwYW4obm9kZSlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBleGlzdGluZ01hcmtzID0ge1xuICAgICAgICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9XG4gICAgICAgIH0ubWFya3MgfHwgW10sIG1hcmtzID0ge1xuICAgICAgICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9LFxuICAgICAgICAgIG1hcmtzOiBbLi4uZXhpc3RpbmdNYXJrcywgbWFya11cbiAgICAgICAgfTtcbiAgICAgICAgZWRpdG9yLm1hcmtzID0gbWFya3M7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgICAgZWRpdG9yLnNlbGVjdGlvbiA9IHtcbiAgICAgICAgLi4uc2VsZWN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfVxufSwgcmVtb3ZlRGVjb3JhdG9yQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgZWRpdG9yID0gYWN0aW9uLmVkaXRvciwgbWFyayA9IGFjdGlvbi5kZWNvcmF0b3IsIHtcbiAgICBzZWxlY3Rpb25cbiAgfSA9IGVkaXRvcjtcbiAgaWYgKHNlbGVjdGlvbikge1xuICAgIGlmIChSYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpXG4gICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge30sIHtcbiAgICAgICAgbWF0Y2g6IFRleHQuaXNUZXh0LFxuICAgICAgICBzcGxpdDogITAsXG4gICAgICAgIGhhbmdpbmc6ICEwXG4gICAgICB9KSwgZWRpdG9yLnNlbGVjdGlvbiAmJiBbLi4uRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgICAgbWF0Y2g6IFRleHQuaXNUZXh0XG4gICAgICB9KV0uZm9yRWFjaCgoW25vZGUsIHBhdGhdKSA9PiB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW3BhdGhbMF1dO1xuICAgICAgICBFbGVtZW50LmlzRWxlbWVudChibG9jaykgJiYgYmxvY2suY2hpbGRyZW4uaW5jbHVkZXMobm9kZSkgJiYgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogKEFycmF5LmlzQXJyYXkobm9kZS5tYXJrcykgPyBub2RlLm1hcmtzIDogW10pLmZpbHRlcigoZU1hcmspID0+IGVNYXJrICE9PSBtYXJrKSxcbiAgICAgICAgICBfdHlwZTogXCJzcGFuXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNlbGVjdGlvbiwge1xuICAgICAgICBkZXB0aDogMVxuICAgICAgfSksIGxvbmVseUVtcHR5U3BhbiA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGVkaXRvci5pc1RleHRTcGFuKGJsb2NrLmNoaWxkcmVuWzBdKSAmJiBibG9jay5jaGlsZHJlblswXS50ZXh0ID09PSBcIlwiID8gYmxvY2suY2hpbGRyZW5bMF0gOiB2b2lkIDA7XG4gICAgICBpZiAobG9uZWx5RW1wdHlTcGFuKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yID0gKGxvbmVseUVtcHR5U3Bhbi5tYXJrcyA/PyBbXSkuZmlsdGVyKChleGlzdGluZ01hcmspID0+IGV4aXN0aW5nTWFyayAhPT0gbWFyayk7XG4gICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya3M6IGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogYmxvY2tQYXRoLFxuICAgICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dFNwYW4obm9kZSlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBleGlzdGluZ01hcmtzID0ge1xuICAgICAgICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9XG4gICAgICAgIH0ubWFya3MgfHwgW10sIG1hcmtzID0ge1xuICAgICAgICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9LFxuICAgICAgICAgIG1hcmtzOiBleGlzdGluZ01hcmtzLmZpbHRlcigoZU1hcmspID0+IGVNYXJrICE9PSBtYXJrKVxuICAgICAgICB9O1xuICAgICAgICBlZGl0b3IubWFya3MgPSB7XG4gICAgICAgICAgbWFya3M6IG1hcmtzLm1hcmtzLFxuICAgICAgICAgIF90eXBlOiBcInNwYW5cIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uMiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgICBlZGl0b3Iuc2VsZWN0aW9uID0ge1xuICAgICAgICAuLi5zZWxlY3Rpb24yXG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGlzRGVjb3JhdG9yQWN0aXZlKHtcbiAgZWRpdG9yLFxuICBkZWNvcmF0b3Jcbn0pIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3Qgc2VsZWN0ZWRUZXh0Tm9kZXMgPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICBtYXRjaDogVGV4dC5pc1RleHQsXG4gICAgYXQ6IGVkaXRvci5zZWxlY3Rpb25cbiAgfSkpO1xuICByZXR1cm4gc2VsZWN0ZWRUZXh0Tm9kZXMubGVuZ3RoID09PSAwID8gITEgOiBSYW5nZS5pc0V4cGFuZGVkKGVkaXRvci5zZWxlY3Rpb24pID8gc2VsZWN0ZWRUZXh0Tm9kZXMuZXZlcnkoKG4pID0+IHtcbiAgICBjb25zdCBbbm9kZV0gPSBuO1xuICAgIHJldHVybiBub2RlLm1hcmtzPy5pbmNsdWRlcyhkZWNvcmF0b3IpO1xuICB9KSA6ICh7XG4gICAgLi4uRWRpdG9yLm1hcmtzKGVkaXRvcikgfHwge31cbiAgfS5tYXJrcyB8fCBbXSkuaW5jbHVkZXMoZGVjb3JhdG9yKTtcbn1cbmNvbnN0IHRvZ2dsZURlY29yYXRvckFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlzRGVjb3JhdG9yQWN0aXZlKHtcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgZGVjb3JhdG9yOiBhY3Rpb24uZGVjb3JhdG9yXG4gIH0pID8gcmVtb3ZlRGVjb3JhdG9yQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uOiB7XG4gICAgICB0eXBlOiBcImRlY29yYXRvci5yZW1vdmVcIixcbiAgICAgIGVkaXRvcjogYWN0aW9uLmVkaXRvcixcbiAgICAgIGRlY29yYXRvcjogYWN0aW9uLmRlY29yYXRvclxuICAgIH1cbiAgfSkgOiBhZGREZWNvcmF0b3JBY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgY29udGV4dCxcbiAgICBhY3Rpb246IHtcbiAgICAgIHR5cGU6IFwiZGVjb3JhdG9yLmFkZFwiLFxuICAgICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yLFxuICAgICAgZGVjb3JhdG9yOiBhY3Rpb24uZGVjb3JhdG9yXG4gICAgfVxuICB9KTtcbn07XG5kZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhQb3J0YWJsZVRleHRTZWxlY3Rpb25zXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFBvcnRhYmxlVGV4dFNlbGVjdGlvbnMoZWRpdG9yQWN0b3IsIHR5cGVzKSB7XG4gIGxldCBwcmV2U2VsZWN0aW9uID0gbnVsbDtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IGVtaXRQb3J0YWJsZVRleHRTZWxlY3Rpb24gPSAoKSA9PiB7XG4gICAgICBpZiAocHJldlNlbGVjdGlvbiAhPT0gZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgICBsZXQgcHRSYW5nZSA9IG51bGw7XG4gICAgICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBTTEFURV9UT19QT1JUQUJMRV9URVhUX1JBTkdFLmdldChlZGl0b3Iuc2VsZWN0aW9uKTtcbiAgICAgICAgICBpZiAoZXhpc3RpbmcpXG4gICAgICAgICAgICBwdFJhbmdlID0gZXhpc3Rpbmc7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGVkaXRvci5jaGlsZHJlbjtcbiAgICAgICAgICAgIHB0UmFuZ2UgPSB0b1BvcnRhYmxlVGV4dFJhbmdlKHZhbHVlLCBlZGl0b3Iuc2VsZWN0aW9uLCB0eXBlcyksIFNMQVRFX1RPX1BPUlRBQkxFX1RFWFRfUkFOR0Uuc2V0KGVkaXRvci5zZWxlY3Rpb24sIHB0UmFuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdFJhbmdlID8gZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJub3RpZnkuc2VsZWN0aW9uXCIsXG4gICAgICAgICAgc2VsZWN0aW9uOiBwdFJhbmdlXG4gICAgICAgIH0pIDogZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJub3RpZnkuc2VsZWN0aW9uXCIsXG4gICAgICAgICAgc2VsZWN0aW9uOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcHJldlNlbGVjdGlvbiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgfSwge1xuICAgICAgb25DaGFuZ2VcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3Iub25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBvbkNoYW5nZSgpLCBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgICBzZXR1cDogXCJzZXR0aW5nIHVwXCJcbiAgICAgIH0pIHx8IGVtaXRQb3J0YWJsZVRleHRTZWxlY3Rpb24oKTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5jb25zdCBkZWJ1ZyQ1ID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoU2NoZW1hVHlwZXNcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoU2NoZW1hVHlwZXMoe1xuICBlZGl0b3JBY3RvcixcbiAgc2NoZW1hVHlwZXNcbn0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGVkaXRvci5pc1RleHRCbG9jayA9ICh2YWx1ZSkgPT4gaXNQb3J0YWJsZVRleHRUZXh0QmxvY2sodmFsdWUpICYmIHZhbHVlLl90eXBlID09PSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lLCBlZGl0b3IuaXNUZXh0U3BhbiA9ICh2YWx1ZSkgPT4gaXNQb3J0YWJsZVRleHRTcGFuJDEodmFsdWUpICYmIHZhbHVlLl90eXBlID09PSBzY2hlbWFUeXBlcy5zcGFuLm5hbWUsIGVkaXRvci5pc0xpc3RCbG9jayA9ICh2YWx1ZSkgPT4gaXNQb3J0YWJsZVRleHRMaXN0QmxvY2sodmFsdWUpICYmIHZhbHVlLl90eXBlID09PSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lLCBlZGl0b3IuaXNWb2lkID0gKGVsZW1lbnQpID0+IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUgIT09IGVsZW1lbnQuX3R5cGUgJiYgKHNjaGVtYVR5cGVzLmJsb2NrT2JqZWN0cy5tYXAoKG9iaikgPT4gb2JqLm5hbWUpLmluY2x1ZGVzKGVsZW1lbnQuX3R5cGUpIHx8IHNjaGVtYVR5cGVzLmlubGluZU9iamVjdHMubWFwKChvYmopID0+IG9iai5uYW1lKS5pbmNsdWRlcyhlbGVtZW50Ll90eXBlKSksIGVkaXRvci5pc0lubGluZSA9IChlbGVtZW50KSA9PiBzY2hlbWFUeXBlcy5pbmxpbmVPYmplY3RzLm1hcCgob2JqKSA9PiBvYmoubmFtZSkuaW5jbHVkZXMoZWxlbWVudC5fdHlwZSkgJiYgXCJfX2lubGluZVwiIGluIGVsZW1lbnQgJiYgZWxlbWVudC5fX2lubGluZSA9PT0gITA7XG4gICAgY29uc3Qge1xuICAgICAgbm9ybWFsaXplTm9kZVxuICAgIH0gPSBlZGl0b3I7XG4gICAgcmV0dXJuIGVkaXRvci5ub3JtYWxpemVOb2RlID0gKGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBbbm9kZSwgcGF0aF0gPSBlbnRyeTtcbiAgICAgIGlmIChub2RlLl90eXBlID09PSB2b2lkIDAgJiYgcGF0aC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgZGVidWckNShcIlNldHRpbmcgc3BhbiB0eXBlIG9uIHRleHQgbm9kZSB3aXRob3V0IGEgdHlwZVwiKTtcbiAgICAgICAgY29uc3Qgc3BhbiA9IG5vZGUsIGtleSA9IHNwYW4uX2tleSB8fCBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCk7XG4gICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAuLi5zcGFuLFxuICAgICAgICAgIF90eXBlOiBzY2hlbWFUeXBlcy5zcGFuLm5hbWUsXG4gICAgICAgICAgX2tleToga2V5XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aFxuICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLl9rZXkgPT09IHZvaWQgMCAmJiAocGF0aC5sZW5ndGggPT09IDEgfHwgcGF0aC5sZW5ndGggPT09IDIpKSB7XG4gICAgICAgIGRlYnVnJDUoXCJTZXR0aW5nIG1pc3Npbmcga2V5IG9uIGNoaWxkIG5vZGUgd2l0aG91dCBhIGtleVwiKTtcbiAgICAgICAgY29uc3Qga2V5ID0gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpO1xuICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgX2tleToga2V5XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aFxuICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vcm1hbGl6ZU5vZGUoZW50cnkpO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnJDQgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhVdGlsc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhVdGlscyh7XG4gIGVkaXRvckFjdG9yLFxuICBzY2hlbWFUeXBlc1xufSkge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5wdGVFeHBhbmRUb1dvcmQgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHNlbGVjdGlvblxuICAgICAgfSA9IGVkaXRvcjtcbiAgICAgIGlmIChzZWxlY3Rpb24gJiYgIVJhbmdlLmlzRXhwYW5kZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICBjb25zdCBbdGV4dE5vZGVdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBzZWxlY3Rpb24uZm9jdXMsIHtcbiAgICAgICAgICBkZXB0aDogMlxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF0ZXh0Tm9kZSB8fCAhVGV4dC5pc1RleHQodGV4dE5vZGUpIHx8IHRleHROb2RlLnRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZGVidWckNChcInB0ZUV4cGFuZFRvV29yZDogQ2FuJ3QgZXhwYW5kIHRvIHdvcmQgaGVyZVwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGZvY3VzXG4gICAgICAgIH0gPSBzZWxlY3Rpb24sIGZvY3VzT2Zmc2V0ID0gZm9jdXMub2Zmc2V0LCBjaGFyc0JlZm9yZSA9IHRleHROb2RlLnRleHQuc2xpY2UoMCwgZm9jdXNPZmZzZXQpLCBjaGFyc0FmdGVyID0gdGV4dE5vZGUudGV4dC5zbGljZShmb2N1c09mZnNldCwgLTEpLCBpc0VtcHR5ID0gKHN0cikgPT4gc3RyLm1hdGNoKC9cXHMvZyksIHdoaXRlU3BhY2VCZWZvcmVJbmRleCA9IGNoYXJzQmVmb3JlLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5maW5kSW5kZXgoKHN0cikgPT4gaXNFbXB0eShzdHIpKSwgbmV3U3RhcnRPZmZzZXQgPSB3aGl0ZVNwYWNlQmVmb3JlSW5kZXggPiAtMSA/IGNoYXJzQmVmb3JlLmxlbmd0aCAtIHdoaXRlU3BhY2VCZWZvcmVJbmRleCA6IDAsIHdoaXRlU3BhY2VBZnRlckluZGV4ID0gY2hhcnNBZnRlci5zcGxpdChcIlwiKS5maW5kSW5kZXgoKG9iaikgPT4gaXNFbXB0eShvYmopKSwgbmV3RW5kT2Zmc2V0ID0gY2hhcnNCZWZvcmUubGVuZ3RoICsgKHdoaXRlU3BhY2VBZnRlckluZGV4ID4gLTEgPyB3aGl0ZVNwYWNlQWZ0ZXJJbmRleCA6IGNoYXJzQWZ0ZXIubGVuZ3RoICsgMSk7XG4gICAgICAgIGlmICghKG5ld1N0YXJ0T2Zmc2V0ID09PSBuZXdFbmRPZmZzZXQgfHwgTnVtYmVyLmlzTmFOKG5ld1N0YXJ0T2Zmc2V0KSB8fCBOdW1iZXIuaXNOYU4obmV3RW5kT2Zmc2V0KSkpIHtcbiAgICAgICAgICBkZWJ1ZyQ0KFwicHRlRXhwYW5kVG9Xb3JkOiBFeHBhbmRpbmcgdG8gZm9jdXNlZCB3b3JkXCIpLCBUcmFuc2Zvcm1zLnNldFNlbGVjdGlvbihlZGl0b3IsIHtcbiAgICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgICAuLi5zZWxlY3Rpb24uYW5jaG9yLFxuICAgICAgICAgICAgICBvZmZzZXQ6IG5ld1N0YXJ0T2Zmc2V0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICAgICAgLi4uc2VsZWN0aW9uLmZvY3VzLFxuICAgICAgICAgICAgICBvZmZzZXQ6IG5ld0VuZE9mZnNldFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1ZyQ0KFwicHRlRXhwYW5kVG9Xb3JkOiBDYW4ndCBleHBhbmQgdG8gd29yZCBoZXJlXCIpO1xuICAgICAgfVxuICAgIH0sIGVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2sgPSAob3B0aW9ucykgPT4gdG9TbGF0ZVZhbHVlKFt7XG4gICAgICBfdHlwZTogc2NoZW1hVHlwZXMuYmxvY2submFtZSxcbiAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgIHN0eWxlOiBzY2hlbWFUeXBlcy5zdHlsZXNbMF0udmFsdWUgfHwgXCJub3JtYWxcIixcbiAgICAgIC4uLm9wdGlvbnMubGlzdEl0ZW0gPyB7XG4gICAgICAgIGxpc3RJdGVtOiBvcHRpb25zLmxpc3RJdGVtXG4gICAgICB9IDoge30sXG4gICAgICAuLi5vcHRpb25zLmxldmVsID8ge1xuICAgICAgICBsZXZlbDogb3B0aW9ucy5sZXZlbFxuICAgICAgfSA6IHt9LFxuICAgICAgbWFya0RlZnM6IFtdLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICBtYXJrczogb3B0aW9ucy5kZWNvcmF0b3JzLmZpbHRlcigoZGVjb3JhdG9yKSA9PiBzY2hlbWFUeXBlcy5kZWNvcmF0b3JzLmZpbmQoKHtcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KSA9PiB2YWx1ZSA9PT0gZGVjb3JhdG9yKSlcbiAgICAgIH1dXG4gICAgfV0sIHtcbiAgICAgIHNjaGVtYVR5cGVzXG4gICAgfSlbMF0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IHdpdGhQbHVnaW5zID0gKGVkaXRvciwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBlID0gZWRpdG9yLCB7XG4gICAgZWRpdG9yQWN0b3JcbiAgfSA9IG9wdGlvbnMsIHNjaGVtYVR5cGVzID0gZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSwgb3BlcmF0aW9uVG9QYXRjaGVzID0gY3JlYXRlT3BlcmF0aW9uVG9QYXRjaGVzKHNjaGVtYVR5cGVzKSwgd2l0aE9iamVjdEtleXMgPSBjcmVhdGVXaXRoT2JqZWN0S2V5cyhlZGl0b3JBY3Rvciwgc2NoZW1hVHlwZXMpLCB3aXRoU2NoZW1hVHlwZXMgPSBjcmVhdGVXaXRoU2NoZW1hVHlwZXMoe1xuICAgIGVkaXRvckFjdG9yLFxuICAgIHNjaGVtYVR5cGVzXG4gIH0pLCB3aXRoUGF0Y2hlcyA9IGNyZWF0ZVdpdGhQYXRjaGVzKHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBwYXRjaEZ1bmN0aW9uczogb3BlcmF0aW9uVG9QYXRjaGVzLFxuICAgIHNjaGVtYVR5cGVzLFxuICAgIHN1YnNjcmlwdGlvbnM6IG9wdGlvbnMuc3Vic2NyaXB0aW9uc1xuICB9KSwgd2l0aE1heEJsb2NrcyA9IGNyZWF0ZVdpdGhNYXhCbG9ja3MoZWRpdG9yQWN0b3IpLCB3aXRoVW5kb1JlZG8gPSBjcmVhdGVXaXRoVW5kb1JlZG8oe1xuICAgIGVkaXRvckFjdG9yLFxuICAgIGJsb2NrU2NoZW1hVHlwZTogc2NoZW1hVHlwZXMuYmxvY2ssXG4gICAgc3Vic2NyaXB0aW9uczogb3B0aW9ucy5zdWJzY3JpcHRpb25zXG4gIH0pLCB3aXRoUG9ydGFibGVUZXh0TWFya01vZGVsID0gY3JlYXRlV2l0aFBvcnRhYmxlVGV4dE1hcmtNb2RlbChlZGl0b3JBY3Rvciwgc2NoZW1hVHlwZXMpLCB3aXRoUG9ydGFibGVUZXh0QmxvY2tTdHlsZSA9IGNyZWF0ZVdpdGhQb3J0YWJsZVRleHRCbG9ja1N0eWxlKGVkaXRvckFjdG9yLCBzY2hlbWFUeXBlcyksIHdpdGhQbGFjZWhvbGRlckJsb2NrID0gY3JlYXRlV2l0aFBsYWNlaG9sZGVyQmxvY2soZWRpdG9yQWN0b3IpLCB3aXRoVXRpbHMgPSBjcmVhdGVXaXRoVXRpbHMoe1xuICAgIGVkaXRvckFjdG9yLFxuICAgIHNjaGVtYVR5cGVzXG4gIH0pLCB3aXRoUG9ydGFibGVUZXh0U2VsZWN0aW9ucyA9IGNyZWF0ZVdpdGhQb3J0YWJsZVRleHRTZWxlY3Rpb25zKGVkaXRvckFjdG9yLCBzY2hlbWFUeXBlcyk7XG4gIHJldHVybiBjcmVhdGVXaXRoRXZlbnRMaXN0ZW5lcnMoZWRpdG9yQWN0b3IsIG9wdGlvbnMuc3Vic2NyaXB0aW9ucykod2l0aFNjaGVtYVR5cGVzKHdpdGhPYmplY3RLZXlzKHdpdGhQb3J0YWJsZVRleHRNYXJrTW9kZWwod2l0aFBvcnRhYmxlVGV4dEJsb2NrU3R5bGUod2l0aFBsYWNlaG9sZGVyQmxvY2sod2l0aFV0aWxzKHdpdGhNYXhCbG9ja3Mod2l0aFVuZG9SZWRvKHdpdGhQYXRjaGVzKHdpdGhQb3J0YWJsZVRleHRTZWxlY3Rpb25zKGUpKSkpKSkpKSkpKTtcbn0sIGRlYnVnJDMgPSBkZWJ1Z1dpdGhOYW1lKFwiY29tcG9uZW50OlBvcnRhYmxlVGV4dEVkaXRvcjpTbGF0ZUNvbnRhaW5lclwiKSwgc2xhdGVFZGl0b3JzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBjcmVhdGVTbGF0ZUVkaXRvcihjb25maWcpIHtcbiAgY29uc3QgZXhpc3RpbmdTbGF0ZUVkaXRvciA9IHNsYXRlRWRpdG9ycy5nZXQoY29uZmlnLmVkaXRvckFjdG9yKTtcbiAgaWYgKGV4aXN0aW5nU2xhdGVFZGl0b3IpXG4gICAgcmV0dXJuIGRlYnVnJDMoXCJSZXVzaW5nIGV4aXN0aW5nIFNsYXRlIGVkaXRvciBpbnN0YW5jZVwiLCBjb25maWcuZWRpdG9yQWN0b3IuaWQpLCBleGlzdGluZ1NsYXRlRWRpdG9yO1xuICBkZWJ1ZyQzKFwiQ3JlYXRpbmcgbmV3IFNsYXRlIGVkaXRvciBpbnN0YW5jZVwiLCBjb25maWcuZWRpdG9yQWN0b3IuaWQpO1xuICBjb25zdCB1bnN1YnNjcmlwdGlvbnMgPSBbXSwgc3Vic2NyaXB0aW9ucyA9IFtdLCBpbnN0YW5jZSA9IHdpdGhQbHVnaW5zKHdpdGhSZWFjdChjcmVhdGVFZGl0b3IkMSgpKSwge1xuICAgIGVkaXRvckFjdG9yOiBjb25maWcuZWRpdG9yQWN0b3IsXG4gICAgc3Vic2NyaXB0aW9uc1xuICB9KTtcbiAgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuc2V0KGluc3RhbmNlLCB7fSksIEtFWV9UT19TTEFURV9FTEVNRU5ULnNldChpbnN0YW5jZSwge30pO1xuICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiBzdWJzY3JpcHRpb25zKVxuICAgIHVuc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbigpKTtcbiAgY29uc3QgaW5pdGlhbFZhbHVlID0gW2luc3RhbmNlLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgZGVjb3JhdG9yczogW11cbiAgfSldLCBzbGF0ZUVkaXRvciA9IHtcbiAgICBpbnN0YW5jZSxcbiAgICBpbml0aWFsVmFsdWVcbiAgfTtcbiAgcmV0dXJuIHNsYXRlRWRpdG9ycy5zZXQoY29uZmlnLmVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvciksIHNsYXRlRWRpdG9yO1xufVxuY29uc3QgdG9nZ2xlTGlzdEl0ZW1BY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpc0xpc3RJdGVtQWN0aXZlKHtcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgbGlzdEl0ZW06IGFjdGlvbi5saXN0SXRlbVxuICB9KSA/IHJlbW92ZUxpc3RJdGVtQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uOiB7XG4gICAgICAuLi5hY3Rpb24sXG4gICAgICB0eXBlOiBcImxpc3QgaXRlbS5yZW1vdmVcIlxuICAgIH1cbiAgfSkgOiBhZGRMaXN0SXRlbUFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvbjoge1xuICAgICAgLi4uYWN0aW9uLFxuICAgICAgdHlwZTogXCJsaXN0IGl0ZW0uYWRkXCJcbiAgICB9XG4gIH0pO1xufSwgcmVtb3ZlTGlzdEl0ZW1BY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpZiAoIWFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3QgZ3VhcmRzID0gY3JlYXRlR3VhcmRzKGNvbnRleHQpLCBzZWxlY3RlZEJsb2NrcyA9IFsuLi5FZGl0b3Iubm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIGF0OiBhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbixcbiAgICBtYXRjaDogKG5vZGUpID0+IGd1YXJkcy5pc0xpc3RCbG9jayhub2RlKVxuICB9KV07XG4gIGZvciAoY29uc3QgWywgYXRdIG9mIHNlbGVjdGVkQmxvY2tzKVxuICAgIFRyYW5zZm9ybXMudW5zZXROb2RlcyhhY3Rpb24uZWRpdG9yLCBbXCJsaXN0SXRlbVwiLCBcImxldmVsXCJdLCB7XG4gICAgICBhdFxuICAgIH0pO1xufSwgYWRkTGlzdEl0ZW1BY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpZiAoIWFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3QgZ3VhcmRzID0gY3JlYXRlR3VhcmRzKGNvbnRleHQpLCBzZWxlY3RlZEJsb2NrcyA9IFsuLi5FZGl0b3Iubm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIGF0OiBhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbixcbiAgICBtYXRjaDogKG5vZGUpID0+IGd1YXJkcy5pc1RleHRCbG9jayhub2RlKVxuICB9KV07XG4gIGZvciAoY29uc3QgWywgYXRdIG9mIHNlbGVjdGVkQmxvY2tzKVxuICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgICAgbGV2ZWw6IDEsXG4gICAgICBsaXN0SXRlbTogYWN0aW9uLmxpc3RJdGVtXG4gICAgfSwge1xuICAgICAgYXRcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBpc0xpc3RJdGVtQWN0aXZlKHtcbiAgZWRpdG9yLFxuICBsaXN0SXRlbVxufSkge1xuICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuICExO1xuICBjb25zdCBzZWxlY3RlZEJsb2NrcyA9IFsuLi5FZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgfSldO1xuICByZXR1cm4gc2VsZWN0ZWRCbG9ja3MubGVuZ3RoID4gMCA/IHNlbGVjdGVkQmxvY2tzLmV2ZXJ5KChbbm9kZV0pID0+IGVkaXRvci5pc0xpc3RCbG9jayhub2RlKSAmJiBub2RlLmxpc3RJdGVtID09PSBsaXN0SXRlbSkgOiAhMTtcbn1cbmNvbnN0IHRvZ2dsZVN0eWxlQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgaXNTdHlsZUFjdGl2ZSh7XG4gICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yLFxuICAgIHN0eWxlOiBhY3Rpb24uc3R5bGVcbiAgfSkgPyByZW1vdmVTdHlsZUFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvbjoge1xuICAgICAgLi4uYWN0aW9uLFxuICAgICAgdHlwZTogXCJzdHlsZS5yZW1vdmVcIlxuICAgIH1cbiAgfSkgOiBhZGRTdHlsZUFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvbjoge1xuICAgICAgLi4uYWN0aW9uLFxuICAgICAgdHlwZTogXCJzdHlsZS5hZGRcIlxuICAgIH1cbiAgfSk7XG59LCByZW1vdmVTdHlsZUFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBkZWZhdWx0U3R5bGUgPSBjb250ZXh0LnNjaGVtYS5zdHlsZXNbMF0udmFsdWUsIGd1YXJkcyA9IGNyZWF0ZUd1YXJkcyhjb250ZXh0KSwgc2VsZWN0ZWRCbG9ja3MgPSBbLi4uRWRpdG9yLm5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBhdDogYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24sXG4gICAgbWF0Y2g6IChub2RlKSA9PiBndWFyZHMuaXNUZXh0QmxvY2sobm9kZSlcbiAgfSldO1xuICBmb3IgKGNvbnN0IFssIGF0XSBvZiBzZWxlY3RlZEJsb2NrcylcbiAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICAgIHN0eWxlOiBkZWZhdWx0U3R5bGVcbiAgICB9LCB7XG4gICAgICBhdFxuICAgIH0pO1xufSwgYWRkU3R5bGVBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpZiAoIWFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3QgZ3VhcmRzID0gY3JlYXRlR3VhcmRzKGNvbnRleHQpLCBzZWxlY3RlZEJsb2NrcyA9IFsuLi5FZGl0b3Iubm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIGF0OiBhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbixcbiAgICBtYXRjaDogKG5vZGUpID0+IGd1YXJkcy5pc1RleHRCbG9jayhub2RlKVxuICB9KV07XG4gIGZvciAoY29uc3QgWywgYXRdIG9mIHNlbGVjdGVkQmxvY2tzKVxuICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgICAgc3R5bGU6IGFjdGlvbi5zdHlsZVxuICAgIH0sIHtcbiAgICAgIGF0XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gaXNTdHlsZUFjdGl2ZSh7XG4gIGVkaXRvcixcbiAgc3R5bGVcbn0pIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3Qgc2VsZWN0ZWRCbG9ja3MgPSBbLi4uRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLFxuICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pXTtcbiAgcmV0dXJuIHNlbGVjdGVkQmxvY2tzLmxlbmd0aCA+IDAgPyBzZWxlY3RlZEJsb2Nrcy5ldmVyeSgoW25vZGVdKSA9PiBub2RlLnN0eWxlID09PSBzdHlsZSkgOiAhMTtcbn1cbmNvbnN0IGRlYnVnJDIgPSBkZWJ1Z1dpdGhOYW1lKFwiQVBJOmVkaXRhYmxlXCIpO1xuZnVuY3Rpb24gY3JlYXRlRWRpdGFibGVBUEkoZWRpdG9yLCBlZGl0b3JBY3Rvcikge1xuICBjb25zdCB0eXBlcyA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWE7XG4gIHJldHVybiB7XG4gICAgZm9jdXM6ICgpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImZvY3VzXCJcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGJsdXI6ICgpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImJsdXJcIlxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdG9nZ2xlTWFyazogKG1hcmspID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImRlY29yYXRvci50b2dnbGVcIixcbiAgICAgICAgICBkZWNvcmF0b3I6IG1hcmtcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRvZ2dsZUxpc3Q6IChsaXN0SXRlbSkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwibGlzdCBpdGVtLnRvZ2dsZVwiLFxuICAgICAgICAgIGxpc3RJdGVtXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b2dnbGVCbG9ja1N0eWxlOiAoc3R5bGUpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcInN0eWxlLnRvZ2dsZVwiLFxuICAgICAgICAgIHN0eWxlXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICBpc01hcmtBY3RpdmU6IChtYXJrKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gaXNEZWNvcmF0b3JBY3RpdmUoe1xuICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICBkZWNvcmF0b3I6IG1hcmtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihlcnIpLCAhMTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1hcmtzOiAoKSA9PiAoe1xuICAgICAgLi4uRWRpdG9yLm1hcmtzKGVkaXRvcikgfHwge31cbiAgICB9KS5tYXJrcyB8fCBbXSxcbiAgICB1bmRvOiAoKSA9PiBlZGl0b3IudW5kbygpLFxuICAgIHJlZG86ICgpID0+IGVkaXRvci5yZWRvKCksXG4gICAgc2VsZWN0OiAoc2VsZWN0aW9uKSA9PiB7XG4gICAgICBjb25zdCBzbGF0ZVNlbGVjdGlvbiA9IHRvU2xhdGVSYW5nZShzZWxlY3Rpb24sIGVkaXRvcik7XG4gICAgICBzbGF0ZVNlbGVjdGlvbiA/IFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgc2xhdGVTZWxlY3Rpb24pIDogVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICB9LFxuICAgIGZvY3VzQmxvY2s6ICgpID0+IHtcbiAgICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gTm9kZS5kZXNjZW5kYW50KGVkaXRvciwgZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLnNsaWNlKDAsIDEpKTtcbiAgICAgICAgaWYgKGJsb2NrKVxuICAgICAgICAgIHJldHVybiBmcm9tU2xhdGVWYWx1ZShbYmxvY2tdLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSlbMF07XG4gICAgICB9XG4gICAgfSxcbiAgICBmb2N1c0NoaWxkOiAoKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgICBjb25zdCBibG9jayA9IE5vZGUuZGVzY2VuZGFudChlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKSk7XG4gICAgICAgIGlmIChibG9jayAmJiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spKVxuICAgICAgICAgIHJldHVybiBmcm9tU2xhdGVWYWx1ZShbYmxvY2tdLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSlbMF0uY2hpbGRyZW5bZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoWzFdXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluc2VydENoaWxkOiAodHlwZSwgdmFsdWUpID0+IHtcbiAgICAgIGlmICh0eXBlLm5hbWUgIT09IHR5cGVzLnNwYW4ubmFtZSlcbiAgICAgICAgcmV0dXJuIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICB0eXBlOiBcImluc2VydC5pbmxpbmUgb2JqZWN0XCIsXG4gICAgICAgICAgICBpbmxpbmVPYmplY3Q6IHtcbiAgICAgICAgICAgICAgbmFtZTogdHlwZS5uYW1lLFxuICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWRpdG9yXG4gICAgICAgIH0pLCB0b1BvcnRhYmxlVGV4dFJhbmdlKGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCBlZGl0b3Iuc2VsZWN0aW9uLCB0eXBlcyk/LmZvY3VzLnBhdGggPz8gW107XG4gICAgICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBlZGl0b3IgaGFzIG5vIHNlbGVjdGlvblwiKTtcbiAgICAgIGNvbnN0IFtmb2N1c0Jsb2NrXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLnNsaWNlKDAsIDEpLFxuICAgICAgICBtYXRjaDogKG4pID0+IG4uX3R5cGUgPT09IHR5cGVzLmJsb2NrLm5hbWVcbiAgICAgIH0pKVswXSB8fCBbdm9pZCAwXTtcbiAgICAgIGlmICghZm9jdXNCbG9jaylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZm9jdXNlZCB0ZXh0IGJsb2NrXCIpO1xuICAgICAgaWYgKHR5cGUubmFtZSAhPT0gdHlwZXMuc3Bhbi5uYW1lICYmICF0eXBlcy5pbmxpbmVPYmplY3RzLnNvbWUoKHQpID0+IHQubmFtZSA9PT0gdHlwZS5uYW1lKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyB0eXBlIGNhbm5vdCBiZSBpbnNlcnRlZCBhcyBhIGNoaWxkIHRvIGEgdGV4dCBibG9ja1wiKTtcbiAgICAgIGNvbnN0IGNoaWxkID0gdG9TbGF0ZVZhbHVlKFt7XG4gICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgX3R5cGU6IHR5cGVzLmJsb2NrLm5hbWUsXG4gICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICBfdHlwZTogdHlwZS5uYW1lLFxuICAgICAgICAgIC4uLnZhbHVlIHx8IHt9XG4gICAgICAgIH1dXG4gICAgICB9XSwge1xuICAgICAgICBzY2hlbWFUeXBlczogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYVxuICAgICAgfSlbMF0uY2hpbGRyZW5bMF0sIGZvY3VzQ2hpbGRQYXRoID0gZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLnNsaWNlKDAsIDIpLCBpc1NwYW5Ob2RlID0gY2hpbGQuX3R5cGUgPT09IHR5cGVzLnNwYW4ubmFtZSwgZm9jdXNOb2RlID0gTm9kZS5nZXQoZWRpdG9yLCBmb2N1c0NoaWxkUGF0aCk7XG4gICAgICByZXR1cm4gaXNTcGFuTm9kZSAmJiBmb2N1c05vZGUuX3R5cGUgIT09IHR5cGVzLnNwYW4ubmFtZSAmJiAoZGVidWckMihcIkluc2VydGluZyBzcGFuIGNoaWxkIG5leHQgdG8gaW5saW5lIG9iamVjdCBjaGlsZCwgbW92aW5nIHNlbGVjdGlvbiArIDFcIiksIGVkaXRvci5tb3ZlKHtcbiAgICAgICAgZGlzdGFuY2U6IDEsXG4gICAgICAgIHVuaXQ6IFwiY2hhcmFjdGVyXCJcbiAgICAgIH0pKSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGNoaWxkLCB7XG4gICAgICAgIHNlbGVjdDogITAsXG4gICAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uXG4gICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCksIHRvUG9ydGFibGVUZXh0UmFuZ2UoZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIGVkaXRvci5zZWxlY3Rpb24sIHR5cGVzKT8uZm9jdXMucGF0aCB8fCBbXTtcbiAgICB9LFxuICAgIGluc2VydEJsb2NrOiAodHlwZSwgdmFsdWUpID0+IChlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgdHlwZTogXCJpbnNlcnQuYmxvY2sgb2JqZWN0XCIsXG4gICAgICAgIGJsb2NrT2JqZWN0OiB7XG4gICAgICAgICAgbmFtZTogdHlwZS5uYW1lLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIHBsYWNlbWVudDogXCJhdXRvXCJcbiAgICAgIH0sXG4gICAgICBlZGl0b3JcbiAgICB9KSwgdG9Qb3J0YWJsZVRleHRSYW5nZShmcm9tU2xhdGVWYWx1ZShlZGl0b3IuY2hpbGRyZW4sIHR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKSwgZWRpdG9yLnNlbGVjdGlvbiwgdHlwZXMpPy5mb2N1cy5wYXRoID8/IFtdKSxcbiAgICBoYXNCbG9ja1N0eWxlOiAoc3R5bGUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBpc1N0eWxlQWN0aXZlKHtcbiAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgc3R5bGVcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFzTGlzdFN0eWxlOiAobGlzdEl0ZW0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBpc0xpc3RJdGVtQWN0aXZlKHtcbiAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgbGlzdEl0ZW1cbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNWb2lkOiAoZWxlbWVudCkgPT4gIVt0eXBlcy5ibG9jay5uYW1lLCB0eXBlcy5zcGFuLm5hbWVdLmluY2x1ZGVzKGVsZW1lbnQuX3R5cGUpLFxuICAgIGZpbmRCeVBhdGg6IChwYXRoKSA9PiB7XG4gICAgICBjb25zdCBzbGF0ZVBhdGggPSB0b1NsYXRlUmFuZ2Uoe1xuICAgICAgICBmb2N1czoge1xuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH1cbiAgICAgIH0sIGVkaXRvcik7XG4gICAgICBpZiAoc2xhdGVQYXRoKSB7XG4gICAgICAgIGNvbnN0IFtibG9jaywgYmxvY2tQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgc2xhdGVQYXRoLmZvY3VzLnBhdGguc2xpY2UoMCwgMSkpO1xuICAgICAgICBpZiAoYmxvY2sgJiYgYmxvY2tQYXRoICYmIHR5cGVvZiBibG9jay5fa2V5ID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDEgJiYgc2xhdGVQYXRoLmZvY3VzLnBhdGgubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIFtmcm9tU2xhdGVWYWx1ZShbYmxvY2tdLCB0eXBlcy5ibG9jay5uYW1lKVswXSwgW3tcbiAgICAgICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICAgICAgfV1dO1xuICAgICAgICAgIGNvbnN0IHB0QmxvY2sgPSBmcm9tU2xhdGVWYWx1ZShbYmxvY2tdLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSlbMF07XG4gICAgICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhwdEJsb2NrKSkge1xuICAgICAgICAgICAgY29uc3QgcHRDaGlsZCA9IHB0QmxvY2suY2hpbGRyZW5bc2xhdGVQYXRoLmZvY3VzLnBhdGhbMV1dO1xuICAgICAgICAgICAgaWYgKHB0Q2hpbGQpXG4gICAgICAgICAgICAgIHJldHVybiBbcHRDaGlsZCwgW3tcbiAgICAgICAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgICAgIF9rZXk6IHB0Q2hpbGQuX2tleVxuICAgICAgICAgICAgICB9XV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgICB9LFxuICAgIGZpbmRET01Ob2RlOiAoZWxlbWVudCkgPT4ge1xuICAgICAgbGV0IG5vZGU7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBbaXRlbV0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBhdDogW10sXG4gICAgICAgICAgbWF0Y2g6IChuKSA9PiBuLl9rZXkgPT09IGVsZW1lbnQuX2tleVxuICAgICAgICB9KSB8fCBbXSlbMF0gfHwgW3ZvaWQgMF07XG4gICAgICAgIG5vZGUgPSBSZWFjdEVkaXRvci50b0RPTU5vZGUoZWRpdG9yLCBpdGVtKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICBhY3RpdmVBbm5vdGF0aW9uczogKCkgPT4ge1xuICAgICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5sZW5ndGggPCAyKVxuICAgICAgICByZXR1cm4gW107XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBhY3RpdmVBbm5vdGF0aW9ucyA9IFtdLCBzcGFucyA9IEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgICAgICBtYXRjaDogKG5vZGUpID0+IFRleHQuaXNUZXh0KG5vZGUpICYmIG5vZGUubWFya3MgIT09IHZvaWQgMCAmJiBBcnJheS5pc0FycmF5KG5vZGUubWFya3MpICYmIG5vZGUubWFya3MubGVuZ3RoID4gMFxuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChjb25zdCBbc3BhbiwgcGF0aF0gb2Ygc3BhbnMpIHtcbiAgICAgICAgICBjb25zdCBbYmxvY2tdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBwYXRoLCB7XG4gICAgICAgICAgICBkZXB0aDogMVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2subWFya0RlZnM/LmZvckVhY2goKGRlZikgPT4ge1xuICAgICAgICAgICAgVGV4dC5pc1RleHQoc3BhbikgJiYgc3Bhbi5tYXJrcyAmJiBBcnJheS5pc0FycmF5KHNwYW4ubWFya3MpICYmIHNwYW4ubWFya3MuaW5jbHVkZXMoZGVmLl9rZXkpICYmIGFjdGl2ZUFubm90YXRpb25zLnB1c2goZGVmKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlQW5ub3RhdGlvbnM7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNBbm5vdGF0aW9uQWN0aXZlOiAoYW5ub3RhdGlvblR5cGUpID0+IGlzQW5ub3RhdGlvbkFjdGl2ZSh7XG4gICAgICBlZGl0b3IsXG4gICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgIG5hbWU6IGFubm90YXRpb25UeXBlXG4gICAgICB9XG4gICAgfSksXG4gICAgYWRkQW5ub3RhdGlvbjogKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICBsZXQgcGF0aHM7XG4gICAgICByZXR1cm4gRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgcGF0aHMgPSBhZGRBbm5vdGF0aW9uQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIGtleUdlbmVyYXRvcjogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcixcbiAgICAgICAgICAgIHNjaGVtYTogdHlwZXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgICAgdHlwZTogXCJhbm5vdGF0aW9uLmFkZFwiLFxuICAgICAgICAgICAgYW5ub3RhdGlvbjoge1xuICAgICAgICAgICAgICBuYW1lOiB0eXBlLm5hbWUsXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSA/PyB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCksIHBhdGhzO1xuICAgIH0sXG4gICAgZGVsZXRlOiAoc2VsZWN0aW9uLCBvcHRpb25zKSA9PiB7XG4gICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdG9TbGF0ZVJhbmdlKHNlbGVjdGlvbiwgZWRpdG9yKTtcbiAgICAgICAgaWYgKCEocmFuZ2UgJiYgcmFuZ2UuYW5jaG9yLnBhdGgubGVuZ3RoID4gMCAmJiByYW5nZS5mb2N1cy5wYXRoLmxlbmd0aCA+IDApKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcmFuZ2VcIik7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgIGlmICghb3B0aW9ucz8ubW9kZSB8fCBvcHRpb25zPy5tb2RlID09PSBcInNlbGVjdGVkXCIpIHtcbiAgICAgICAgICAgIGRlYnVnJDIoXCJEZWxldGluZyBjb250ZW50IGluIHNlbGVjdGlvblwiKSwgVHJhbnNmb3Jtcy5kZWxldGUoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIGF0OiByYW5nZSxcbiAgICAgICAgICAgICAgaGFuZ2luZzogITAsXG4gICAgICAgICAgICAgIHZvaWRzOiAhMFxuICAgICAgICAgICAgfSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRpb25zPy5tb2RlID09PSBcImJsb2Nrc1wiICYmIChkZWJ1ZyQyKFwiRGVsZXRpbmcgYmxvY2tzIHRvdWNoZWQgYnkgc2VsZWN0aW9uXCIpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgYXQ6IHJhbmdlLFxuICAgICAgICAgICAgdm9pZHM6ICEwLFxuICAgICAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkgfHwgIWVkaXRvci5pc1RleHRCbG9jayhub2RlKSAmJiBFbGVtZW50LmlzRWxlbWVudChub2RlKVxuICAgICAgICAgIH0pKSwgb3B0aW9ucz8ubW9kZSA9PT0gXCJjaGlsZHJlblwiICYmIChkZWJ1ZyQyKFwiRGVsZXRpbmcgY2hpbGRyZW4gdG91Y2hlZCBieSBzZWxlY3Rpb25cIiksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBhdDogcmFuZ2UsXG4gICAgICAgICAgICB2b2lkczogITAsXG4gICAgICAgICAgICBtYXRjaDogKG5vZGUpID0+IG5vZGUuX3R5cGUgPT09IHR5cGVzLnNwYW4ubmFtZSB8fCAvLyBUZXh0IGNoaWxkcmVuXG4gICAgICAgICAgICAhZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpICYmIEVsZW1lbnQuaXNFbGVtZW50KG5vZGUpXG4gICAgICAgICAgfSkpLCBlZGl0b3IuY2hpbGRyZW4ubGVuZ3RoID09PSAwICYmIChlZGl0b3IuY2hpbGRyZW4gPSBbZWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgICAgICAgICBkZWNvcmF0b3JzOiBbXVxuICAgICAgICAgIH0pXSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVBbm5vdGF0aW9uOiAodHlwZSkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiYW5ub3RhdGlvbi5yZW1vdmVcIixcbiAgICAgICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiB0eXBlLm5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRTZWxlY3Rpb246ICgpID0+IHtcbiAgICAgIGxldCBwdFJhbmdlID0gbnVsbDtcbiAgICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRS5nZXQoZWRpdG9yLnNlbGVjdGlvbik7XG4gICAgICAgIGlmIChleGlzdGluZylcbiAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIHB0UmFuZ2UgPSB0b1BvcnRhYmxlVGV4dFJhbmdlKGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCBlZGl0b3Iuc2VsZWN0aW9uLCB0eXBlcyksIFNMQVRFX1RPX1BPUlRBQkxFX1RFWFRfUkFOR0Uuc2V0KGVkaXRvci5zZWxlY3Rpb24sIHB0UmFuZ2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHB0UmFuZ2U7XG4gICAgfSxcbiAgICBnZXRWYWx1ZTogKCkgPT4gZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksXG4gICAgaXNDb2xsYXBzZWRTZWxlY3Rpb246ICgpID0+ICEhZWRpdG9yLnNlbGVjdGlvbiAmJiBSYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSxcbiAgICBpc0V4cGFuZGVkU2VsZWN0aW9uOiAoKSA9PiAhIWVkaXRvci5zZWxlY3Rpb24gJiYgUmFuZ2UuaXNFeHBhbmRlZChlZGl0b3Iuc2VsZWN0aW9uKSxcbiAgICBpbnNlcnRCcmVhazogKCkgPT4ge1xuICAgICAgZWRpdG9yLmluc2VydEJyZWFrKCksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgIH0sXG4gICAgZ2V0RnJhZ21lbnQ6ICgpID0+IGZyb21TbGF0ZVZhbHVlKGVkaXRvci5nZXRGcmFnbWVudCgpLCB0eXBlcy5ibG9jay5uYW1lKSxcbiAgICBpc1NlbGVjdGlvbnNPdmVybGFwcGluZzogKHNlbGVjdGlvbkEsIHNlbGVjdGlvbkIpID0+IHtcbiAgICAgIGNvbnN0IHJhbmdlQSA9IHRvU2xhdGVSYW5nZShzZWxlY3Rpb25BLCBlZGl0b3IpLCByYW5nZUIgPSB0b1NsYXRlUmFuZ2Uoc2VsZWN0aW9uQiwgZWRpdG9yKTtcbiAgICAgIHJldHVybiBSYW5nZS5pc1JhbmdlKHJhbmdlQSkgJiYgUmFuZ2UuaXNSYW5nZShyYW5nZUIpICYmIFJhbmdlLmluY2x1ZGVzKHJhbmdlQSwgcmFuZ2VCKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpc0Fubm90YXRpb25BY3RpdmUoe1xuICBlZGl0b3IsXG4gIGFubm90YXRpb25cbn0pIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uIHx8IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5sZW5ndGggPCAyKVxuICAgIHJldHVybiAhMTtcbiAgdHJ5IHtcbiAgICBjb25zdCBzcGFucyA9IFsuLi5FZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgIG1hdGNoOiAobm9kZSkgPT4gVGV4dC5pc1RleHQobm9kZSlcbiAgICB9KV07XG4gICAgaWYgKHNwYW5zLmxlbmd0aCA9PT0gMCB8fCBzcGFucy5zb21lKChbc3Bhbl0pID0+ICFpc1BvcnRhYmxlVGV4dFNwYW4kMShzcGFuKSB8fCAhc3Bhbi5tYXJrcyB8fCBzcGFuLm1hcmtzPy5sZW5ndGggPT09IDApKSByZXR1cm4gITE7XG4gICAgY29uc3Qgc2VsZWN0aW9uTWFya0RlZnMgPSBzcGFucy5yZWR1Y2UoKGFjY01hcmtEZWZzLCBbLCBwYXRoXSkgPT4ge1xuICAgICAgY29uc3QgW2Jsb2NrXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgcGF0aCwge1xuICAgICAgICBkZXB0aDogMVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBibG9jay5tYXJrRGVmcyA/IFsuLi5hY2NNYXJrRGVmcywgLi4uYmxvY2subWFya0RlZnNdIDogYWNjTWFya0RlZnM7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBzcGFucy5ldmVyeSgoW3NwYW5dKSA9PiBpc1BvcnRhYmxlVGV4dFNwYW4kMShzcGFuKSA/IHNwYW4ubWFya3M/Lm1hcCgobWFya0tleSkgPT4gc2VsZWN0aW9uTWFya0RlZnMuZmluZCgoZGVmKSA9PiBkZWY/Ll9rZXkgPT09IG1hcmtLZXkpPy5fdHlwZSk/LmluY2x1ZGVzKGFubm90YXRpb24ubmFtZSkgOiAhMSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiAhMTtcbiAgfVxufVxuY29uc3QgYWRkQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IGFjdGlvbi5lZGl0b3IsIHtcbiAgICBzZWxlY3Rpb246IG9yaWdpbmFsU2VsZWN0aW9uXG4gIH0gPSBlZGl0b3I7XG4gIGxldCBwYXRocztcbiAgaWYgKG9yaWdpbmFsU2VsZWN0aW9uICYmIChSYW5nZS5pc0NvbGxhcHNlZChvcmlnaW5hbFNlbGVjdGlvbikgJiYgKGVkaXRvci5wdGVFeHBhbmRUb1dvcmQoKSwgZWRpdG9yLm9uQ2hhbmdlKCkpLCBlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgIGxldCBzcGFuUGF0aCwgbWFya0RlZlBhdGg7XG4gICAgY29uc3QgbWFya0RlZlBhdGhzID0gW107XG4gICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHNlbGVjdGVkQmxvY2tzID0gRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRCbG9jayhub2RlKSxcbiAgICAgIHJldmVyc2U6IFJhbmdlLmlzQmFja3dhcmQoZWRpdG9yLnNlbGVjdGlvbilcbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IFtibG9jaywgYmxvY2tQYXRoXSBvZiBzZWxlY3RlZEJsb2Nrcykge1xuICAgICAgaWYgKGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCB8fCBibG9jay5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgYmxvY2suY2hpbGRyZW5bMF0udGV4dCA9PT0gXCJcIilcbiAgICAgICAgY29udGludWU7XG4gICAgICBjb25zdCBhbm5vdGF0aW9uS2V5ID0gY29udGV4dC5rZXlHZW5lcmF0b3IoKSwgbWFya0RlZnMgPSBibG9jay5tYXJrRGVmcyA/PyBbXTtcbiAgICAgIG1hcmtEZWZzLmZpbmQoKG1hcmtEZWYpID0+IG1hcmtEZWYuX3R5cGUgPT09IGFjdGlvbi5hbm5vdGF0aW9uLm5hbWUgJiYgbWFya0RlZi5fa2V5ID09PSBhbm5vdGF0aW9uS2V5KSA9PT0gdm9pZCAwICYmIChUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICBtYXJrRGVmczogWy4uLm1hcmtEZWZzLCB7XG4gICAgICAgICAgX3R5cGU6IGFjdGlvbi5hbm5vdGF0aW9uLm5hbWUsXG4gICAgICAgICAgX2tleTogYW5ub3RhdGlvbktleSxcbiAgICAgICAgICAuLi5hY3Rpb24uYW5ub3RhdGlvbi52YWx1ZVxuICAgICAgICB9XVxuICAgICAgfSwge1xuICAgICAgICBhdDogYmxvY2tQYXRoXG4gICAgICB9KSwgbWFya0RlZlBhdGggPSBbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcIm1hcmtEZWZzXCIsIHtcbiAgICAgICAgX2tleTogYW5ub3RhdGlvbktleVxuICAgICAgfV0sIFJhbmdlLmlzQmFja3dhcmQoZWRpdG9yLnNlbGVjdGlvbikgPyBtYXJrRGVmUGF0aHMudW5zaGlmdChtYXJrRGVmUGF0aCkgOiBtYXJrRGVmUGF0aHMucHVzaChtYXJrRGVmUGF0aCkpLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge30sIHtcbiAgICAgICAgbWF0Y2g6IFRleHQuaXNUZXh0LFxuICAgICAgICBzcGxpdDogITBcbiAgICAgIH0pO1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoKTtcbiAgICAgIGZvciAoY29uc3QgW3NwYW4sIHBhdGhdIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmICghZWRpdG9yLmlzVGV4dFNwYW4oc3BhbikgfHwgIVJhbmdlLmluY2x1ZGVzKGVkaXRvci5zZWxlY3Rpb24sIHBhdGgpKVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBtYXJrcyA9IHNwYW4ubWFya3MgPz8gW10sIGV4aXN0aW5nU2FtZVR5cGVBbm5vdGF0aW9ucyA9IG1hcmtzLmZpbHRlcigobWFyaykgPT4gbWFya0RlZnMuc29tZSgobWFya0RlZikgPT4gbWFya0RlZi5fa2V5ID09PSBtYXJrICYmIG1hcmtEZWYuX3R5cGUgPT09IGFjdGlvbi5hbm5vdGF0aW9uLm5hbWUpKTtcbiAgICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogWy4uLm1hcmtzLmZpbHRlcigobWFyaykgPT4gIWV4aXN0aW5nU2FtZVR5cGVBbm5vdGF0aW9ucy5pbmNsdWRlcyhtYXJrKSksIGFubm90YXRpb25LZXldXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aFxuICAgICAgICB9KSwgc3BhblBhdGggPSBbe1xuICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgX2tleTogc3Bhbi5fa2V5XG4gICAgICAgIH1dO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRGVmUGF0aCAmJiBzcGFuUGF0aCAmJiAocGF0aHMgPSB7XG4gICAgICBtYXJrRGVmUGF0aCxcbiAgICAgIG1hcmtEZWZQYXRocyxcbiAgICAgIHNwYW5QYXRoXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhdGhzO1xufSwgcmVtb3ZlQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IGFjdGlvbi5lZGl0b3I7XG4gIGlmIChkZWJ1ZyQyKFwiUmVtb3ZpbmcgYW5ub3RhdGlvblwiLCBhY3Rpb24uYW5ub3RhdGlvbi5uYW1lKSwgISFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIGlmIChSYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgICAgY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLCB7XG4gICAgICAgIGRlcHRoOiAxXG4gICAgICB9KTtcbiAgICAgIGlmICghZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcG90ZW50aWFsQW5ub3RhdGlvbnMgPSAoYmxvY2subWFya0RlZnMgPz8gW10pLmZpbHRlcigobWFya0RlZikgPT4gbWFya0RlZi5fdHlwZSA9PT0gYWN0aW9uLmFubm90YXRpb24ubmFtZSksIFtzZWxlY3RlZENoaWxkLCBzZWxlY3RlZENoaWxkUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24sIHtcbiAgICAgICAgZGVwdGg6IDJcbiAgICAgIH0pO1xuICAgICAgaWYgKCFlZGl0b3IuaXNUZXh0U3BhbihzZWxlY3RlZENoaWxkKSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgYW5ub3RhdGlvblRvUmVtb3ZlID0gc2VsZWN0ZWRDaGlsZC5tYXJrcz8uZmluZCgobWFyaykgPT4gcG90ZW50aWFsQW5ub3RhdGlvbnMuc29tZSgobWFya0RlZikgPT4gbWFya0RlZi5fa2V5ID09PSBtYXJrKSk7XG4gICAgICBpZiAoIWFubm90YXRpb25Ub1JlbW92ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcHJldmlvdXNTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbiA9IFtdO1xuICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgTm9kZS5jaGlsZHJlbihlZGl0b3IsIGJsb2NrUGF0aCwge1xuICAgICAgICByZXZlcnNlOiAhMFxuICAgICAgfSkpXG4gICAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgJiYgUGF0aC5pc0JlZm9yZShjaGlsZFBhdGgsIHNlbGVjdGVkQ2hpbGRQYXRoKSlcbiAgICAgICAgICBpZiAoY2hpbGQubWFya3M/LmluY2x1ZGVzKGFubm90YXRpb25Ub1JlbW92ZSkpXG4gICAgICAgICAgICBwcmV2aW91c1NwYW5zV2l0aFNhbWVBbm5vdGF0aW9uLnB1c2goW2NoaWxkLCBjaGlsZFBhdGhdKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICAgIGNvbnN0IG5leHRTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbiA9IFtdO1xuICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgTm9kZS5jaGlsZHJlbihlZGl0b3IsIGJsb2NrUGF0aCkpXG4gICAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgJiYgUGF0aC5pc0FmdGVyKGNoaWxkUGF0aCwgc2VsZWN0ZWRDaGlsZFBhdGgpKVxuICAgICAgICAgIGlmIChjaGlsZC5tYXJrcz8uaW5jbHVkZXMoYW5ub3RhdGlvblRvUmVtb3ZlKSlcbiAgICAgICAgICAgIG5leHRTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbi5wdXNoKFtjaGlsZCwgY2hpbGRQYXRoXSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBbLi4ucHJldmlvdXNTcGFuc1dpdGhTYW1lQW5ub3RhdGlvbiwgW3NlbGVjdGVkQ2hpbGQsIHNlbGVjdGVkQ2hpbGRQYXRoXSwgLi4ubmV4dFNwYW5zV2l0aFNhbWVBbm5vdGF0aW9uXSlcbiAgICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogY2hpbGQubWFya3M/LmZpbHRlcigobWFyaykgPT4gbWFyayAhPT0gYW5ub3RhdGlvblRvUmVtb3ZlKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IGNoaWxkUGF0aFxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHt9LCB7XG4gICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dFNwYW4obm9kZSksXG4gICAgICAgIHNwbGl0OiAhMCxcbiAgICAgICAgaGFuZ2luZzogITBcbiAgICAgIH0pO1xuICAgICAgY29uc3QgYmxvY2tzID0gRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgICAgIH0pO1xuICAgICAgZm9yIChjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gb2YgYmxvY2tzKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gTm9kZS5jaGlsZHJlbihlZGl0b3IsIGJsb2NrUGF0aCk7XG4gICAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKCFlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgfHwgIVJhbmdlLmluY2x1ZGVzKGVkaXRvci5zZWxlY3Rpb24sIGNoaWxkUGF0aCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjb25zdCBtYXJrRGVmcyA9IGJsb2NrLm1hcmtEZWZzID8/IFtdLCBtYXJrcyA9IGNoaWxkLm1hcmtzID8/IFtdLCBtYXJrc1dpdGhvdXRBbm5vdGF0aW9uID0gbWFya3MuZmlsdGVyKChtYXJrKSA9PiBtYXJrRGVmcy5maW5kKChtYXJrRGVmMikgPT4gbWFya0RlZjIuX2tleSA9PT0gbWFyayk/Ll90eXBlICE9PSBhY3Rpb24uYW5ub3RhdGlvbi5uYW1lKTtcbiAgICAgICAgICBtYXJrc1dpdGhvdXRBbm5vdGF0aW9uLmxlbmd0aCAhPT0gbWFya3MubGVuZ3RoICYmIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrczogbWFya3NXaXRob3V0QW5ub3RhdGlvblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbn0sIHRvZ2dsZUFubm90YXRpb25BY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpZiAoaXNBbm5vdGF0aW9uQWN0aXZlKHtcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbmFtZTogYWN0aW9uLmFubm90YXRpb24ubmFtZVxuICAgIH1cbiAgfSkpXG4gICAgcmVtb3ZlQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBhY3Rpb246IHtcbiAgICAgICAgdHlwZTogXCJhbm5vdGF0aW9uLnJlbW92ZVwiLFxuICAgICAgICBhbm5vdGF0aW9uOiBhY3Rpb24uYW5ub3RhdGlvbixcbiAgICAgICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yXG4gICAgICB9XG4gICAgfSk7XG4gIGVsc2VcbiAgICByZXR1cm4gYWRkQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBhY3Rpb246IHtcbiAgICAgICAgdHlwZTogXCJhbm5vdGF0aW9uLmFkZFwiLFxuICAgICAgICBhbm5vdGF0aW9uOiBhY3Rpb24uYW5ub3RhdGlvbixcbiAgICAgICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yXG4gICAgICB9XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gaW5zZXJ0QmxvY2soe1xuICBibG9jayxcbiAgcGxhY2VtZW50LFxuICBlZGl0b3IsXG4gIHNjaGVtYVxufSkge1xuICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgIGNvbnN0IFtmb2N1c0Jsb2NrLCBmb2N1c0Jsb2NrUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSksXG4gICAgICBtYXRjaDogKG4pID0+ICFFZGl0b3IuaXNFZGl0b3IobilcbiAgICB9KSlbMF0gPz8gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgICBpZiAocGxhY2VtZW50ID09PSBcImFmdGVyXCIpIHtcbiAgICAgIGNvbnN0IG5leHRQYXRoID0gW2ZvY3VzQmxvY2tQYXRoWzBdICsgMV07XG4gICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwgYmxvY2ssIHtcbiAgICAgICAgYXQ6IG5leHRQYXRoXG4gICAgICB9KSwgVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCB7XG4gICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgIHBhdGg6IFtuZXh0UGF0aFswXSwgMF0sXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgcGF0aDogW25leHRQYXRoWzBdLCAwXSxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHBsYWNlbWVudCA9PT0gXCJiZWZvcmVcIiA/IFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBibG9jaywge1xuICAgICAgYXQ6IGZvY3VzQmxvY2tQYXRoXG4gICAgfSkgOiAoRWRpdG9yLmluc2VydE5vZGUoZWRpdG9yLCBibG9jayksIGZvY3VzQmxvY2sgJiYgaXNFcXVhbFRvRW1wdHlFZGl0b3IoW2ZvY3VzQmxvY2tdLCBzY2hlbWEpICYmIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogZm9jdXNCbG9ja1BhdGhcbiAgICB9KSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbGFzdEJsb2NrID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICBtYXRjaDogKG4pID0+ICFFZGl0b3IuaXNFZGl0b3IobiksXG4gICAgICBhdDogW10sXG4gICAgICByZXZlcnNlOiAhMFxuICAgIH0pKVswXTtcbiAgICBFZGl0b3IuaW5zZXJ0Tm9kZShlZGl0b3IsIGJsb2NrKSwgbGFzdEJsb2NrICYmIGlzRXF1YWxUb0VtcHR5RWRpdG9yKFtsYXN0QmxvY2tbMF1dLCBzY2hlbWEpICYmIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogbGFzdEJsb2NrWzFdXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IGJsb2NrU2V0QmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBsb2NhdGlvbiA9IHRvU2xhdGVSYW5nZSh7XG4gICAgYW5jaG9yOiB7XG4gICAgICBwYXRoOiBhY3Rpb24uYXQsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9LFxuICAgIGZvY3VzOiB7XG4gICAgICBwYXRoOiBhY3Rpb24uYXQsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9XG4gIH0sIGFjdGlvbi5lZGl0b3IpO1xuICBpZiAoIWxvY2F0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3Qge1xuICAgIGF0LFxuICAgIGVkaXRvcixcbiAgICB0eXBlLFxuICAgIC4uLnBheWxvYWRcbiAgfSA9IGFjdGlvbjtcbiAgVHJhbnNmb3Jtcy5zZXROb2RlcyhhY3Rpb24uZWRpdG9yLCBwYXlsb2FkLCB7XG4gICAgYXQ6IGxvY2F0aW9uXG4gIH0pO1xufSwgYmxvY2tVbnNldEJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgbG9jYXRpb24gPSB0b1NsYXRlUmFuZ2Uoe1xuICAgIGFuY2hvcjoge1xuICAgICAgcGF0aDogYWN0aW9uLmF0LFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfSxcbiAgICBmb2N1czoge1xuICAgICAgcGF0aDogYWN0aW9uLmF0LFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfVxuICB9LCBhY3Rpb24uZWRpdG9yKTtcbiAgbG9jYXRpb24gJiYgVHJhbnNmb3Jtcy51bnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIGFjdGlvbi5wcm9wcywge1xuICAgIGF0OiBsb2NhdGlvblxuICB9KTtcbn0sIGRhdGFUcmFuc2ZlclNldEFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGFjdGlvbi5kYXRhVHJhbnNmZXIuc2V0RGF0YShhY3Rpb24ubWltZVR5cGUsIGFjdGlvbi5kYXRhKTtcbn0sIGluc2VydEJsb2NrT2JqZWN0QWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgYmxvY2sgPSB0b1NsYXRlVmFsdWUoW3tcbiAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgIF90eXBlOiBhY3Rpb24uYmxvY2tPYmplY3QubmFtZSxcbiAgICAuLi5hY3Rpb24uYmxvY2tPYmplY3QudmFsdWUgPyBhY3Rpb24uYmxvY2tPYmplY3QudmFsdWUgOiB7fVxuICB9XSwge1xuICAgIHNjaGVtYVR5cGVzOiBjb250ZXh0LnNjaGVtYVxuICB9KVswXTtcbiAgaW5zZXJ0QmxvY2soe1xuICAgIGJsb2NrLFxuICAgIHBsYWNlbWVudDogYWN0aW9uLnBsYWNlbWVudCxcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYVxuICB9KTtcbn0sIGluc2VydEJsb2Nrc0FjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGZyYWdtZW50ID0gdG9TbGF0ZVZhbHVlKGFjdGlvbi5ibG9ja3MsIHtcbiAgICBzY2hlbWFUeXBlczogY29udGV4dC5zY2hlbWFcbiAgfSk7XG4gIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBbZm9jdXNCbG9jaywgZm9jdXNQYXRoXSA9IEVkaXRvci5ub2RlKGFjdGlvbi5lZGl0b3IsIGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLCB7XG4gICAgZGVwdGg6IDFcbiAgfSk7XG4gIGlmIChhY3Rpb24uZWRpdG9yLmlzVGV4dEJsb2NrKGZvY3VzQmxvY2spICYmIGFjdGlvbi5lZGl0b3IuaXNUZXh0QmxvY2soZnJhZ21lbnRbMF0pKSB7XG4gICAgY29uc3Qge1xuICAgICAgbWFya0RlZnNcbiAgICB9ID0gZm9jdXNCbG9jaztcbiAgICBpc0VxdWFsKG1hcmtEZWZzLCBmcmFnbWVudFswXS5tYXJrRGVmcykgfHwgVHJhbnNmb3Jtcy5zZXROb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBtYXJrRGVmczogdW5pcShbLi4uZnJhZ21lbnRbMF0ubWFya0RlZnMgfHwgW10sIC4uLm1hcmtEZWZzIHx8IFtdXSlcbiAgICB9LCB7XG4gICAgICBhdDogZm9jdXNQYXRoLFxuICAgICAgbW9kZTogXCJsb3dlc3RcIixcbiAgICAgIHZvaWRzOiAhMVxuICAgIH0pO1xuICB9XG4gIGlzRXF1YWxUb0VtcHR5RWRpdG9yKGFjdGlvbi5lZGl0b3IuY2hpbGRyZW4sIGNvbnRleHQuc2NoZW1hKSA/IChUcmFuc2Zvcm1zLnNwbGl0Tm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIGF0OiBbMCwgMF1cbiAgfSksIGFjdGlvbi5lZGl0b3IuaW5zZXJ0RnJhZ21lbnQoZnJhZ21lbnQpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBhdDogWzBdXG4gIH0pKSA6IGFjdGlvbi5lZGl0b3IuaW5zZXJ0RnJhZ21lbnQoZnJhZ21lbnQpO1xufSwgaW5zZXJ0QnJlYWtBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBrZXlHZW5lcmF0b3IgPSBjb250ZXh0LmtleUdlbmVyYXRvciwgc2NoZW1hID0gY29udGV4dC5zY2hlbWEsIGVkaXRvciA9IGFjdGlvbi5lZGl0b3I7XG4gIGlmICghZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm47XG4gIGNvbnN0IGFuY2hvckJsb2NrUGF0aCA9IGVkaXRvci5zZWxlY3Rpb24uYW5jaG9yLnBhdGguc2xpY2UoMCwgMSksIGZvY3VzQmxvY2tQYXRoID0gZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLnNsaWNlKDAsIDEpLCBmb2N1c0Jsb2NrID0gTm9kZS5kZXNjZW5kYW50KGVkaXRvciwgZm9jdXNCbG9ja1BhdGgpO1xuICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKGZvY3VzQmxvY2spICYmIGFuY2hvckJsb2NrUGF0aFswXSA9PT0gZm9jdXNCbG9ja1BhdGhbMF0pIHtcbiAgICBUcmFuc2Zvcm1zLnNwbGl0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogZWRpdG9yLnNlbGVjdGlvblxuICAgIH0pO1xuICAgIGNvbnN0IFtuZXh0QmxvY2ssIG5leHRCbG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBQYXRoLm5leHQoZm9jdXNCbG9ja1BhdGgpLCB7XG4gICAgICBkZXB0aDogMVxuICAgIH0pLCBuZXh0Q2hpbGQgPSBOb2RlLmNoaWxkKG5leHRCbG9jaywgMCk7XG4gICAgaWYgKCFlZGl0b3IuaXNUZXh0U3BhbihuZXh0Q2hpbGQpICYmIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgdGV4dDogXCJcIixcbiAgICAgIG1hcmtzOiBbXVxuICAgIH0sIHtcbiAgICAgIGF0OiBbbmV4dEJsb2NrUGF0aFswXSwgMF1cbiAgICB9KSwgVHJhbnNmb3Jtcy5zZXRTZWxlY3Rpb24oZWRpdG9yLCB7XG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0aDogWy4uLm5leHRCbG9ja1BhdGgsIDBdLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH0sXG4gICAgICBmb2N1czoge1xuICAgICAgICBwYXRoOiBbLi4ubmV4dEJsb2NrUGF0aCwgMF0sXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfVxuICAgIH0pLCBlZGl0b3IuaXNUZXh0QmxvY2sobmV4dEJsb2NrKSAmJiBuZXh0QmxvY2subWFya0RlZnMgJiYgbmV4dEJsb2NrLm1hcmtEZWZzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IG5ld01hcmtEZWZLZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgcHJldk5vZGVTcGFucyA9IEFycmF5LmZyb20oTm9kZS5jaGlsZHJlbihlZGl0b3IsIGZvY3VzQmxvY2tQYXRoKSkubWFwKChlbnRyeSkgPT4gZW50cnlbMF0pLmZpbHRlcigobm9kZSkgPT4gZWRpdG9yLmlzVGV4dFNwYW4obm9kZSkpLCBjaGlsZHJlbiA9IE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBuZXh0QmxvY2tQYXRoKTtcbiAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmICghZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpKVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBtYXJrcyA9IGNoaWxkLm1hcmtzID8/IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG1hcmsgb2YgbWFya3MpXG4gICAgICAgICAgc2NoZW1hLmRlY29yYXRvcnMuc29tZSgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUgPT09IG1hcmspIHx8IHByZXZOb2RlU3BhbnMuc29tZSgocHJldk5vZGVTcGFuKSA9PiBwcmV2Tm9kZVNwYW4ubWFya3M/LmluY2x1ZGVzKG1hcmspKSAmJiAhbmV3TWFya0RlZktleXMuaGFzKG1hcmspICYmIG5ld01hcmtEZWZLZXlzLnNldChtYXJrLCBrZXlHZW5lcmF0b3IoKSk7XG4gICAgICAgIGNvbnN0IG5ld01hcmtzID0gbWFya3MubWFwKChtYXJrKSA9PiBuZXdNYXJrRGVmS2V5cy5nZXQobWFyaykgPz8gbWFyayk7XG4gICAgICAgIGlzRXF1YWwobWFya3MsIG5ld01hcmtzKSB8fCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIG1hcmtzOiBuZXdNYXJrc1xuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IGNoaWxkUGF0aFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld01hcmtEZWZzID0gbmV4dEJsb2NrLm1hcmtEZWZzLm1hcCgobWFya0RlZikgPT4gKHtcbiAgICAgICAgLi4ubWFya0RlZixcbiAgICAgICAgX2tleTogbmV3TWFya0RlZktleXMuZ2V0KG1hcmtEZWYuX2tleSkgPz8gbWFya0RlZi5fa2V5XG4gICAgICB9KSk7XG4gICAgICBpc0VxdWFsKG5leHRCbG9jay5tYXJrRGVmcywgbmV3TWFya0RlZnMpIHx8IFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIG1hcmtEZWZzOiBuZXdNYXJrRGVmc1xuICAgICAgfSwge1xuICAgICAgICBhdDogbmV4dEJsb2NrUGF0aCxcbiAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgVHJhbnNmb3Jtcy5zcGxpdE5vZGVzKGVkaXRvciwge1xuICAgIGFsd2F5czogITBcbiAgfSk7XG59LCBpbnNlcnRTb2Z0QnJlYWtBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpbnNlcnRCcmVha0FjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvbjoge1xuICAgICAgLi4uYWN0aW9uLFxuICAgICAgdHlwZTogXCJpbnNlcnQuYnJlYWtcIlxuICAgIH1cbiAgfSk7XG59LCBpbnNlcnRJbmxpbmVPYmplY3RBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpZiAoIWNvbnRleHQuc2NoZW1hLmlubGluZU9iamVjdHMuc29tZSgoaW5saW5lT2JqZWN0KSA9PiBpbmxpbmVPYmplY3QubmFtZSA9PT0gYWN0aW9uLmlubGluZU9iamVjdC5uYW1lKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5zZXJ0IHVua25vd24gaW5saW5lIG9iamVjdFwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5zZXJ0IGlubGluZSBvYmplY3Qgd2l0aG91dCBzZWxlY3Rpb25cIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IFtmb2N1c1RleHRCbG9ja10gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgYXQ6IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGgsXG4gICAgbWF0Y2g6IChub2RlKSA9PiBhY3Rpb24uZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pKS5hdCgwKSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICBpZiAoIWZvY3VzVGV4dEJsb2NrKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBwZXJmb3JtIGFjdGlvbiB3aXRob3V0IGZvY3VzIHRleHQgYmxvY2tcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNoaWxkID0gdG9TbGF0ZVZhbHVlKFt7XG4gICAgX3R5cGU6IGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsXG4gICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICBjaGlsZHJlbjogW3tcbiAgICAgIF90eXBlOiBhY3Rpb24uaW5saW5lT2JqZWN0Lm5hbWUsXG4gICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgLi4uYWN0aW9uLmlubGluZU9iamVjdC52YWx1ZSA/PyB7fVxuICAgIH1dXG4gIH1dLCB7XG4gICAgc2NoZW1hVHlwZXM6IGNvbnRleHQuc2NoZW1hXG4gIH0pLmF0KDApPy5jaGlsZHJlbi5hdCgwKTtcbiAgaWYgKCFjaGlsZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gaW5zZXJ0IGlubGluZSBvYmplY3RcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoYWN0aW9uLmVkaXRvciwgY2hpbGQpO1xufSwgaW5zZXJ0U3BhbkFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHBlcmZvcm0gYWN0aW9uIHdpdGhvdXQgc2VsZWN0aW9uXCIsIGFjdGlvbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IFtmb2N1c0Jsb2NrLCBmb2N1c0Jsb2NrUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgYXQ6IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGgsXG4gICAgbWF0Y2g6IChub2RlKSA9PiBhY3Rpb24uZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pKVswXSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICBpZiAoIWZvY3VzQmxvY2sgfHwgIWZvY3VzQmxvY2tQYXRoKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBwZXJmb3JtIGFjdGlvbiB3aXRob3V0IGZvY3VzIGJsb2NrXCIsIGFjdGlvbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG1hcmtEZWZzID0gZm9jdXNCbG9jay5tYXJrRGVmcyA/PyBbXSwgYW5ub3RhdGlvbnMgPSBhY3Rpb24uYW5ub3RhdGlvbnMgPyBhY3Rpb24uYW5ub3RhdGlvbnMubWFwKChhbm5vdGF0aW9uKSA9PiAoe1xuICAgIF90eXBlOiBhbm5vdGF0aW9uLm5hbWUsXG4gICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAuLi5hbm5vdGF0aW9uLnZhbHVlXG4gIH0pKSA6IHZvaWQgMDtcbiAgYW5ub3RhdGlvbnMgJiYgYW5ub3RhdGlvbnMubGVuZ3RoID4gMCAmJiBUcmFuc2Zvcm1zLnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBtYXJrRGVmczogWy4uLm1hcmtEZWZzLCAuLi5hbm5vdGF0aW9uc11cbiAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIF90eXBlOiBcInNwYW5cIixcbiAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgIHRleHQ6IGFjdGlvbi50ZXh0LFxuICAgIG1hcmtzOiBbLi4uYW5ub3RhdGlvbnM/Lm1hcCgoYW5ub3RhdGlvbikgPT4gYW5ub3RhdGlvbi5fa2V5KSA/PyBbXSwgLi4uYWN0aW9uLmRlY29yYXRvcnMgPz8gW11dXG4gIH0pO1xufSwgaW5zZXJ0QmxvY2tBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBwYXJzZWRCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgIGJsb2NrOiBhY3Rpb24uYmxvY2ssXG4gICAgY29udGV4dCxcbiAgICBvcHRpb25zOiB7XG4gICAgICByZWZyZXNoS2V5czogITFcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBhcnNlZEJsb2NrKVxuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIGJsb2NrICR7SlNPTi5zdHJpbmdpZnkoYWN0aW9uLmJsb2NrKX1gKTtcbiAgY29uc3QgZnJhZ21lbnQgPSB0b1NsYXRlVmFsdWUoW3BhcnNlZEJsb2NrXSwge1xuICAgIHNjaGVtYVR5cGVzOiBjb250ZXh0LnNjaGVtYVxuICB9KVswXTtcbiAgaWYgKCFmcmFnbWVudClcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjb252ZXJ0IGJsb2NrIHRvIFNsYXRlIGZyYWdtZW50ICR7SlNPTi5zdHJpbmdpZnkocGFyc2VkQmxvY2spfWApO1xuICBpbnNlcnRCbG9jayh7XG4gICAgYmxvY2s6IGZyYWdtZW50LFxuICAgIHBsYWNlbWVudDogYWN0aW9uLnBsYWNlbWVudCxcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYVxuICB9KTtcbn0sIHRleHRCbG9ja1NldEFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGF0ID0gdG9TbGF0ZVJhbmdlKHtcbiAgICBhbmNob3I6IHtcbiAgICAgIHBhdGg6IGFjdGlvbi5hdCxcbiAgICAgIG9mZnNldDogMFxuICAgIH0sXG4gICAgZm9jdXM6IHtcbiAgICAgIHBhdGg6IGFjdGlvbi5hdCxcbiAgICAgIG9mZnNldDogMFxuICAgIH1cbiAgfSwgYWN0aW9uLmVkaXRvcik7XG4gIFRyYW5zZm9ybXMuc2V0Tm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIC4uLmFjdGlvbi5zdHlsZSA/IHtcbiAgICAgIHN0eWxlOiBhY3Rpb24uc3R5bGVcbiAgICB9IDoge30sXG4gICAgLi4uYWN0aW9uLmxpc3RJdGVtID8ge1xuICAgICAgbGlzdEl0ZW06IGFjdGlvbi5saXN0SXRlbVxuICAgIH0gOiB7fSxcbiAgICAuLi5hY3Rpb24ubGV2ZWwgPyB7XG4gICAgICBsZXZlbDogYWN0aW9uLmxldmVsXG4gICAgfSA6IHt9XG4gIH0sIHtcbiAgICBhdFxuICB9KTtcbn0sIHRleHRCbG9ja1Vuc2V0QWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgYXQgPSB0b1NsYXRlUmFuZ2Uoe1xuICAgIGFuY2hvcjoge1xuICAgICAgcGF0aDogYWN0aW9uLmF0LFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfSxcbiAgICBmb2N1czoge1xuICAgICAgcGF0aDogYWN0aW9uLmF0LFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfVxuICB9LCBhY3Rpb24uZWRpdG9yKTtcbiAgVHJhbnNmb3Jtcy51bnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIGFjdGlvbi5wcm9wcywge1xuICAgIGF0XG4gIH0pO1xufSwgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnMgPSB7XG4gIFwiYW5ub3RhdGlvbi5hZGRcIjogYWRkQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImFubm90YXRpb24ucmVtb3ZlXCI6IHJlbW92ZUFubm90YXRpb25BY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJhbm5vdGF0aW9uLnRvZ2dsZVwiOiB0b2dnbGVBbm5vdGF0aW9uQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiYmxvY2suc2V0XCI6IGJsb2NrU2V0QmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJibG9jay51bnNldFwiOiBibG9ja1Vuc2V0QmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgYmx1cjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIFJlYWN0RWRpdG9yLmJsdXIoYWN0aW9uLmVkaXRvcik7XG4gIH0sXG4gIFwiZGF0YSB0cmFuc2Zlci5zZXRcIjogZGF0YVRyYW5zZmVyU2V0QWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiZGVjb3JhdG9yLmFkZFwiOiBhZGREZWNvcmF0b3JBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJkZWNvcmF0b3IucmVtb3ZlXCI6IHJlbW92ZURlY29yYXRvckFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImRlY29yYXRvci50b2dnbGVcIjogdG9nZ2xlRGVjb3JhdG9yQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIGZvY3VzOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgUmVhY3RFZGl0b3IuZm9jdXMoYWN0aW9uLmVkaXRvcik7XG4gIH0sXG4gIFwiZGVsZXRlLmJhY2t3YXJkXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBkZWxldGVCYWNrd2FyZChhY3Rpb24uZWRpdG9yLCBhY3Rpb24udW5pdCk7XG4gIH0sXG4gIFwiZGVsZXRlLmZvcndhcmRcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGRlbGV0ZUZvcndhcmQoYWN0aW9uLmVkaXRvciwgYWN0aW9uLnVuaXQpO1xuICB9LFxuICBcImRlbGV0ZS5ibG9ja1wiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgcmFuZ2UgPSB0b1NsYXRlUmFuZ2Uoe1xuICAgICAgYW5jaG9yOiB7XG4gICAgICAgIHBhdGg6IGFjdGlvbi5ibG9ja1BhdGgsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfSxcbiAgICAgIGZvY3VzOiB7XG4gICAgICAgIHBhdGg6IGFjdGlvbi5ibG9ja1BhdGgsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfVxuICAgIH0sIGFjdGlvbi5lZGl0b3IpO1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gZmluZCBTbGF0ZSByYW5nZSBmcm9tIHNlbGVjdGlvbiBwb2ludHNcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgICAgYXQ6IHJhbmdlXG4gICAgfSk7XG4gIH0sXG4gIFwiZGVsZXRlLnRleHRcIjogKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBmcm9tU2xhdGVWYWx1ZShhY3Rpb24uZWRpdG9yLmNoaWxkcmVuLCBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoYWN0aW9uLmVkaXRvcikpLCBhbmNob3IgPSBibG9ja09mZnNldFRvU3BhblNlbGVjdGlvblBvaW50KHtcbiAgICAgIHZhbHVlLFxuICAgICAgYmxvY2tPZmZzZXQ6IGFjdGlvbi5hbmNob3JcbiAgICB9KSwgZm9jdXMgPSBibG9ja09mZnNldFRvU3BhblNlbGVjdGlvblBvaW50KHtcbiAgICAgIHZhbHVlLFxuICAgICAgYmxvY2tPZmZzZXQ6IGFjdGlvbi5mb2N1c1xuICAgIH0pO1xuICAgIGlmICghYW5jaG9yIHx8ICFmb2N1cykge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBmaW5kIGFuY2hvciBvciBmb2N1cyBzZWxlY3Rpb24gcG9pbnRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJhbmdlID0gdG9TbGF0ZVJhbmdlKHtcbiAgICAgIGFuY2hvcixcbiAgICAgIGZvY3VzXG4gICAgfSwgYWN0aW9uLmVkaXRvcik7XG4gICAgaWYgKCFyYW5nZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBmaW5kIFNsYXRlIHJhbmdlIGZyb20gc2VsZWN0aW9uIHBvaW50c1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgVHJhbnNmb3Jtcy5kZWxldGUoYWN0aW9uLmVkaXRvciwge1xuICAgICAgYXQ6IHJhbmdlXG4gICAgfSk7XG4gIH0sXG4gIFwiZGVzZXJpYWxpemF0aW9uLmZhaWx1cmVcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoYERlc2VyaWFsaXphdGlvbiBvZiAke2FjdGlvbi5taW1lVHlwZX0gZmFpbGVkIHdpdGggcmVhc29uICR7YWN0aW9uLnJlYXNvbn1gKTtcbiAgfSxcbiAgXCJkZXNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiOiAoe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBpbnNlcnRCbG9ja3NBY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgICBjb250ZXh0LFxuICAgICAgYWN0aW9uOiB7XG4gICAgICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2Nrc1wiLFxuICAgICAgICBibG9ja3M6IGFjdGlvbi5kYXRhLFxuICAgICAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3JcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgXCJpbnNlcnQuYmxvY2tcIjogaW5zZXJ0QmxvY2tBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJpbnNlcnQuYmxvY2tzXCI6IGluc2VydEJsb2Nrc0FjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC5ibG9jayBvYmplY3RcIjogaW5zZXJ0QmxvY2tPYmplY3RBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJpbnNlcnQuYnJlYWtcIjogaW5zZXJ0QnJlYWtBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJpbnNlcnQuaW5saW5lIG9iamVjdFwiOiBpbnNlcnRJbmxpbmVPYmplY3RBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJpbnNlcnQuc29mdCBicmVha1wiOiBpbnNlcnRTb2Z0QnJlYWtBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJpbnNlcnQuc3BhblwiOiBpbnNlcnRTcGFuQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiaW5zZXJ0LnRleHRcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGluc2VydFRleHQoYWN0aW9uLmVkaXRvciwgYWN0aW9uLnRleHQpO1xuICB9LFxuICBcImluc2VydC50ZXh0IGJsb2NrXCI6ICh7XG4gICAgY29udGV4dCxcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGNvbnN0IGJsb2NrID0gdG9TbGF0ZVZhbHVlKFt7XG4gICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgX3R5cGU6IGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsXG4gICAgICBzdHlsZTogY29udGV4dC5zY2hlbWEuc3R5bGVzWzBdLnZhbHVlID8/IFwibm9ybWFsXCIsXG4gICAgICBtYXJrRGVmczogW10sXG4gICAgICBjaGlsZHJlbjogYWN0aW9uLnRleHRCbG9jaz8uY2hpbGRyZW4/Lm1hcCgoY2hpbGQpID0+ICh7XG4gICAgICAgIC4uLmNoaWxkLFxuICAgICAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpXG4gICAgICB9KSkgPz8gW3tcbiAgICAgICAgX3R5cGU6IGNvbnRleHQuc2NoZW1hLnNwYW4ubmFtZSxcbiAgICAgICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgdGV4dDogXCJcIlxuICAgICAgfV1cbiAgICB9XSwge1xuICAgICAgc2NoZW1hVHlwZXM6IGNvbnRleHQuc2NoZW1hXG4gICAgfSlbMF07XG4gICAgaW5zZXJ0QmxvY2soe1xuICAgICAgYmxvY2ssXG4gICAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hLFxuICAgICAgcGxhY2VtZW50OiBhY3Rpb24ucGxhY2VtZW50XG4gICAgfSk7XG4gIH0sXG4gIGVmZmVjdDogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGFjdGlvbi5lZmZlY3QoKTtcbiAgfSxcbiAgXCJsaXN0IGl0ZW0uYWRkXCI6IGFkZExpc3RJdGVtQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwibGlzdCBpdGVtLnJlbW92ZVwiOiByZW1vdmVMaXN0SXRlbUFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImxpc3QgaXRlbS50b2dnbGVcIjogdG9nZ2xlTGlzdEl0ZW1BY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJtb3ZlLmJsb2NrXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBjb25zdCBhdCA9IFt0b1NsYXRlUGF0aChhY3Rpb24uYXQsIGFjdGlvbi5lZGl0b3IpWzBdXSwgdG8gPSBbdG9TbGF0ZVBhdGgoYWN0aW9uLnRvLCBhY3Rpb24uZWRpdG9yKVswXV07XG4gICAgVHJhbnNmb3Jtcy5tb3ZlTm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgICAgYXQsXG4gICAgICB0byxcbiAgICAgIG1vZGU6IFwiaGlnaGVzdFwiXG4gICAgfSk7XG4gIH0sXG4gIFwibW92ZS5ibG9jayBkb3duXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBjb25zdCBhdCA9IFt0b1NsYXRlUGF0aChhY3Rpb24uYXQsIGFjdGlvbi5lZGl0b3IpWzBdXSwgdG8gPSBbUGF0aC5uZXh0KGF0KVswXV07XG4gICAgVHJhbnNmb3Jtcy5tb3ZlTm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgICAgYXQsXG4gICAgICB0byxcbiAgICAgIG1vZGU6IFwiaGlnaGVzdFwiXG4gICAgfSk7XG4gIH0sXG4gIFwibW92ZS5ibG9jayB1cFwiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgYXQgPSBbdG9TbGF0ZVBhdGgoYWN0aW9uLmF0LCBhY3Rpb24uZWRpdG9yKVswXV07XG4gICAgaWYgKCFQYXRoLmhhc1ByZXZpb3VzKGF0KSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB0byA9IFtQYXRoLnByZXZpb3VzKGF0KVswXV07XG4gICAgVHJhbnNmb3Jtcy5tb3ZlTm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgICAgYXQsXG4gICAgICB0byxcbiAgICAgIG1vZGU6IFwiaGlnaGVzdFwiXG4gICAgfSk7XG4gIH0sXG4gIG5vb3A6ICgpID0+IHtcbiAgfSxcbiAgc2VsZWN0OiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgbmV3U2VsZWN0aW9uID0gdG9TbGF0ZVJhbmdlKGFjdGlvbi5zZWxlY3Rpb24sIGFjdGlvbi5lZGl0b3IpO1xuICAgIG5ld1NlbGVjdGlvbiA/IFRyYW5zZm9ybXMuc2VsZWN0KGFjdGlvbi5lZGl0b3IsIG5ld1NlbGVjdGlvbikgOiBUcmFuc2Zvcm1zLmRlc2VsZWN0KGFjdGlvbi5lZGl0b3IpO1xuICB9LFxuICBcInNlbGVjdC5wcmV2aW91cyBibG9ja1wiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBzZWxlY3QgcHJldmlvdXMgYmxvY2sgd2l0aG91dCBhIHNlbGVjdGlvblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYmxvY2tQYXRoID0gYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKTtcbiAgICBpZiAoIVBhdGguaGFzUHJldmlvdXMoYmxvY2tQYXRoKSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlRoZXJlJ3Mgbm8gcHJldmlvdXMgYmxvY2sgdG8gc2VsZWN0XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcmV2aW91c0Jsb2NrUGF0aCA9IFBhdGgucHJldmlvdXMoYmxvY2tQYXRoKTtcbiAgICBUcmFuc2Zvcm1zLnNlbGVjdChhY3Rpb24uZWRpdG9yLCBwcmV2aW91c0Jsb2NrUGF0aCk7XG4gIH0sXG4gIFwic2VsZWN0Lm5leHQgYmxvY2tcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gc2VsZWN0IG5leHQgYmxvY2sgd2l0aG91dCBhIHNlbGVjdGlvblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmV4dEJsb2NrUGF0aCA9IFthY3Rpb24uZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLnNsaWNlKDAsIDEpWzBdICsgMV07XG4gICAgVHJhbnNmb3Jtcy5zZWxlY3QoYWN0aW9uLmVkaXRvciwgbmV4dEJsb2NrUGF0aCk7XG4gIH0sXG4gIFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGBTZXJpYWxpemF0aW9uIG9mICR7YWN0aW9uLm1pbWVUeXBlfSBmYWlsZWQgd2l0aCByZWFzb24gJHthY3Rpb24ucmVhc29ufWApO1xuICB9LFxuICBcInNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiOiAoe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBkYXRhVHJhbnNmZXJTZXRBY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgICBjb250ZXh0LFxuICAgICAgYWN0aW9uOiB7XG4gICAgICAgIC4uLmFjdGlvbixcbiAgICAgICAgdHlwZTogXCJkYXRhIHRyYW5zZmVyLnNldFwiXG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIFwic3R5bGUudG9nZ2xlXCI6IHRvZ2dsZVN0eWxlQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwic3R5bGUuYWRkXCI6IGFkZFN0eWxlQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwic3R5bGUucmVtb3ZlXCI6IHJlbW92ZVN0eWxlQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwidGV4dCBibG9jay5zZXRcIjogdGV4dEJsb2NrU2V0QWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwidGV4dCBibG9jay51bnNldFwiOiB0ZXh0QmxvY2tVbnNldEFjdGlvbkltcGxlbWVudGF0aW9uXG59O1xuZnVuY3Rpb24gcGVyZm9ybUFjdGlvbih7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBcIm5vb3BcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJlZmZlY3RcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnMuZWZmZWN0KHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcGVyZm9ybURlZmF1bHRBY3Rpb24oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBwZXJmb3JtRGVmYXVsdEFjdGlvbih7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBcImFubm90YXRpb24uYWRkXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiYW5ub3RhdGlvbi5hZGRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJhbm5vdGF0aW9uLnJlbW92ZVwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImFubm90YXRpb24ucmVtb3ZlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiYW5ub3RhdGlvbi50b2dnbGVcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJhbm5vdGF0aW9uLnRvZ2dsZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImJsb2NrLnNldFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImJsb2NrLnNldFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImJsb2NrLnVuc2V0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiYmxvY2sudW5zZXRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJibHVyXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zLmJsdXIoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJkYXRhIHRyYW5zZmVyLnNldFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImRhdGEgdHJhbnNmZXIuc2V0XCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVjb3JhdG9yLmFkZFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImRlY29yYXRvci5hZGRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJkZWNvcmF0b3IucmVtb3ZlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVjb3JhdG9yLnJlbW92ZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImRlY29yYXRvci50b2dnbGVcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJkZWNvcmF0b3IudG9nZ2xlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVsZXRlLmJhY2t3YXJkXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVsZXRlLmJhY2t3YXJkXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVsZXRlLmJsb2NrXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVsZXRlLmJsb2NrXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVsZXRlLmZvcndhcmRcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJkZWxldGUuZm9yd2FyZFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImRlbGV0ZS50ZXh0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVsZXRlLnRleHRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJkZXNlcmlhbGl6YXRpb24uZmFpbHVyZVwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImRlc2VyaWFsaXphdGlvbi5mYWlsdXJlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVzZXJpYWxpemF0aW9uLnN1Y2Nlc3NcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJkZXNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZvY3VzXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zLmZvY3VzKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LmJsb2NrXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LmJsb2NrXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LmJsb2Nrc1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImluc2VydC5ibG9ja3NcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJpbnNlcnQuYmxvY2sgb2JqZWN0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LmJsb2NrIG9iamVjdFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImluc2VydC5pbmxpbmUgb2JqZWN0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LmlubGluZSBvYmplY3RcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJpbnNlcnQuYnJlYWtcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJpbnNlcnQuYnJlYWtcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJpbnNlcnQuc29mdCBicmVha1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImluc2VydC5zb2Z0IGJyZWFrXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LnNwYW5cIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJpbnNlcnQuc3BhblwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImluc2VydC50ZXh0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LnRleHRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJpbnNlcnQudGV4dCBibG9ja1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImluc2VydC50ZXh0IGJsb2NrXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwibGlzdCBpdGVtLmFkZFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImxpc3QgaXRlbS5hZGRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJsaXN0IGl0ZW0ucmVtb3ZlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wibGlzdCBpdGVtLnJlbW92ZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImxpc3QgaXRlbS50b2dnbGVcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJsaXN0IGl0ZW0udG9nZ2xlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwibW92ZS5ibG9ja1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcIm1vdmUuYmxvY2tcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJtb3ZlLmJsb2NrIGRvd25cIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJtb3ZlLmJsb2NrIGRvd25cIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJtb3ZlLmJsb2NrIHVwXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wibW92ZS5ibG9jayB1cFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInNlbGVjdFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9ucy5zZWxlY3Qoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzZWxlY3QucHJldmlvdXMgYmxvY2tcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJzZWxlY3QucHJldmlvdXMgYmxvY2tcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzZWxlY3QubmV4dCBibG9ja1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcInNlbGVjdC5uZXh0IGJsb2NrXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wic2VyaWFsaXphdGlvbi5mYWlsdXJlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic2VyaWFsaXphdGlvbi5zdWNjZXNzXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wic2VyaWFsaXphdGlvbi5zdWNjZXNzXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic3R5bGUuYWRkXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wic3R5bGUuYWRkXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic3R5bGUucmVtb3ZlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wic3R5bGUucmVtb3ZlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic3R5bGUudG9nZ2xlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wic3R5bGUudG9nZ2xlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwidGV4dCBibG9jay5zZXRcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJ0ZXh0IGJsb2NrLnNldFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1widGV4dCBibG9jay51bnNldFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZURlY29yYXRvcnMoe1xuICBzY2hlbWEsXG4gIHNsYXRlRWRpdG9ySW5zdGFuY2Vcbn0pIHtcbiAgY29uc3QgZGVjb3JhdG9ycyA9IHNjaGVtYS5kZWNvcmF0b3JzLm1hcCgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUpO1xuICByZXR1cm4gKHtcbiAgICAuLi5FZGl0b3IubWFya3Moc2xhdGVFZGl0b3JJbnN0YW5jZSkgPz8ge31cbiAgfS5tYXJrcyA/PyBbXSkuZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVkaXRvclNuYXBzaG90KHtcbiAgY29udmVydGVycyxcbiAgZWRpdG9yLFxuICBrZXlHZW5lcmF0b3IsXG4gIHNjaGVtYVxufSkge1xuICBjb25zdCB2YWx1ZSA9IGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgc2NoZW1hLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKSwgc2VsZWN0aW9uID0gdG9Qb3J0YWJsZVRleHRSYW5nZSh2YWx1ZSwgZWRpdG9yLnNlbGVjdGlvbiwgc2NoZW1hKTtcbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0OiB7XG4gICAgICBhY3RpdmVEZWNvcmF0b3JzOiBnZXRBY3RpdmVEZWNvcmF0b3JzKHtcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBlZGl0b3JcbiAgICAgIH0pLFxuICAgICAgY29udmVydGVycyxcbiAgICAgIGtleUdlbmVyYXRvcixcbiAgICAgIHNjaGVtYSxcbiAgICAgIHNlbGVjdGlvbixcbiAgICAgIHZhbHVlXG4gICAgfVxuICB9O1xufVxuY29uc3QgZWRpdG9yTWFjaGluZSA9IHNldHVwKHtcbiAgdHlwZXM6IHtcbiAgICBjb250ZXh0OiB7fSxcbiAgICBldmVudHM6IHt9LFxuICAgIGVtaXR0ZWQ6IHt9LFxuICAgIGlucHV0OiB7fVxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgXCJhZGQgYmVoYXZpb3IgdG8gY29udGV4dFwiOiBhc3NpZ24oe1xuICAgICAgYmVoYXZpb3JzOiAoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcImFkZCBiZWhhdmlvclwiKSwgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoWy4uLmNvbnRleHQuYmVoYXZpb3JzLCBldmVudC5iZWhhdmlvcl0pKVxuICAgIH0pLFxuICAgIFwicmVtb3ZlIGJlaGF2aW9yIGZyb20gY29udGV4dFwiOiBhc3NpZ24oe1xuICAgICAgYmVoYXZpb3JzOiAoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcInJlbW92ZSBiZWhhdmlvclwiKSwgY29udGV4dC5iZWhhdmlvcnMuZGVsZXRlKGV2ZW50LmJlaGF2aW9yKSwgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoWy4uLmNvbnRleHQuYmVoYXZpb3JzXSkpXG4gICAgfSksXG4gICAgXCJhc3NpZ24gYmVoYXZpb3JzXCI6IGFzc2lnbih7XG4gICAgICBiZWhhdmlvcnM6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwidXBkYXRlIGJlaGF2aW9yc1wiKSwgbmV3IFNldChldmVudC5iZWhhdmlvcnMpKVxuICAgIH0pLFxuICAgIFwiYXNzaWduIHNjaGVtYVwiOiBhc3NpZ24oe1xuICAgICAgc2NoZW1hOiAoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcInVwZGF0ZSBzY2hlbWFcIiksIGV2ZW50LnNjaGVtYSlcbiAgICB9KSxcbiAgICBcImVtaXQgcGF0Y2ggZXZlbnRcIjogZW1pdCgoe1xuICAgICAgZXZlbnRcbiAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwicGF0Y2hcIiksIGV2ZW50KSksXG4gICAgXCJlbWl0IG11dGF0aW9uIGV2ZW50XCI6IGVtaXQoKHtcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcIm11dGF0aW9uXCIpLCBldmVudCkpLFxuICAgIFwiZW1pdCByZWFkIG9ubHlcIjogZW1pdCh7XG4gICAgICB0eXBlOiBcInJlYWQgb25seVwiXG4gICAgfSksXG4gICAgXCJlbWl0IGVkaXRhYmxlXCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJlZGl0YWJsZVwiXG4gICAgfSksXG4gICAgXCJkZWZlciBldmVudFwiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ0V2ZW50czogKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgW1wicGF0Y2hcIiwgXCJtdXRhdGlvblwiXSksIFsuLi5jb250ZXh0LnBlbmRpbmdFdmVudHMsIGV2ZW50XSlcbiAgICB9KSxcbiAgICBcImVtaXQgcGVuZGluZyBldmVudHNcIjogZW5xdWV1ZUFjdGlvbnMoKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBlbnF1ZXVlXG4gICAgfSkgPT4ge1xuICAgICAgZm9yIChjb25zdCBldmVudCBvZiBjb250ZXh0LnBlbmRpbmdFdmVudHMpXG4gICAgICAgIGVucXVldWUoZW1pdChldmVudCkpO1xuICAgIH0pLFxuICAgIFwiZW1pdCByZWFkeVwiOiBlbWl0KHtcbiAgICAgIHR5cGU6IFwicmVhZHlcIlxuICAgIH0pLFxuICAgIFwiY2xlYXIgcGVuZGluZyBldmVudHNcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdFdmVudHM6IFtdXG4gICAgfSksXG4gICAgXCJoYW5kbGUgYmVoYXZpb3IgZXZlbnRcIjogZW5xdWV1ZUFjdGlvbnMoKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBldmVudCxcbiAgICAgIGVucXVldWVcbiAgICB9KSA9PiB7XG4gICAgICBhc3NlcnRFdmVudChldmVudCwgW1wiYmVoYXZpb3IgZXZlbnRcIiwgXCJjdXN0b20gYmVoYXZpb3IgZXZlbnRcIl0pO1xuICAgICAgY29uc3QgZGVmYXVsdEFjdGlvbiA9IGV2ZW50LnR5cGUgPT09IFwiY3VzdG9tIGJlaGF2aW9yIGV2ZW50XCIgfHwgZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlID09PSBcImNvcHlcIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwiZGVzZXJpYWxpemVcIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwia2V5LmRvd25cIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwia2V5LnVwXCIgfHwgZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlID09PSBcInBhc3RlXCIgfHwgZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlID09PSBcInNlcmlhbGl6ZVwiID8gdm9pZCAwIDoge1xuICAgICAgICAuLi5ldmVudC5iZWhhdmlvckV2ZW50LFxuICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvclxuICAgICAgfSwgZGVmYXVsdEFjdGlvbkNhbGxiYWNrID0gZXZlbnQudHlwZSA9PT0gXCJiZWhhdmlvciBldmVudFwiID8gZXZlbnQuZGVmYXVsdEFjdGlvbkNhbGxiYWNrIDogdm9pZCAwLCBldmVudEJlaGF2aW9ycyA9IFsuLi5jb250ZXh0LmJlaGF2aW9ycy52YWx1ZXMoKV0uZmlsdGVyKChiZWhhdmlvcikgPT4gYmVoYXZpb3Iub24gPT09IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSk7XG4gICAgICBpZiAoZXZlbnRCZWhhdmlvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChkZWZhdWx0QWN0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICB3aXRoQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGV2ZW50LmVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRBY3Rpb25DYWxsYmFjaygpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBQZXJmb3JtaW5nIGFjdGlvbiBcIiR7ZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlfVwiIGZhaWxlZCBkdWUgdG86ICR7ZXJyb3IubWVzc2FnZX1gKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlZmF1bHRBY3Rpb24pXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB3aXRoQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHBlcmZvcm1BY3Rpb24oe1xuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBkZWZhdWx0QWN0aW9uXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoYFBlcmZvcm1pbmcgYWN0aW9uIFwiJHtkZWZhdWx0QWN0aW9uLnR5cGV9XCIgYXMgYSByZXN1bHQgb2YgXCIke2V2ZW50LmJlaGF2aW9yRXZlbnQudHlwZX1cIiBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgZXZlbnQuZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVkaXRvclNuYXBzaG90ID0gY3JlYXRlRWRpdG9yU25hcHNob3Qoe1xuICAgICAgICBjb252ZXJ0ZXJzOiBbLi4uY29udGV4dC5jb252ZXJ0ZXJzXSxcbiAgICAgICAgZWRpdG9yOiBldmVudC5lZGl0b3IsXG4gICAgICAgIGtleUdlbmVyYXRvcjogY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWFcbiAgICAgIH0pO1xuICAgICAgbGV0IGJlaGF2aW9yT3ZlcndyaXR0ZW4gPSAhMTtcbiAgICAgIGZvciAoY29uc3QgZXZlbnRCZWhhdmlvciBvZiBldmVudEJlaGF2aW9ycykge1xuICAgICAgICBjb25zdCBzaG91bGRSdW4gPSBldmVudEJlaGF2aW9yLmd1YXJkID09PSB2b2lkIDAgfHwgZXZlbnRCZWhhdmlvci5ndWFyZCh7XG4gICAgICAgICAgY29udGV4dDogZWRpdG9yU25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICBldmVudDogZXZlbnQuYmVoYXZpb3JFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzaG91bGRSdW4pXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IGFjdGlvbkludGVuZFNldHMgPSBldmVudEJlaGF2aW9yLmFjdGlvbnMubWFwKChhY3Rpb25TZXQpID0+IGFjdGlvblNldCh7XG4gICAgICAgICAgY29udGV4dDogZWRpdG9yU25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICBldmVudDogZXZlbnQuYmVoYXZpb3JFdmVudFxuICAgICAgICB9LCBzaG91bGRSdW4pKTtcbiAgICAgICAgZm9yIChjb25zdCBhY3Rpb25JbnRlbmRzIG9mIGFjdGlvbkludGVuZFNldHMpXG4gICAgICAgICAgYmVoYXZpb3JPdmVyd3JpdHRlbiA9IGJlaGF2aW9yT3ZlcndyaXR0ZW4gfHwgYWN0aW9uSW50ZW5kcy5sZW5ndGggPiAwICYmIGFjdGlvbkludGVuZHMuc29tZSgoYWN0aW9uSW50ZW5kKSA9PiBhY3Rpb25JbnRlbmQudHlwZSAhPT0gXCJlZmZlY3RcIiksIHdpdGhBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAoY29uc3QgYWN0aW9uSW50ZW5kIG9mIGFjdGlvbkludGVuZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uSW50ZW5kLnR5cGUgPT09IFwicmFpc2VcIikge1xuICAgICAgICAgICAgICAgICAgaXNDdXN0b21CZWhhdmlvckV2ZW50KGFjdGlvbkludGVuZC5ldmVudCkgPyBlbnF1ZXVlLnJhaXNlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjdXN0b20gYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDogYWN0aW9uSW50ZW5kLmV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvclxuICAgICAgICAgICAgICAgICAgfSkgOiBlbnF1ZXVlLnJhaXNlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiBhY3Rpb25JbnRlbmQuZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcjogZXZlbnQuZWRpdG9yXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAuLi5hY3Rpb25JbnRlbmQsXG4gICAgICAgICAgICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHBlcmZvcm1BY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcihgUGVyZm9ybWluZyBhY3Rpb24gXCIke2FjdGlvbi50eXBlfVwiIGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSksIGV2ZW50LmVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICBpZiAoYmVoYXZpb3JPdmVyd3JpdHRlbikge1xuICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50Py5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWJlaGF2aW9yT3ZlcndyaXR0ZW4pIHtcbiAgICAgICAgaWYgKGRlZmF1bHRBY3Rpb25DYWxsYmFjaykge1xuICAgICAgICAgIHdpdGhBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdEFjdGlvbkNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoYFBlcmZvcm1pbmcgXCIke2V2ZW50LmJlaGF2aW9yRXZlbnQudHlwZX1cIiBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWZhdWx0QWN0aW9uKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgd2l0aEFwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGV2ZW50LmVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBwZXJmb3JtQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGFjdGlvbjogZGVmYXVsdEFjdGlvblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBQZXJmb3JtaW5nIGFjdGlvbiBcIiR7ZGVmYXVsdEFjdGlvbi50eXBlfVwiIGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksIGV2ZW50LmVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cbn0pLmNyZWF0ZU1hY2hpbmUoe1xuICBpZDogXCJlZGl0b3JcIixcbiAgY29udGV4dDogKHtcbiAgICBpbnB1dFxuICB9KSA9PiAoe1xuICAgIGJlaGF2aW9yczogbmV3IFNldChpbnB1dC5iZWhhdmlvcnMgPz8gY29yZUJlaGF2aW9ycyksXG4gICAgY29udmVydGVyczogbmV3IFNldChpbnB1dC5jb252ZXJ0ZXJzID8/IFtdKSxcbiAgICBrZXlHZW5lcmF0b3I6IGlucHV0LmtleUdlbmVyYXRvcixcbiAgICBwZW5kaW5nRXZlbnRzOiBbXSxcbiAgICBzY2hlbWE6IGlucHV0LnNjaGVtYSxcbiAgICBzZWxlY3Rpb246IG51bGwsXG4gICAgaW5pdGlhbFJlYWRPbmx5OiBpbnB1dC5yZWFkT25seSA/PyAhMSxcbiAgICBtYXhCbG9ja3M6IGlucHV0Lm1heEJsb2NrcyxcbiAgICB2YWx1ZTogaW5wdXQudmFsdWVcbiAgfSksXG4gIG9uOiB7XG4gICAgXCJub3RpZnkuYmx1cnJlZFwiOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoe1xuICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgdHlwZTogXCJibHVycmVkXCJcbiAgICAgIH0pKVxuICAgIH0sXG4gICAgXCJub3RpZnkuZG9uZSBsb2FkaW5nXCI6IHtcbiAgICAgIGFjdGlvbnM6IGVtaXQoe1xuICAgICAgICB0eXBlOiBcImRvbmUgbG9hZGluZ1wiXG4gICAgICB9KVxuICAgIH0sXG4gICAgXCJub3RpZnkuZXJyb3JcIjoge1xuICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKHtcbiAgICAgICAgLi4uZXZlbnQsXG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIlxuICAgICAgfSkpXG4gICAgfSxcbiAgICBcIm5vdGlmeS5pbnZhbGlkIHZhbHVlXCI6IHtcbiAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+ICh7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICB0eXBlOiBcImludmFsaWQgdmFsdWVcIlxuICAgICAgfSkpXG4gICAgfSxcbiAgICBcIm5vdGlmeS5mb2N1c2VkXCI6IHtcbiAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+ICh7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICB0eXBlOiBcImZvY3VzZWRcIlxuICAgICAgfSkpXG4gICAgfSxcbiAgICBcIm5vdGlmeS5zZWxlY3Rpb25cIjoge1xuICAgICAgYWN0aW9uczogW2Fzc2lnbih7XG4gICAgICAgIHNlbGVjdGlvbjogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC5zZWxlY3Rpb25cbiAgICAgIH0pLCBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoe1xuICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgdHlwZTogXCJzZWxlY3Rpb25cIlxuICAgICAgfSkpXVxuICAgIH0sXG4gICAgXCJub3RpZnkudW5zZXRcIjoge1xuICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKHtcbiAgICAgICAgLi4uZXZlbnQsXG4gICAgICAgIHR5cGU6IFwidW5zZXRcIlxuICAgICAgfSkpXG4gICAgfSxcbiAgICBcIm5vdGlmeS5sb2FkaW5nXCI6IHtcbiAgICAgIGFjdGlvbnM6IGVtaXQoe1xuICAgICAgICB0eXBlOiBcImxvYWRpbmdcIlxuICAgICAgfSlcbiAgICB9LFxuICAgIFwibm90aWZ5LnZhbHVlIGNoYW5nZWRcIjoge1xuICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKHtcbiAgICAgICAgLi4uZXZlbnQsXG4gICAgICAgIHR5cGU6IFwidmFsdWUgY2hhbmdlZFwiXG4gICAgICB9KSlcbiAgICB9LFxuICAgIFwiYWRkIGJlaGF2aW9yXCI6IHtcbiAgICAgIGFjdGlvbnM6IFwiYWRkIGJlaGF2aW9yIHRvIGNvbnRleHRcIlxuICAgIH0sXG4gICAgXCJyZW1vdmUgYmVoYXZpb3JcIjoge1xuICAgICAgYWN0aW9uczogXCJyZW1vdmUgYmVoYXZpb3IgZnJvbSBjb250ZXh0XCJcbiAgICB9LFxuICAgIHBhdGNoZXM6IHtcbiAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IGV2ZW50KVxuICAgIH0sXG4gICAgXCJ1cGRhdGUgYmVoYXZpb3JzXCI6IHtcbiAgICAgIGFjdGlvbnM6IFwiYXNzaWduIGJlaGF2aW9yc1wiXG4gICAgfSxcbiAgICBcInVwZGF0ZSBrZXkgZ2VuZXJhdG9yXCI6IHtcbiAgICAgIGFjdGlvbnM6IGFzc2lnbih7XG4gICAgICAgIGtleUdlbmVyYXRvcjogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC5rZXlHZW5lcmF0b3JcbiAgICAgIH0pXG4gICAgfSxcbiAgICBcInVwZGF0ZSBzY2hlbWFcIjoge1xuICAgICAgYWN0aW9uczogXCJhc3NpZ24gc2NoZW1hXCJcbiAgICB9LFxuICAgIFwidXBkYXRlIHZhbHVlXCI6IHtcbiAgICAgIGFjdGlvbnM6IGFzc2lnbih7XG4gICAgICAgIHZhbHVlOiAoe1xuICAgICAgICAgIGV2ZW50XG4gICAgICAgIH0pID0+IGV2ZW50LnZhbHVlXG4gICAgICB9KVxuICAgIH0sXG4gICAgXCJ1cGRhdGUgbWF4QmxvY2tzXCI6IHtcbiAgICAgIGFjdGlvbnM6IGFzc2lnbih7XG4gICAgICAgIG1heEJsb2NrczogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC5tYXhCbG9ja3NcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICB0eXBlOiBcInBhcmFsbGVsXCIsXG4gIHN0YXRlczoge1xuICAgIFwiZWRpdCBtb2RlXCI6IHtcbiAgICAgIGluaXRpYWw6IFwicmVhZCBvbmx5XCIsXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgXCJyZWFkIG9ubHlcIjoge1xuICAgICAgICAgIGluaXRpYWw6IFwiZGV0ZXJtaW5lIGluaXRpYWwgZWRpdCBtb2RlXCIsXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIFwiYmVoYXZpb3IgZXZlbnRcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBcImhhbmRsZSBiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBndWFyZDogKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwiY29weVwiIHx8IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSA9PT0gXCJkYXRhIHRyYW5zZmVyLnNldFwiIHx8IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSA9PT0gXCJzZXJpYWxpemVcIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwic2VyaWFsaXphdGlvbi5mYWlsdXJlXCIgfHwgZXZlbnQuYmVoYXZpb3JFdmVudC50eXBlID09PSBcInNlcmlhbGl6YXRpb24uc3VjY2Vzc1wiIHx8IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSA9PT0gXCJzZWxlY3RcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICBcImRldGVybWluZSBpbml0aWFsIGVkaXQgbW9kZVwiOiB7XG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgXCJkb25lIHN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiOiBbe1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiNlZGl0b3IuZWRpdCBtb2RlLnJlYWQgb25seS5yZWFkIG9ubHlcIixcbiAgICAgICAgICAgICAgICAgIGd1YXJkOiAoe1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgICB9KSA9PiBjb250ZXh0LmluaXRpYWxSZWFkT25seVxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLmVkaXQgbW9kZS5lZGl0YWJsZVwiXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicmVhZCBvbmx5XCI6IHtcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBcInVwZGF0ZSByZWFkT25seVwiOiB7XG4gICAgICAgICAgICAgICAgICBndWFyZDogKHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgICAgIH0pID0+ICFldmVudC5yZWFkT25seSxcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLmVkaXQgbW9kZS5lZGl0YWJsZVwiLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uczogW1wiZW1pdCBlZGl0YWJsZVwiXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdGFibGU6IHtcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgXCJ1cGRhdGUgcmVhZE9ubHlcIjoge1xuICAgICAgICAgICAgICBndWFyZDogKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudC5yZWFkT25seSxcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcIiNlZGl0b3IuZWRpdCBtb2RlLnJlYWQgb25seS5yZWFkIG9ubHlcIixcbiAgICAgICAgICAgICAgYWN0aW9uczogW1wiZW1pdCByZWFkIG9ubHlcIl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImJlaGF2aW9yIGV2ZW50XCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogXCJoYW5kbGUgYmVoYXZpb3IgZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiY3VzdG9tIGJlaGF2aW9yIGV2ZW50XCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogXCJoYW5kbGUgYmVoYXZpb3IgZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiYW5ub3RhdGlvbi4qXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiYmxvY2suKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibHVyOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImN1c3RvbS4qXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjdXN0b20uKlwiLFxuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGVjb3JhdG9yLipcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZWxldGUuKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb2N1czoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJpbnNlcnQuKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImxpc3QgaXRlbS4qXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibW92ZS4qXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJzZWxlY3QuKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInN0eWxlLipcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0ZXh0IGJsb2NrLipcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXR1cDoge1xuICAgICAgaW5pdGlhbDogXCJzZXR0aW5nIHVwXCIsXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgXCJzZXR0aW5nIHVwXCI6IHtcbiAgICAgICAgICBleGl0OiBbXCJlbWl0IHJlYWR5XCJdLFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBwYXRjaDoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBcImRlZmVyIGV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtdXRhdGlvbjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBcImRlZmVyIGV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRvbmUgc3luY2luZyBpbml0aWFsIHZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcInByaXN0aW5lXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByaXN0aW5lOiB7XG4gICAgICAgICAgaW5pdGlhbDogXCJpZGxlXCIsXG4gICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICBpZGxlOiB7XG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXppbmc6IHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXRjaDoge1xuICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiNlZGl0b3Iuc2V0dXAuZGlydHlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbXV0YXRpb246IHtcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IFwiZGVmZXIgZXZlbnRcIixcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLnNldHVwLmRpcnR5XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBub3JtYWxpemluZzoge1xuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIFwiZG9uZSBub3JtYWxpemluZ1wiOiB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXRjaDoge1xuICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtdXRhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkaXJ0eToge1xuICAgICAgICAgIGVudHJ5OiBbXCJlbWl0IHBlbmRpbmcgZXZlbnRzXCIsIFwiY2xlYXIgcGVuZGluZyBldmVudHNcIl0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiZW1pdCBwYXRjaCBldmVudFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbXV0YXRpb246IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogXCJlbWl0IG11dGF0aW9uIGV2ZW50XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuZnVuY3Rpb24gZ2V0VmFsdWUoe1xuICBlZGl0b3JBY3RvclNuYXBzaG90LFxuICBzbGF0ZUVkaXRvckluc3RhbmNlXG59KSB7XG4gIHJldHVybiBmcm9tU2xhdGVWYWx1ZShzbGF0ZUVkaXRvckluc3RhbmNlLmNoaWxkcmVuLCBlZGl0b3JBY3RvclNuYXBzaG90LmNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChzbGF0ZUVkaXRvckluc3RhbmNlKSk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q29tcGFyZShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuZnVuY3Rpb24gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvciwgdDApIHtcbiAgY29uc3QgJCA9IGMoMyksIGNvbXBhcmUgPSB0MCA9PT0gdm9pZCAwID8gZGVmYXVsdENvbXBhcmUgOiB0MDtcbiAgbGV0IHQxO1xuICByZXR1cm4gJFswXSAhPT0gZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbnN0YW5jZSB8fCAkWzFdICE9PSBzZWxlY3RvciA/ICh0MSA9IChlZGl0b3JBY3RvclNuYXBzaG90KSA9PiB7XG4gICAgY29uc3Qgc25hcHNob3QgPSBnZXRFZGl0b3JTbmFwc2hvdCh7XG4gICAgICBlZGl0b3JBY3RvclNuYXBzaG90LFxuICAgICAgc2xhdGVFZGl0b3JJbnN0YW5jZTogZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbnN0YW5jZVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxlY3RvcihzbmFwc2hvdCk7XG4gIH0sICRbMF0gPSBlZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluc3RhbmNlLCAkWzFdID0gc2VsZWN0b3IsICRbMl0gPSB0MSkgOiB0MSA9ICRbMl0sIHVzZVNlbGVjdG9yKGVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IsIHQxLCBjb21wYXJlKTtcbn1cbmZ1bmN0aW9uIGdldEVkaXRvclNuYXBzaG90KHtcbiAgZWRpdG9yQWN0b3JTbmFwc2hvdCxcbiAgc2xhdGVFZGl0b3JJbnN0YW5jZVxufSkge1xuICByZXR1cm4ge1xuICAgIGNvbnRleHQ6IHtcbiAgICAgIGNvbnZlcnRlcnM6IFsuLi5lZGl0b3JBY3RvclNuYXBzaG90LmNvbnRleHQuY29udmVydGVyc10sXG4gICAgICBhY3RpdmVEZWNvcmF0b3JzOiBnZXRBY3RpdmVEZWNvcmF0b3JzKHtcbiAgICAgICAgc2NoZW1hOiBlZGl0b3JBY3RvclNuYXBzaG90LmNvbnRleHQuc2NoZW1hLFxuICAgICAgICBzbGF0ZUVkaXRvckluc3RhbmNlXG4gICAgICB9KSxcbiAgICAgIGtleUdlbmVyYXRvcjogZWRpdG9yQWN0b3JTbmFwc2hvdC5jb250ZXh0LmtleUdlbmVyYXRvcixcbiAgICAgIHNjaGVtYTogZWRpdG9yQWN0b3JTbmFwc2hvdC5jb250ZXh0LnNjaGVtYSxcbiAgICAgIHNlbGVjdGlvbjogZWRpdG9yQWN0b3JTbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbixcbiAgICAgIHZhbHVlOiBnZXRWYWx1ZSh7XG4gICAgICAgIGVkaXRvckFjdG9yU25hcHNob3QsXG4gICAgICAgIHNsYXRlRWRpdG9ySW5zdGFuY2VcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufVxuY29uc3QgZGVmYXVsdEtleUdlbmVyYXRvciA9ICgpID0+IHJhbmRvbUtleSgxMiksIGdldEJ5dGVIZXhUYWJsZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4ge1xuICBsZXQgdGFibGU7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKHRhYmxlKVxuICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIHRhYmxlID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSlcbiAgICAgIHRhYmxlW2ldID0gKGkgKyAyNTYpLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcbiAgICByZXR1cm4gdGFibGU7XG4gIH07XG59KSgpO1xuZnVuY3Rpb24gd2hhdHdnUk5HKGxlbmd0aCA9IDE2KSB7XG4gIGNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCksIHJuZHM4O1xufVxuZnVuY3Rpb24gcmFuZG9tS2V5KGxlbmd0aCkge1xuICBjb25zdCB0YWJsZSA9IGdldEJ5dGVIZXhUYWJsZSgpO1xuICByZXR1cm4gd2hhdHdnUk5HKGxlbmd0aCkucmVkdWNlKChzdHIsIG4pID0+IHN0ciArIHRhYmxlW25dLCBcIlwiKS5zbGljZSgwLCBsZW5ndGgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWRpdG9yKGNvbmZpZykge1xuICBjb25zdCBlZGl0b3JBY3RvciA9IGNyZWF0ZUFjdG9yKGVkaXRvck1hY2hpbmUsIHtcbiAgICBpbnB1dDogZWRpdG9yQ29uZmlnVG9NYWNoaW5lSW5wdXQoY29uZmlnKVxuICB9KTtcbiAgcmV0dXJuIGVkaXRvckFjdG9yLnN0YXJ0KCksIGNyZWF0ZUVkaXRvckZyb21BY3RvcihlZGl0b3JBY3Rvcik7XG59XG5mdW5jdGlvbiB1c2VDcmVhdGVFZGl0b3IoY29uZmlnKSB7XG4gIGNvbnN0ICQgPSBjKDYpO1xuICBsZXQgdDA7XG4gICRbMF0gIT09IGNvbmZpZyA/ICh0MCA9IGVkaXRvckNvbmZpZ1RvTWFjaGluZUlucHV0KGNvbmZpZyksICRbMF0gPSBjb25maWcsICRbMV0gPSB0MCkgOiB0MCA9ICRbMV07XG4gIGxldCB0MTtcbiAgJFsyXSAhPT0gdDAgPyAodDEgPSB7XG4gICAgaW5wdXQ6IHQwXG4gIH0sICRbMl0gPSB0MCwgJFszXSA9IHQxKSA6IHQxID0gJFszXTtcbiAgY29uc3QgZWRpdG9yQWN0b3IgPSB1c2VBY3RvclJlZihlZGl0b3JNYWNoaW5lLCB0MSk7XG4gIGxldCB0MiwgdDM7XG4gIHJldHVybiAkWzRdICE9PSBlZGl0b3JBY3RvciA/ICh0MyA9IGNyZWF0ZUVkaXRvckZyb21BY3RvcihlZGl0b3JBY3RvciksICRbNF0gPSBlZGl0b3JBY3RvciwgJFs1XSA9IHQzKSA6IHQzID0gJFs1XSwgdDIgPSB0MywgdDI7XG59XG5mdW5jdGlvbiBlZGl0b3JDb25maWdUb01hY2hpbmVJbnB1dChjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBiZWhhdmlvcnM6IGNvbmZpZy5iZWhhdmlvcnMsXG4gICAgY29udmVydGVyczogY29yZUNvbnZlcnRlcnMsXG4gICAga2V5R2VuZXJhdG9yOiBjb25maWcua2V5R2VuZXJhdG9yID8/IGRlZmF1bHRLZXlHZW5lcmF0b3IsXG4gICAgbWF4QmxvY2tzOiBjb25maWcubWF4QmxvY2tzLFxuICAgIHJlYWRPbmx5OiBjb25maWcucmVhZE9ubHksXG4gICAgc2NoZW1hOiBjb25maWcuc2NoZW1hRGVmaW5pdGlvbiA/IGNvbXBpbGVTY2hlbWFEZWZpbml0aW9uKGNvbmZpZy5zY2hlbWFEZWZpbml0aW9uKSA6IGNyZWF0ZUVkaXRvclNjaGVtYShjb25maWcuc2NoZW1hLmhhc093blByb3BlcnR5KFwianNvblR5cGVcIikgPyBjb25maWcuc2NoZW1hIDogY29tcGlsZVR5cGUoY29uZmlnLnNjaGVtYSkpLFxuICAgIHZhbHVlOiBjb25maWcuaW5pdGlhbFZhbHVlXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVFZGl0b3JGcm9tQWN0b3IoZWRpdG9yQWN0b3IpIHtcbiAgY29uc3Qgc2xhdGVFZGl0b3IgPSBjcmVhdGVTbGF0ZUVkaXRvcih7XG4gICAgZWRpdG9yQWN0b3JcbiAgfSksIGVkaXRhYmxlID0gY3JlYXRlRWRpdGFibGVBUEkoc2xhdGVFZGl0b3IuaW5zdGFuY2UsIGVkaXRvckFjdG9yKTtcbiAgcmV0dXJuIHtcbiAgICBnZXRTbmFwc2hvdDogKCkgPT4gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICAgICAgZWRpdG9yQWN0b3JTbmFwc2hvdDogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKSxcbiAgICAgIHNsYXRlRWRpdG9ySW5zdGFuY2U6IHNsYXRlRWRpdG9yLmluc3RhbmNlXG4gICAgfSksXG4gICAgcmVnaXN0ZXJCZWhhdmlvcjogKGNvbmZpZykgPT4gKGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJhZGQgYmVoYXZpb3JcIixcbiAgICAgIGJlaGF2aW9yOiBjb25maWcuYmVoYXZpb3JcbiAgICB9KSwgKCkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwicmVtb3ZlIGJlaGF2aW9yXCIsXG4gICAgICAgIGJlaGF2aW9yOiBjb25maWcuYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH0pLFxuICAgIHNlbmQ6IChldmVudCkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZChldmVudCk7XG4gICAgfSxcbiAgICBvbjogKGV2ZW50LCBsaXN0ZW5lcikgPT4gZWRpdG9yQWN0b3Iub24oZXZlbnQsIChldmVudDIpID0+IHtcbiAgICAgIHN3aXRjaCAoZXZlbnQyLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImJsdXJyZWRcIjpcbiAgICAgICAgY2FzZSBcImRvbmUgbG9hZGluZ1wiOlxuICAgICAgICBjYXNlIFwiZWRpdGFibGVcIjpcbiAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgIGNhc2UgXCJmb2N1c2VkXCI6XG4gICAgICAgIGNhc2UgXCJpbnZhbGlkIHZhbHVlXCI6XG4gICAgICAgIGNhc2UgXCJsb2FkaW5nXCI6XG4gICAgICAgIGNhc2UgXCJtdXRhdGlvblwiOlxuICAgICAgICBjYXNlIFwicGF0Y2hcIjpcbiAgICAgICAgY2FzZSBcInJlYWQgb25seVwiOlxuICAgICAgICBjYXNlIFwicmVhZHlcIjpcbiAgICAgICAgY2FzZSBcInNlbGVjdGlvblwiOlxuICAgICAgICBjYXNlIFwidmFsdWUgY2hhbmdlZFwiOlxuICAgICAgICAgIGxpc3RlbmVyKGV2ZW50Mik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSksXG4gICAgX2ludGVybmFsOiB7XG4gICAgICBlZGl0YWJsZSxcbiAgICAgIGVkaXRvckFjdG9yLFxuICAgICAgc2xhdGVFZGl0b3JcbiAgICB9XG4gIH07XG59XG5jb25zdCBFZGl0b3JBY3RvckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KSwgUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCksIHVzZVBvcnRhYmxlVGV4dEVkaXRvclNlbGVjdGlvbiA9ICgpID0+IHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gdXNlQ29udGV4dChQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25Db250ZXh0KTtcbiAgaWYgKHNlbGVjdGlvbiA9PT0gdm9pZCAwKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgdXNlUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uYCBob29rIG11c3QgYmUgdXNlZCBpbnNpZGUgdGhlIDxQb3J0YWJsZVRleHRFZGl0b3I+IGNvbXBvbmVudCdzIGNvbnRleHQuXCIpO1xuICByZXR1cm4gc2VsZWN0aW9uO1xufSwgZGVidWckMSA9IGRlYnVnV2l0aE5hbWUoXCJjb21wb25lbnQ6UG9ydGFibGVUZXh0RWRpdG9yOlNlbGVjdGlvblByb3ZpZGVyXCIpO1xuZnVuY3Rpb24gUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNiksIFtzZWxlY3Rpb24sIHNldFNlbGVjdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgbGV0IHQwLCB0MTtcbiAgJFswXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgPyAodDAgPSAoKSA9PiB7XG4gICAgZGVidWckMShcIlN1YnNjcmliaW5nIHRvIHNlbGVjdGlvbiBjaGFuZ2VzXCIpO1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHByb3BzLmVkaXRvckFjdG9yLm9uKFwic2VsZWN0aW9uXCIsIChldmVudCkgPT4ge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgc2V0U2VsZWN0aW9uKGV2ZW50LnNlbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGVidWckMShcIlVuc3Vic2NyaWJpbmcgdG8gc2VsZWN0aW9uIGNoYW5nZXNcIiksIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIHQxID0gW3Byb3BzLmVkaXRvckFjdG9yXSwgJFswXSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzFdID0gdDAsICRbMl0gPSB0MSkgOiAodDAgPSAkWzFdLCB0MSA9ICRbMl0pLCB1c2VFZmZlY3QodDAsIHQxKTtcbiAgbGV0IHQyO1xuICByZXR1cm4gJFszXSAhPT0gcHJvcHMuY2hpbGRyZW4gfHwgJFs0XSAhPT0gc2VsZWN0aW9uID8gKHQyID0gLyogQF9fUFVSRV9fICovIGpzeChQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBzZWxlY3Rpb24sIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbiB9KSwgJFszXSA9IHByb3BzLmNoaWxkcmVuLCAkWzRdID0gc2VsZWN0aW9uLCAkWzVdID0gdDIpIDogdDIgPSAkWzVdLCB0Mjtcbn1cbmNvbnN0IGRlYnVnID0gZGVidWdXaXRoTmFtZShcImNvbXBvbmVudDpQb3J0YWJsZVRleHRFZGl0b3JcIik7XG5jbGFzcyBQb3J0YWJsZVRleHRFZGl0b3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSBcIlBvcnRhYmxlVGV4dEVkaXRvclwiO1xuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBvZiBhbGwgdGhlIGVkaXRvciBjaGFuZ2VzLlxuICAgKi9cbiAgY2hhbmdlJCA9IG5ldyBTdWJqZWN0KCk7XG4gIC8qKlxuICAgKiBBIGxvb2t1cCB0YWJsZSBmb3IgYWxsIHRoZSByZWxldmFudCBzY2hlbWEgdHlwZXMgZm9yIHRoaXMgcG9ydGFibGUgdGV4dCB0eXBlLlxuICAgKi9cbiAgLyoqXG4gICAqIFRoZSBlZGl0b3IgaW5zdGFuY2VcbiAgICovXG4gIC8qXG4gICAqIFRoZSBlZGl0b3IgQVBJIChjdXJyZW50bHkgaW1wbGVtZW50ZWQgd2l0aCBTbGF0ZSkuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKSwgcHJvcHMuZWRpdG9yID8gdGhpcy5lZGl0b3IgPSBwcm9wcy5lZGl0b3IgOiB0aGlzLmVkaXRvciA9IGNyZWF0ZUVkaXRvcih7XG4gICAgICBrZXlHZW5lcmF0b3I6IHByb3BzLmtleUdlbmVyYXRvciA/PyBkZWZhdWx0S2V5R2VuZXJhdG9yLFxuICAgICAgc2NoZW1hOiBwcm9wcy5zY2hlbWFUeXBlLFxuICAgICAgaW5pdGlhbFZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgIG1heEJsb2NrczogcHJvcHMubWF4QmxvY2tzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBOdW1iZXIucGFyc2VJbnQocHJvcHMubWF4QmxvY2tzLnRvU3RyaW5nKCksIDEwKSxcbiAgICAgIHJlYWRPbmx5OiBwcm9wcy5yZWFkT25seVxuICAgIH0pLCB0aGlzLnNjaGVtYVR5cGVzID0gdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsIHRoaXMuZWRpdGFibGUgPSB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdGFibGU7XG4gIH1cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICF0aGlzLnByb3BzLmVkaXRvciAmJiAhcHJldlByb3BzLmVkaXRvciAmJiB0aGlzLnByb3BzLnNjaGVtYVR5cGUgIT09IHByZXZQcm9wcy5zY2hlbWFUeXBlICYmICh0aGlzLnNjaGVtYVR5cGVzID0gY3JlYXRlRWRpdG9yU2NoZW1hKHRoaXMucHJvcHMuc2NoZW1hVHlwZS5oYXNPd25Qcm9wZXJ0eShcImpzb25UeXBlXCIpID8gdGhpcy5wcm9wcy5zY2hlbWFUeXBlIDogY29tcGlsZVR5cGUodGhpcy5wcm9wcy5zY2hlbWFUeXBlKSksIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwidXBkYXRlIHNjaGVtYVwiLFxuICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYVR5cGVzXG4gICAgfSkpLCAhdGhpcy5wcm9wcy5lZGl0b3IgJiYgIXByZXZQcm9wcy5lZGl0b3IgJiYgKHRoaXMucHJvcHMucmVhZE9ubHkgIT09IHByZXZQcm9wcy5yZWFkT25seSAmJiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcInVwZGF0ZSByZWFkT25seVwiLFxuICAgICAgcmVhZE9ubHk6IHRoaXMucHJvcHMucmVhZE9ubHkgPz8gITFcbiAgICB9KSwgdGhpcy5wcm9wcy5tYXhCbG9ja3MgIT09IHByZXZQcm9wcy5tYXhCbG9ja3MgJiYgdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJ1cGRhdGUgbWF4QmxvY2tzXCIsXG4gICAgICBtYXhCbG9ja3M6IHRoaXMucHJvcHMubWF4QmxvY2tzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBOdW1iZXIucGFyc2VJbnQodGhpcy5wcm9wcy5tYXhCbG9ja3MudG9TdHJpbmcoKSwgMTApXG4gICAgfSksIHRoaXMucHJvcHMudmFsdWUgIT09IHByZXZQcm9wcy52YWx1ZSAmJiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcInVwZGF0ZSB2YWx1ZVwiLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWVcbiAgICB9KSwgdGhpcy5wcm9wcy5lZGl0b3JSZWYgIT09IHByZXZQcm9wcy5lZGl0b3JSZWYgJiYgdGhpcy5wcm9wcy5lZGl0b3JSZWYgJiYgKHRoaXMucHJvcHMuZWRpdG9yUmVmLmN1cnJlbnQgPSB0aGlzKSk7XG4gIH1cbiAgc2V0RWRpdGFibGUgPSAoZWRpdGFibGUpID0+IHtcbiAgICB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdGFibGUgPSB7XG4gICAgICAuLi50aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdGFibGUsXG4gICAgICAuLi5lZGl0YWJsZVxuICAgIH07XG4gIH07XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBsZWdhY3lQYXRjaGVzID0gdGhpcy5wcm9wcy5lZGl0b3IgPyB2b2lkIDAgOiB0aGlzLnByb3BzLmluY29taW5nUGF0Y2hlcyQgPz8gdGhpcy5wcm9wcy5wYXRjaGVzJDtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtcbiAgICAgIGxlZ2FjeVBhdGNoZXMgPyAvKiBAX19QVVJFX18gKi8ganN4KFJvdXRlUGF0Y2hlc09ic2VydmFibGVUb0VkaXRvckFjdG9yLCB7IGVkaXRvckFjdG9yOiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IsIHBhdGNoZXMkOiBsZWdhY3lQYXRjaGVzIH0pIDogbnVsbCxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goUm91dGVFdmVudHNUb0NoYW5nZXMsIHsgZWRpdG9yQWN0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvciwgb25DaGFuZ2U6IChjaGFuZ2UpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5lZGl0b3IgfHwgdGhpcy5wcm9wcy5vbkNoYW5nZShjaGFuZ2UpLCB0aGlzLmNoYW5nZSQubmV4dChjaGFuZ2UpO1xuICAgICAgfSB9KSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goU3luY2hyb25pemVyLCB7IGVkaXRvckFjdG9yOiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yOiB0aGlzLmVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3IuaW5zdGFuY2UgfSksXG4gICAgICAvKiBAX19QVVJFX18gKi8ganN4KEVkaXRvckFjdG9yQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLCBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeChTbGF0ZSwgeyBlZGl0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbnN0YW5jZSwgaW5pdGlhbFZhbHVlOiB0aGlzLmVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlLCBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeChQb3J0YWJsZVRleHRFZGl0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB0aGlzLCBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeChQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25Qcm92aWRlciwgeyBlZGl0b3JBY3RvcjogdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KSB9KSB9KSB9KVxuICAgIF0gfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBidWlsdC1pbiBzZWxlY3RvcnMgb3Igd3JpdGUgeW91ciBvd246IGh0dHBzOi8vd3d3LnBvcnRhYmxldGV4dC5vcmcvcmVmZXJlbmNlL3NlbGVjdG9ycy9cbiAgICpcbiAgICogYGBgXG4gICAqIGltcG9ydCAqIGFzIHNlbGVjdG9ycyBmcm9tICdAcG9ydGFibGV0ZXh0L2VkaXRvci9zZWxlY3RvcnMnXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGNvbnN0IGlzQWN0aXZlID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuZ2V0QWN0aXZlQW5ub3RhdGlvbnMpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGFjdGl2ZUFubm90YXRpb25zID0gKGVkaXRvcikgPT4gZWRpdG9yICYmIGVkaXRvci5lZGl0YWJsZSA/IGVkaXRvci5lZGl0YWJsZS5hY3RpdmVBbm5vdGF0aW9ucygpIDogW107XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYnVpbHQtaW4gc2VsZWN0b3JzIG9yIHdyaXRlIHlvdXIgb3duOiBodHRwczovL3d3dy5wb3J0YWJsZXRleHQub3JnL3JlZmVyZW5jZS9zZWxlY3RvcnMvXG4gICAqXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgKiBhcyBzZWxlY3RvcnMgZnJvbSAnQHBvcnRhYmxldGV4dC9lZGl0b3Ivc2VsZWN0b3JzJ1xuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBjb25zdCBpc0FjdGl2ZSA9IHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3JzLmlzQWN0aXZlQW5ub3RhdGlvbiguLi4pKVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyBpc0Fubm90YXRpb25BY3RpdmUgPSAoZWRpdG9yLCBhbm5vdGF0aW9uVHlwZSkgPT4gZWRpdG9yICYmIGVkaXRvci5lZGl0YWJsZSA/IGVkaXRvci5lZGl0YWJsZS5pc0Fubm90YXRpb25BY3RpdmUoYW5ub3RhdGlvblR5cGUpIDogITE7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYGVkaXRvci5zZW5kKC4uLilgIGluc3RlYWRcbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGVkaXRvci5zZW5kKHtcbiAgICogIHR5cGU6ICdhbm5vdGF0aW9uLmFkZCcsXG4gICAqICBhbm5vdGF0aW9uOiB7XG4gICAqICAgIG5hbWU6ICcuLi4nLFxuICAgKiAgICB2YWx1ZTogey4uLn0sXG4gICAqICB9XG4gICAqIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGFkZEFubm90YXRpb24gPSAoZWRpdG9yLCB0eXBlLCB2YWx1ZSkgPT4gZWRpdG9yLmVkaXRhYmxlPy5hZGRBbm5vdGF0aW9uKHR5cGUsIHZhbHVlKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2JsdXInLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyBibHVyID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnKFwiSG9zdCBibHVycmVkXCIpLCBlZGl0b3IuZWRpdGFibGU/LmJsdXIoKTtcbiAgfTtcbiAgc3RhdGljIGRlbGV0ZSA9IChlZGl0b3IsIHNlbGVjdGlvbiwgb3B0aW9ucykgPT4gZWRpdG9yLmVkaXRhYmxlPy5kZWxldGUoc2VsZWN0aW9uLCBvcHRpb25zKTtcbiAgc3RhdGljIGZpbmRET01Ob2RlID0gKGVkaXRvciwgZWxlbWVudCkgPT4gZWRpdG9yLmVkaXRhYmxlPy5maW5kRE9NTm9kZShlbGVtZW50KTtcbiAgc3RhdGljIGZpbmRCeVBhdGggPSAoZWRpdG9yLCBwYXRoKSA9PiBlZGl0b3IuZWRpdGFibGU/LmZpbmRCeVBhdGgocGF0aCkgfHwgW107XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYGVkaXRvci5zZW5kKC4uLilgIGluc3RlYWRcbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGVkaXRvci5zZW5kKHtcbiAgICogIHR5cGU6ICdmb2N1cycsXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGZvY3VzID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnKFwiSG9zdCByZXF1ZXN0aW5nIGZvY3VzXCIpLCBlZGl0b3IuZWRpdGFibGU/LmZvY3VzKCk7XG4gIH07XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYnVpbHQtaW4gc2VsZWN0b3JzIG9yIHdyaXRlIHlvdXIgb3duOiBodHRwczovL3d3dy5wb3J0YWJsZXRleHQub3JnL3JlZmVyZW5jZS9zZWxlY3RvcnMvXG4gICAqXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgKiBhcyBzZWxlY3RvcnMgZnJvbSAnQHBvcnRhYmxldGV4dC9lZGl0b3Ivc2VsZWN0b3JzJ1xuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBjb25zdCBmb2N1c0Jsb2NrID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuZ2V0Rm9jdXNCbG9jaylcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgZm9jdXNCbG9jayA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uZm9jdXNCbG9jaygpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgZm9jdXNDaGlsZCA9IHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3JzLmdldEZvY3VzQ2hpbGQpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGZvY3VzQ2hpbGQgPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmZvY3VzQ2hpbGQoKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBidWlsdC1pbiBzZWxlY3RvcnMgb3Igd3JpdGUgeW91ciBvd246IGh0dHBzOi8vd3d3LnBvcnRhYmxldGV4dC5vcmcvcmVmZXJlbmNlL3NlbGVjdG9ycy9cbiAgICpcbiAgICogYGBgXG4gICAqIGltcG9ydCAqIGFzIHNlbGVjdG9ycyBmcm9tICdAcG9ydGFibGV0ZXh0L2VkaXRvci9zZWxlY3RvcnMnXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGNvbnN0IHNlbGVjdGlvbiA9IHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3JzLmdldFNlbGVjdGlvbilcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgZ2V0U2VsZWN0aW9uID0gKGVkaXRvcikgPT4gZWRpdG9yLmVkaXRhYmxlID8gZWRpdG9yLmVkaXRhYmxlLmdldFNlbGVjdGlvbigpIDogbnVsbDtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBidWlsdC1pbiBzZWxlY3RvcnMgb3Igd3JpdGUgeW91ciBvd246IGh0dHBzOi8vd3d3LnBvcnRhYmxldGV4dC5vcmcvcmVmZXJlbmNlL3NlbGVjdG9ycy9cbiAgICpcbiAgICogYGBgXG4gICAqIGltcG9ydCAqIGFzIHNlbGVjdG9ycyBmcm9tICdAcG9ydGFibGV0ZXh0L2VkaXRvci9zZWxlY3RvcnMnXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGNvbnN0IHZhbHVlID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuZ2V0VmFsdWUpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGdldFZhbHVlID0gKGVkaXRvcikgPT4gZWRpdG9yLmVkaXRhYmxlPy5nZXRWYWx1ZSgpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgaXNBY3RpdmUgPSB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9ycy5pc0FjdGl2ZVN0eWxlKC4uLikpXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGhhc0Jsb2NrU3R5bGUgPSAoZWRpdG9yLCBibG9ja1N0eWxlKSA9PiBlZGl0b3IuZWRpdGFibGU/Lmhhc0Jsb2NrU3R5bGUoYmxvY2tTdHlsZSk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYnVpbHQtaW4gc2VsZWN0b3JzIG9yIHdyaXRlIHlvdXIgb3duOiBodHRwczovL3d3dy5wb3J0YWJsZXRleHQub3JnL3JlZmVyZW5jZS9zZWxlY3RvcnMvXG4gICAqXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgKiBhcyBzZWxlY3RvcnMgZnJvbSAnQHBvcnRhYmxldGV4dC9lZGl0b3Ivc2VsZWN0b3JzJ1xuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBjb25zdCBpc0FjdGl2ZSA9IHVzZUVkaXRvclNlbGVjdG9yKGVkaXRvciwgc2VsZWN0b3JzLmlzQWN0aXZlTGlzdEl0ZW0oLi4uKSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaGFzTGlzdFN0eWxlID0gKGVkaXRvciwgbGlzdFN0eWxlKSA9PiBlZGl0b3IuZWRpdGFibGU/Lmhhc0xpc3RTdHlsZShsaXN0U3R5bGUpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgaXNTZWxlY3Rpb25Db2xsYXBzZWQgPSB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9ycy5pc1NlbGVjdGlvbkNvbGxhcHNlZClcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaXNDb2xsYXBzZWRTZWxlY3Rpb24gPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmlzQ29sbGFwc2VkU2VsZWN0aW9uKCk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYnVpbHQtaW4gc2VsZWN0b3JzIG9yIHdyaXRlIHlvdXIgb3duOiBodHRwczovL3d3dy5wb3J0YWJsZXRleHQub3JnL3JlZmVyZW5jZS9zZWxlY3RvcnMvXG4gICAqXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgKiBhcyBzZWxlY3RvcnMgZnJvbSAnQHBvcnRhYmxldGV4dC9lZGl0b3Ivc2VsZWN0b3JzJ1xuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBjb25zdCBpc1NlbGVjdGlvbkV4cGFuZGVkID0gdXNlRWRpdG9yU2VsZWN0b3IoZWRpdG9yLCBzZWxlY3RvcnMuaXNTZWxlY3Rpb25FeHBhbmRlZClcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaXNFeHBhbmRlZFNlbGVjdGlvbiA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uaXNFeHBhbmRlZFNlbGVjdGlvbigpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGJ1aWx0LWluIHNlbGVjdG9ycyBvciB3cml0ZSB5b3VyIG93bjogaHR0cHM6Ly93d3cucG9ydGFibGV0ZXh0Lm9yZy9yZWZlcmVuY2Uvc2VsZWN0b3JzL1xuICAgKlxuICAgKiBgYGBcbiAgICogaW1wb3J0ICogYXMgc2VsZWN0b3JzIGZyb20gJ0Bwb3J0YWJsZXRleHQvZWRpdG9yL3NlbGVjdG9ycydcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogY29uc3QgaXNBY3RpdmUgPSB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9ycy5pc0FjdGl2ZURlY29yYXRvciguLi4pKVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyBpc01hcmtBY3RpdmUgPSAoZWRpdG9yLCBtYXJrKSA9PiBlZGl0b3IuZWRpdGFibGU/LmlzTWFya0FjdGl2ZShtYXJrKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2luc2VydC5zcGFuJyxcbiAgICogIHRleHQ6ICcuLi4nLFxuICAgKiAgYW5ub3RhdGlvbnM6IFt7bmFtZTogJy4uLicsIHZhbHVlOiB7Li4ufX1dLFxuICAgKiAgZGVjb3JhdG9yczogWycuLi4nXSxcbiAgICogfSlcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2luc2VydC5pbmxpbmUgb2JqZWN0JyxcbiAgICogIGlubGluZU9iamVjdDoge1xuICAgKiAgICBuYW1lOiAnLi4uJyxcbiAgICogICAgdmFsdWU6IHsuLi59LFxuICAgKiAgfSxcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaW5zZXJ0Q2hpbGQgPSAoZWRpdG9yLCB0eXBlLCB2YWx1ZSkgPT4gKGRlYnVnKFwiSG9zdCBpbnNlcnRpbmcgY2hpbGRcIiksIGVkaXRvci5lZGl0YWJsZT8uaW5zZXJ0Q2hpbGQodHlwZSwgdmFsdWUpKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2luc2VydC5ibG9jayBvYmplY3QnLFxuICAgKiAgYmxvY2tPYmplY3Q6IHtcbiAgICogICAgbmFtZTogJy4uLicsXG4gICAqICAgIHZhbHVlOiB7Li4ufSxcbiAgICogIH0sXG4gICAqICBwbGFjZW1lbnQ6ICdhdXRvJyB8ICdhZnRlcicgfCAnYmVmb3JlJyxcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaW5zZXJ0QmxvY2sgPSAoZWRpdG9yLCB0eXBlLCB2YWx1ZSkgPT4gZWRpdG9yLmVkaXRhYmxlPy5pbnNlcnRCbG9jayh0eXBlLCB2YWx1ZSk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYGVkaXRvci5zZW5kKC4uLilgIGluc3RlYWRcbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGVkaXRvci5zZW5kKHtcbiAgICogIHR5cGU6ICdpbnNlcnQuYnJlYWsnLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyBpbnNlcnRCcmVhayA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uaW5zZXJ0QnJlYWsoKTtcbiAgc3RhdGljIGlzVm9pZCA9IChlZGl0b3IsIGVsZW1lbnQpID0+IGVkaXRvci5lZGl0YWJsZT8uaXNWb2lkKGVsZW1lbnQpO1xuICBzdGF0aWMgaXNPYmplY3RQYXRoID0gKF9lZGl0b3IsIHBhdGgpID0+IHtcbiAgICBpZiAoIXBhdGggfHwgIUFycmF5LmlzQXJyYXkocGF0aCkpIHJldHVybiAhMTtcbiAgICBjb25zdCBpc0NoaWxkT2JqZWN0RWRpdFBhdGggPSBwYXRoLmxlbmd0aCA+IDMgJiYgcGF0aFsxXSA9PT0gXCJjaGlsZHJlblwiO1xuICAgIHJldHVybiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aFsxXSAhPT0gXCJjaGlsZHJlblwiIHx8IGlzQ2hpbGRPYmplY3RFZGl0UGF0aDtcbiAgfTtcbiAgc3RhdGljIG1hcmtzID0gKGVkaXRvcikgPT4gZWRpdG9yLmVkaXRhYmxlPy5tYXJrcygpO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGBlZGl0b3Iuc2VuZCguLi4pYCBpbnN0ZWFkXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBlZGl0b3Iuc2VuZCh7XG4gICAqICB0eXBlOiAnc2VsZWN0JyxcbiAgICogIHNlbGVjdGlvbjogey4uLn0sXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIHNlbGVjdCA9IChlZGl0b3IsIHNlbGVjdGlvbikgPT4ge1xuICAgIGRlYnVnKFwiSG9zdCBzZXR0aW5nIHNlbGVjdGlvblwiLCBzZWxlY3Rpb24pLCBlZGl0b3IuZWRpdGFibGU/LnNlbGVjdChzZWxlY3Rpb24pO1xuICB9O1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVXNlIGBlZGl0b3Iuc2VuZCguLi4pYCBpbnN0ZWFkXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBlZGl0b3IgPSB1c2VFZGl0b3IoKVxuICAgKiBlZGl0b3Iuc2VuZCh7XG4gICAqICB0eXBlOiAnYW5ub3RhdGlvbi5yZW1vdmUnLFxuICAgKiAgYW5ub3RhdGlvbjoge1xuICAgKiAgICBuYW1lOiAnLi4uJyxcbiAgICogIH0sXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIHJlbW92ZUFubm90YXRpb24gPSAoZWRpdG9yLCB0eXBlKSA9PiBlZGl0b3IuZWRpdGFibGU/LnJlbW92ZUFubm90YXRpb24odHlwZSk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBVc2UgYGVkaXRvci5zZW5kKC4uLilgIGluc3RlYWRcbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IGVkaXRvciA9IHVzZUVkaXRvcigpXG4gICAqIGVkaXRvci5zZW5kKHtcbiAgICogIHR5cGU6ICdzdHlsZS50b2dnbGUnLFxuICAgKiAgc3R5bGU6ICcuLi4nLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyB0b2dnbGVCbG9ja1N0eWxlID0gKGVkaXRvciwgYmxvY2tTdHlsZSkgPT4gKGRlYnVnKFwiSG9zdCBpcyB0b2dnbGluZyBibG9jayBzdHlsZVwiKSwgZWRpdG9yLmVkaXRhYmxlPy50b2dnbGVCbG9ja1N0eWxlKGJsb2NrU3R5bGUpKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2xpc3QgaXRlbS50b2dnbGUnLFxuICAgKiAgbGlzdEl0ZW06ICcuLi4nLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyB0b2dnbGVMaXN0ID0gKGVkaXRvciwgbGlzdFN0eWxlKSA9PiBlZGl0b3IuZWRpdGFibGU/LnRvZ2dsZUxpc3QobGlzdFN0eWxlKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFVzZSBgZWRpdG9yLnNlbmQoLi4uKWAgaW5zdGVhZFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgZWRpdG9yID0gdXNlRWRpdG9yKClcbiAgICogZWRpdG9yLnNlbmQoe1xuICAgKiAgdHlwZTogJ2RlY29yYXRvci50b2dnbGUnLFxuICAgKiAgZGVjb3JhdG9yOiAnLi4uJyxcbiAgICogfSlcbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgdG9nZ2xlTWFyayA9IChlZGl0b3IsIG1hcmspID0+IHtcbiAgICBkZWJ1ZyhcIkhvc3QgdG9nZ2xpbmcgbWFya1wiLCBtYXJrKSwgZWRpdG9yLmVkaXRhYmxlPy50b2dnbGVNYXJrKG1hcmspO1xuICB9O1xuICBzdGF0aWMgZ2V0RnJhZ21lbnQgPSAoZWRpdG9yKSA9PiAoZGVidWcoXCJIb3N0IGdldHRpbmcgZnJhZ21lbnRcIiksIGVkaXRvci5lZGl0YWJsZT8uZ2V0RnJhZ21lbnQoKSk7XG4gIHN0YXRpYyB1bmRvID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnKFwiSG9zdCB1bmRvaW5nXCIpLCBlZGl0b3IuZWRpdGFibGU/LnVuZG8oKTtcbiAgfTtcbiAgc3RhdGljIHJlZG8gPSAoZWRpdG9yKSA9PiB7XG4gICAgZGVidWcoXCJIb3N0IHJlZG9pbmdcIiksIGVkaXRvci5lZGl0YWJsZT8ucmVkbygpO1xuICB9O1xuICBzdGF0aWMgaXNTZWxlY3Rpb25zT3ZlcmxhcHBpbmcgPSAoZWRpdG9yLCBzZWxlY3Rpb25BLCBzZWxlY3Rpb25CKSA9PiBlZGl0b3IuZWRpdGFibGU/LmlzU2VsZWN0aW9uc092ZXJsYXBwaW5nKHNlbGVjdGlvbkEsIHNlbGVjdGlvbkIpO1xufVxuZnVuY3Rpb24gUm91dGVQYXRjaGVzT2JzZXJ2YWJsZVRvRWRpdG9yQWN0b3IocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNCk7XG4gIGxldCB0MCwgdDE7XG4gIHJldHVybiAkWzBdICE9PSBwcm9wcy5lZGl0b3JBY3RvciB8fCAkWzFdICE9PSBwcm9wcy5wYXRjaGVzJCA/ICh0MCA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBwcm9wcy5wYXRjaGVzJC5zdWJzY3JpYmUoKHBheWxvYWQpID0+IHtcbiAgICAgIHByb3BzLmVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcInBhdGNoZXNcIixcbiAgICAgICAgLi4ucGF5bG9hZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIHQxID0gW3Byb3BzLmVkaXRvckFjdG9yLCBwcm9wcy5wYXRjaGVzJF0sICRbMF0gPSBwcm9wcy5lZGl0b3JBY3RvciwgJFsxXSA9IHByb3BzLnBhdGNoZXMkLCAkWzJdID0gdDAsICRbM10gPSB0MSkgOiAodDAgPSAkWzJdLCB0MSA9ICRbM10pLCB1c2VFZmZlY3QodDAsIHQxKSwgbnVsbDtcbn1cbmZ1bmN0aW9uIFJvdXRlRXZlbnRzVG9DaGFuZ2VzKHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDYpO1xuICBsZXQgdDA7XG4gICRbMF0gIT09IHByb3BzID8gKHQwID0gKGNoYW5nZSkgPT4gcHJvcHMub25DaGFuZ2UoY2hhbmdlKSwgJFswXSA9IHByb3BzLCAkWzFdID0gdDApIDogdDAgPSAkWzFdO1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VFZmZlY3RFdmVudCh0MCk7XG4gIGxldCB0MSwgdDI7XG4gIHJldHVybiAkWzJdICE9PSBoYW5kbGVDaGFuZ2UgfHwgJFszXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgPyAodDEgPSAoKSA9PiB7XG4gICAgZGVidWcoXCJTdWJzY3JpYmluZyB0byBlZGl0b3IgY2hhbmdlc1wiKTtcbiAgICBjb25zdCBzdWIgPSBwcm9wcy5lZGl0b3JBY3Rvci5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBiYjU6IHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlIFwiYmx1cnJlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYmx1clwiLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LmV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJwYXRjaFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImxvYWRpbmdcIjoge1xuICAgICAgICAgIGhhbmRsZUNoYW5nZSh7XG4gICAgICAgICAgICB0eXBlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICAgIGlzTG9hZGluZzogITBcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImRvbmUgbG9hZGluZ1wiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiAhMVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZm9jdXNlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZm9jdXNcIixcbiAgICAgICAgICAgIGV2ZW50OiBldmVudC5ldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidmFsdWUgY2hhbmdlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwidmFsdWVcIixcbiAgICAgICAgICAgIHZhbHVlOiBldmVudC52YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaW52YWxpZCB2YWx1ZVwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiaW52YWxpZFZhbHVlXCIsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBldmVudC5yZXNvbHV0aW9uLFxuICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIC4uLmV2ZW50LFxuICAgICAgICAgICAgbGV2ZWw6IFwid2FybmluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJtdXRhdGlvblwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJlYWR5XCI6IHtcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic2VsZWN0aW9uXCI6IHtcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZWJ1ZyhcIlVuc3Vic2NyaWJpbmcgdG8gY2hhbmdlc1wiKSwgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgdDIgPSBbcHJvcHMuZWRpdG9yQWN0b3IsIGhhbmRsZUNoYW5nZV0sICRbMl0gPSBoYW5kbGVDaGFuZ2UsICRbM10gPSBwcm9wcy5lZGl0b3JBY3RvciwgJFs0XSA9IHQxLCAkWzVdID0gdDIpIDogKHQxID0gJFs0XSwgdDIgPSAkWzVdKSwgdXNlRWZmZWN0KHQxLCB0MiksIG51bGw7XG59XG5jb25zdCBFZGl0b3JDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh2b2lkIDApO1xuZnVuY3Rpb24gRWRpdG9yUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoMjgpLCBlZGl0b3IgPSB1c2VDcmVhdGVFZGl0b3IocHJvcHMuaW5pdGlhbENvbmZpZyksIGVkaXRvckFjdG9yID0gZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvciwgc2xhdGVFZGl0b3IgPSBlZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yO1xuICBsZXQgdDAsIHQxO1xuICAkWzBdICE9PSBlZGl0b3IgPyAodDEgPSBuZXcgUG9ydGFibGVUZXh0RWRpdG9yKHtcbiAgICBlZGl0b3JcbiAgfSksICRbMF0gPSBlZGl0b3IsICRbMV0gPSB0MSkgOiB0MSA9ICRbMV0sIHQwID0gdDE7XG4gIGNvbnN0IHBvcnRhYmxlVGV4dEVkaXRvciA9IHQwO1xuICBsZXQgdDI7XG4gICRbMl0gIT09IHBvcnRhYmxlVGV4dEVkaXRvci5jaGFuZ2UkID8gKHQyID0gKGNoYW5nZSkgPT4ge1xuICAgIHBvcnRhYmxlVGV4dEVkaXRvci5jaGFuZ2UkLm5leHQoY2hhbmdlKTtcbiAgfSwgJFsyXSA9IHBvcnRhYmxlVGV4dEVkaXRvci5jaGFuZ2UkLCAkWzNdID0gdDIpIDogdDIgPSAkWzNdO1xuICBsZXQgdDM7XG4gICRbNF0gIT09IGVkaXRvckFjdG9yIHx8ICRbNV0gIT09IHQyID8gKHQzID0gLyogQF9fUFVSRV9fICovIGpzeChSb3V0ZUV2ZW50c1RvQ2hhbmdlcywgeyBlZGl0b3JBY3Rvciwgb25DaGFuZ2U6IHQyIH0pLCAkWzRdID0gZWRpdG9yQWN0b3IsICRbNV0gPSB0MiwgJFs2XSA9IHQzKSA6IHQzID0gJFs2XTtcbiAgbGV0IHQ0O1xuICAkWzddICE9PSBlZGl0b3JBY3RvciB8fCAkWzhdICE9PSBzbGF0ZUVkaXRvci5pbnN0YW5jZSA/ICh0NCA9IC8qIEBfX1BVUkVfXyAqLyBqc3goU3luY2hyb25pemVyLCB7IGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcjogc2xhdGVFZGl0b3IuaW5zdGFuY2UgfSksICRbN10gPSBlZGl0b3JBY3RvciwgJFs4XSA9IHNsYXRlRWRpdG9yLmluc3RhbmNlLCAkWzldID0gdDQpIDogdDQgPSAkWzldO1xuICBsZXQgdDU7XG4gICRbMTBdICE9PSBlZGl0b3JBY3RvciB8fCAkWzExXSAhPT0gcHJvcHMuY2hpbGRyZW4gPyAodDUgPSAvKiBAX19QVVJFX18gKi8ganN4KFBvcnRhYmxlVGV4dEVkaXRvclNlbGVjdGlvblByb3ZpZGVyLCB7IGVkaXRvckFjdG9yLCBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW4gfSksICRbMTBdID0gZWRpdG9yQWN0b3IsICRbMTFdID0gcHJvcHMuY2hpbGRyZW4sICRbMTJdID0gdDUpIDogdDUgPSAkWzEyXTtcbiAgbGV0IHQ2O1xuICAkWzEzXSAhPT0gcG9ydGFibGVUZXh0RWRpdG9yIHx8ICRbMTRdICE9PSB0NSA/ICh0NiA9IC8qIEBfX1BVUkVfXyAqLyBqc3goUG9ydGFibGVUZXh0RWRpdG9yQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogcG9ydGFibGVUZXh0RWRpdG9yLCBjaGlsZHJlbjogdDUgfSksICRbMTNdID0gcG9ydGFibGVUZXh0RWRpdG9yLCAkWzE0XSA9IHQ1LCAkWzE1XSA9IHQ2KSA6IHQ2ID0gJFsxNV07XG4gIGxldCB0NztcbiAgJFsxNl0gIT09IHNsYXRlRWRpdG9yLmluaXRpYWxWYWx1ZSB8fCAkWzE3XSAhPT0gc2xhdGVFZGl0b3IuaW5zdGFuY2UgfHwgJFsxOF0gIT09IHQ2ID8gKHQ3ID0gLyogQF9fUFVSRV9fICovIGpzeChTbGF0ZSwgeyBlZGl0b3I6IHNsYXRlRWRpdG9yLmluc3RhbmNlLCBpbml0aWFsVmFsdWU6IHNsYXRlRWRpdG9yLmluaXRpYWxWYWx1ZSwgY2hpbGRyZW46IHQ2IH0pLCAkWzE2XSA9IHNsYXRlRWRpdG9yLmluaXRpYWxWYWx1ZSwgJFsxN10gPSBzbGF0ZUVkaXRvci5pbnN0YW5jZSwgJFsxOF0gPSB0NiwgJFsxOV0gPSB0NykgOiB0NyA9ICRbMTldO1xuICBsZXQgdDg7XG4gICRbMjBdICE9PSBlZGl0b3JBY3RvciB8fCAkWzIxXSAhPT0gdDcgPyAodDggPSAvKiBAX19QVVJFX18gKi8ganN4KEVkaXRvckFjdG9yQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogZWRpdG9yQWN0b3IsIGNoaWxkcmVuOiB0NyB9KSwgJFsyMF0gPSBlZGl0b3JBY3RvciwgJFsyMV0gPSB0NywgJFsyMl0gPSB0OCkgOiB0OCA9ICRbMjJdO1xuICBsZXQgdDk7XG4gIHJldHVybiAkWzIzXSAhPT0gZWRpdG9yIHx8ICRbMjRdICE9PSB0MyB8fCAkWzI1XSAhPT0gdDQgfHwgJFsyNl0gIT09IHQ4ID8gKHQ5ID0gLyogQF9fUFVSRV9fICovIGpzeHMoRWRpdG9yQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogZWRpdG9yLCBjaGlsZHJlbjogW1xuICAgIHQzLFxuICAgIHQ0LFxuICAgIHQ4XG4gIF0gfSksICRbMjNdID0gZWRpdG9yLCAkWzI0XSA9IHQzLCAkWzI1XSA9IHQ0LCAkWzI2XSA9IHQ4LCAkWzI3XSA9IHQ5KSA6IHQ5ID0gJFsyN10sIHQ5O1xufVxuZnVuY3Rpb24gdXNlRWRpdG9yKCkge1xuICBjb25zdCBlZGl0b3IgPSBSZWFjdC51c2VDb250ZXh0KEVkaXRvckNvbnRleHQpO1xuICBpZiAoIWVkaXRvcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBFZGl0b3Igc2V0LiBVc2UgRWRpdG9yUHJvdmlkZXIgdG8gc2V0IG9uZS5cIik7XG4gIHJldHVybiBlZGl0b3I7XG59XG5mdW5jdGlvbiBFdmVudExpc3RlbmVyUGx1Z2luKHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDQpLCBlZGl0b3IgPSB1c2VFZGl0b3IoKSwgb24gPSB1c2VFZmZlY3RFdmVudChwcm9wcy5vbik7XG4gIGxldCB0MCwgdDE7XG4gIHJldHVybiAkWzBdICE9PSBlZGl0b3IgfHwgJFsxXSAhPT0gb24gPyAodDAgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gZWRpdG9yLm9uKFwiKlwiLCBvbik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIHQxID0gW2VkaXRvciwgb25dLCAkWzBdID0gZWRpdG9yLCAkWzFdID0gb24sICRbMl0gPSB0MCwgJFszXSA9IHQxKSA6ICh0MCA9ICRbMl0sIHQxID0gJFszXSksIHVzZUVmZmVjdCh0MCwgdDEpLCBudWxsO1xufVxuZXhwb3J0IHtcbiAgRWRpdG9yQWN0b3JDb250ZXh0LFxuICBFZGl0b3JQcm92aWRlcixcbiAgRXZlbnRMaXN0ZW5lclBsdWdpbixcbiAgSVNfRFJBR0dJTkcsXG4gIElTX0RSQUdHSU5HX0JMT0NLX0VMRU1FTlQsXG4gIElTX0RSQUdHSU5HX0JMT0NLX1RBUkdFVF9QT1NJVElPTixcbiAgSVNfRFJBR0dJTkdfRUxFTUVOVF9UQVJHRVQsXG4gIEtFWV9UT19WQUxVRV9FTEVNRU5ULFxuICBQb3J0YWJsZVRleHRFZGl0b3IsXG4gIGRlYnVnV2l0aE5hbWUsXG4gIGRlZmF1bHRLZXlHZW5lcmF0b3IsXG4gIGRlZmluZVNjaGVtYSxcbiAgZnJvbVNsYXRlVmFsdWUsXG4gIGlzRXF1YWxUb0VtcHR5RWRpdG9yLFxuICBtb3ZlUmFuZ2VCeU9wZXJhdGlvbixcbiAgdG9Qb3J0YWJsZVRleHRSYW5nZSxcbiAgdG9TbGF0ZVJhbmdlLFxuICB0b1NsYXRlVmFsdWUsXG4gIHVzZUVkaXRvcixcbiAgdXNlRWRpdG9yU2VsZWN0b3IsXG4gIHVzZVBvcnRhYmxlVGV4dEVkaXRvcixcbiAgdXNlUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Z2luLmV2ZW50LWxpc3RlbmVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/plugin.event-listener.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockTextBefore: () => (/* binding */ getBlockTextBefore),\n/* harmony export */   getSelectionText: () => (/* binding */ getSelectionText)\n/* harmony export */ });\n/* harmony import */ var _util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-equal-selection-points.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-equal-selection-points.js\");\n/* harmony import */ var _util_reverse_selection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.reverse-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.reverse-selection.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\n\n\nconst getSelectionText = ({\n  context\n}) => {\n  let text = \"\";\n  const {\n    value,\n    selection\n  } = context;\n  if (!value || !selection)\n    return text;\n  const forwardSelection = selection.backward ? (0,_util_reverse_selection_js__WEBPACK_IMPORTED_MODULE_0__.reverseSelection)(selection) : selection;\n  if (!forwardSelection)\n    return text;\n  for (const block of value)\n    if (!((0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[0]) && block._key !== forwardSelection.anchor.path[0]._key) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(block)) {\n      for (const child of block.children)\n        if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextSpan)(child)) {\n          if ((0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[2]) && child._key === forwardSelection.anchor.path[2]._key && (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[2]) && child._key === forwardSelection.focus.path[2]._key) {\n            text = text + child.text.slice(forwardSelection.anchor.offset, forwardSelection.focus.offset);\n            break;\n          }\n          if ((0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[2]) && child._key === forwardSelection.anchor.path[2]._key) {\n            text = text + child.text.slice(forwardSelection.anchor.offset);\n            continue;\n          }\n          if ((0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[2]) && child._key === forwardSelection.focus.path[2]._key) {\n            text = text + child.text.slice(0, forwardSelection.focus.offset);\n            break;\n          }\n          text.length > 0 && (text = text + child.text);\n        }\n      if ((0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[0]) && block._key === forwardSelection.focus.path[0]._key)\n        break;\n    }\n  return text;\n}, getBlockTextBefore = ({\n  context\n}) => {\n  if (!context.selection)\n    return \"\";\n  const point = (context.selection.backward ? (0,_util_reverse_selection_js__WEBPACK_IMPORTED_MODULE_0__.reverseSelection)(context.selection) : context.selection).anchor, key = (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(point.path[0]) ? point.path[0]._key : void 0, block = key ? context.value.find((block2) => block2._key === key) : void 0;\n  if (!block)\n    return \"\";\n  const startOfBlock = (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)({\n    node: block,\n    path: [{\n      _key: block._key\n    }]\n  });\n  return getSelectionText({\n    context: {\n      ...context,\n      value: context.value,\n      selection: {\n        anchor: startOfBlock,\n        focus: point\n      }\n    }\n  });\n};\n\n//# sourceMappingURL=selector.get-text-before.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlGO0FBQzFCO0FBQ2E7QUFDNUU7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0RBQWdELDRFQUFnQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGtGQUFjLDZGQUE2RixzRUFBdUI7QUFDNUk7QUFDQSxZQUFZLGlFQUFrQjtBQUM5QixjQUFjLGtGQUFjLDRGQUE0RixrRkFBYztBQUN0STtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtGQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0ZBQWM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsa0ZBQWM7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSw4Q0FBOEMsNEVBQWdCLHVEQUF1RCxrRkFBYztBQUNuSTtBQUNBO0FBQ0EsdUJBQXVCLHNGQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzPzA5ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNLZXllZFNlZ21lbnQsIGdldEJsb2NrU3RhcnRQb2ludCB9IGZyb20gXCIuL3V0aWwuaXMtZXF1YWwtc2VsZWN0aW9uLXBvaW50cy5qc1wiO1xuaW1wb3J0IHsgcmV2ZXJzZVNlbGVjdGlvbiB9IGZyb20gXCIuL3V0aWwucmV2ZXJzZS1zZWxlY3Rpb24uanNcIjtcbmltcG9ydCB7IGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrLCBpc1BvcnRhYmxlVGV4dFNwYW4gfSBmcm9tIFwiQHNhbml0eS90eXBlc1wiO1xuY29uc3QgZ2V0U2VsZWN0aW9uVGV4dCA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgbGV0IHRleHQgPSBcIlwiO1xuICBjb25zdCB7XG4gICAgdmFsdWUsXG4gICAgc2VsZWN0aW9uXG4gIH0gPSBjb250ZXh0O1xuICBpZiAoIXZhbHVlIHx8ICFzZWxlY3Rpb24pXG4gICAgcmV0dXJuIHRleHQ7XG4gIGNvbnN0IGZvcndhcmRTZWxlY3Rpb24gPSBzZWxlY3Rpb24uYmFja3dhcmQgPyByZXZlcnNlU2VsZWN0aW9uKHNlbGVjdGlvbikgOiBzZWxlY3Rpb247XG4gIGlmICghZm9yd2FyZFNlbGVjdGlvbilcbiAgICByZXR1cm4gdGV4dDtcbiAgZm9yIChjb25zdCBibG9jayBvZiB2YWx1ZSlcbiAgICBpZiAoIShpc0tleWVkU2VnbWVudChmb3J3YXJkU2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdKSAmJiBibG9jay5fa2V5ICE9PSBmb3J3YXJkU2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdLl9rZXkpICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBibG9jay5jaGlsZHJlbilcbiAgICAgICAgaWYgKGlzUG9ydGFibGVUZXh0U3BhbihjaGlsZCkpIHtcbiAgICAgICAgICBpZiAoaXNLZXllZFNlZ21lbnQoZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFsyXSkgJiYgY2hpbGQuX2tleSA9PT0gZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFsyXS5fa2V5ICYmIGlzS2V5ZWRTZWdtZW50KGZvcndhcmRTZWxlY3Rpb24uZm9jdXMucGF0aFsyXSkgJiYgY2hpbGQuX2tleSA9PT0gZm9yd2FyZFNlbGVjdGlvbi5mb2N1cy5wYXRoWzJdLl9rZXkpIHtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgY2hpbGQudGV4dC5zbGljZShmb3J3YXJkU2VsZWN0aW9uLmFuY2hvci5vZmZzZXQsIGZvcndhcmRTZWxlY3Rpb24uZm9jdXMub2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNLZXllZFNlZ21lbnQoZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFsyXSkgJiYgY2hpbGQuX2tleSA9PT0gZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFsyXS5fa2V5KSB7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dCArIGNoaWxkLnRleHQuc2xpY2UoZm9yd2FyZFNlbGVjdGlvbi5hbmNob3Iub2Zmc2V0KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNLZXllZFNlZ21lbnQoZm9yd2FyZFNlbGVjdGlvbi5mb2N1cy5wYXRoWzJdKSAmJiBjaGlsZC5fa2V5ID09PSBmb3J3YXJkU2VsZWN0aW9uLmZvY3VzLnBhdGhbMl0uX2tleSkge1xuICAgICAgICAgICAgdGV4dCA9IHRleHQgKyBjaGlsZC50ZXh0LnNsaWNlKDAsIGZvcndhcmRTZWxlY3Rpb24uZm9jdXMub2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZXh0Lmxlbmd0aCA+IDAgJiYgKHRleHQgPSB0ZXh0ICsgY2hpbGQudGV4dCk7XG4gICAgICAgIH1cbiAgICAgIGlmIChpc0tleWVkU2VnbWVudChmb3J3YXJkU2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0pICYmIGJsb2NrLl9rZXkgPT09IGZvcndhcmRTZWxlY3Rpb24uZm9jdXMucGF0aFswXS5fa2V5KVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIHJldHVybiB0ZXh0O1xufSwgZ2V0QmxvY2tUZXh0QmVmb3JlID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBpZiAoIWNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybiBcIlwiO1xuICBjb25zdCBwb2ludCA9IChjb250ZXh0LnNlbGVjdGlvbi5iYWNrd2FyZCA/IHJldmVyc2VTZWxlY3Rpb24oY29udGV4dC5zZWxlY3Rpb24pIDogY29udGV4dC5zZWxlY3Rpb24pLmFuY2hvciwga2V5ID0gaXNLZXllZFNlZ21lbnQocG9pbnQucGF0aFswXSkgPyBwb2ludC5wYXRoWzBdLl9rZXkgOiB2b2lkIDAsIGJsb2NrID0ga2V5ID8gY29udGV4dC52YWx1ZS5maW5kKChibG9jazIpID0+IGJsb2NrMi5fa2V5ID09PSBrZXkpIDogdm9pZCAwO1xuICBpZiAoIWJsb2NrKVxuICAgIHJldHVybiBcIlwiO1xuICBjb25zdCBzdGFydE9mQmxvY2sgPSBnZXRCbG9ja1N0YXJ0UG9pbnQoe1xuICAgIG5vZGU6IGJsb2NrLFxuICAgIHBhdGg6IFt7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfV1cbiAgfSk7XG4gIHJldHVybiBnZXRTZWxlY3Rpb25UZXh0KHtcbiAgICBjb250ZXh0OiB7XG4gICAgICAuLi5jb250ZXh0LFxuICAgICAgdmFsdWU6IGNvbnRleHQudmFsdWUsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiBzdGFydE9mQmxvY2ssXG4gICAgICAgIGZvY3VzOiBwb2ludFxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuZXhwb3J0IHtcbiAgZ2V0QmxvY2tUZXh0QmVmb3JlLFxuICBnZXRTZWxlY3Rpb25UZXh0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-at-the-start-of-block.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-at-the-start-of-block.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGuards: () => (/* binding */ createGuards),\n/* harmony export */   getActiveListItem: () => (/* binding */ getActiveListItem),\n/* harmony export */   getActiveStyle: () => (/* binding */ getActiveStyle),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectedSpans: () => (/* binding */ getSelectedSpans),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   isActiveAnnotation: () => (/* binding */ isActiveAnnotation),\n/* harmony export */   isActiveDecorator: () => (/* binding */ isActiveDecorator),\n/* harmony export */   isActiveListItem: () => (/* binding */ isActiveListItem),\n/* harmony export */   isActiveStyle: () => (/* binding */ isActiveStyle),\n/* harmony export */   isAtTheEndOfBlock: () => (/* binding */ isAtTheEndOfBlock),\n/* harmony export */   isAtTheStartOfBlock: () => (/* binding */ isAtTheStartOfBlock),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed),\n/* harmony export */   isSelectionExpanded: () => (/* binding */ isSelectionExpanded)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-equal-selection-points.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-equal-selection-points.js\");\n\n\nfunction createGuards({\n  schema\n}) {\n  function isListBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListBlock)(block) && block._type === schema.block.name;\n  }\n  function isTextBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && block._type === schema.block.name;\n  }\n  return {\n    isListBlock,\n    isTextBlock\n  };\n}\nconst getSelectedSpans = ({\n  context\n}) => {\n  if (!context.selection)\n    return [];\n  const selectedSpans = [], startPoint = context.selection.backward ? context.selection.focus : context.selection.anchor, endPoint = context.selection.backward ? context.selection.anchor : context.selection.focus, startBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(startPoint.path[0]) ? startPoint.path[0]._key : void 0, endBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(endPoint.path[0]) ? endPoint.path[0]._key : void 0;\n  if (!startBlockKey || !endBlockKey)\n    return selectedSpans;\n  const startSpanKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(startPoint.path[2]) ? startPoint.path[2]._key : void 0, endSpanKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(endPoint.path[2]) ? endPoint.path[2]._key : void 0;\n  for (const block of context.value)\n    if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n      if (block._key === startBlockKey) {\n        for (const child of block.children)\n          if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (startSpanKey && child._key === startSpanKey) {\n              if (selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              }), startSpanKey === endSpanKey)\n                break;\n              continue;\n            }\n            if (endSpanKey && child._key === endSpanKey) {\n              selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.length > 0 && selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (block._key === endBlockKey) {\n        for (const child of block.children)\n          if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (endSpanKey && child._key === endSpanKey) {\n              selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        break;\n      }\n      if (selectedSpans.length > 0)\n        for (const child of block.children)\n          (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child) && selectedSpans.push({\n            node: child,\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }]\n          });\n    }\n  return selectedSpans;\n}, getFocusBlock = ({\n  context\n}) => {\n  const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getFocusListBlock = ({\n  context\n}) => {\n  const guards = createGuards(context), focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && guards.isListBlock(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusTextBlock = ({\n  context\n}) => {\n  const focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusBlockObject = ({\n  context\n}) => {\n  const focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusChild = ({\n  context\n}) => {\n  const focusBlock = getFocusTextBlock({\n    context\n  });\n  if (!focusBlock)\n    return;\n  const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[2]) ? context.selection.focus.path[2]._key : void 0, node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [...focusBlock.path, \"children\", {\n      _key: key\n    }]\n  } : void 0;\n}, getFocusSpan = ({\n  context\n}) => {\n  const focusChild = getFocusChild({\n    context\n  });\n  return focusChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getFirstBlock = ({\n  context\n}) => {\n  const node = context.value[0];\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getLastBlock = ({\n  context\n}) => {\n  const node = context.value[context.value.length - 1] ? context.value[context.value.length - 1] : void 0;\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getSelectedBlocks = ({\n  context\n}) => {\n  if (!context.selection)\n    return [];\n  const selectedBlocks = [], startKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, endKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0;\n  if (!startKey || !endKey)\n    return selectedBlocks;\n  for (const block of context.value) {\n    if (block._key === startKey) {\n      if (selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedBlocks.length > 0 && selectedBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedBlocks;\n}, getSelectionStartBlock = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getSelectionEndBlock = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getPreviousBlock = ({\n  context\n}) => {\n  let previousBlock;\n  const selectionStartBlock = getSelectionStartBlock({\n    context\n  });\n  if (!selectionStartBlock)\n    return;\n  let foundSelectionStartBlock = !1;\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = !0;\n      break;\n    }\n    previousBlock = {\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    };\n  }\n  if (foundSelectionStartBlock && previousBlock)\n    return previousBlock;\n}, getNextBlock = ({\n  context\n}) => {\n  let nextBlock;\n  const selectionEndBlock = getSelectionEndBlock({\n    context\n  });\n  if (!selectionEndBlock)\n    return;\n  let foundSelectionEndBlock = !1;\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = !0;\n      continue;\n    }\n    if (foundSelectionEndBlock) {\n      nextBlock = {\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      };\n      break;\n    }\n  }\n  if (foundSelectionEndBlock && nextBlock)\n    return nextBlock;\n}, getActiveListItem = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const guards = createGuards(context), selectedTextBlocks = getSelectedBlocks({\n    context\n  }).map((block) => block.node).filter(guards.isTextBlock), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstListItem = firstTextBlock.listItem;\n  if (firstListItem && selectedTextBlocks.every((block) => block.listItem === firstListItem))\n    return firstListItem;\n}, getActiveStyle = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const guards = createGuards(context), selectedTextBlocks = getSelectedBlocks({\n    context\n  }).map((block) => block.node).filter(guards.isTextBlock), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstStyle = firstTextBlock.style;\n  if (firstStyle && selectedTextBlocks.every((block) => block.style === firstStyle))\n    return firstStyle;\n};\nfunction isActiveAnnotation(annotation) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const selectedBlocks = getSelectedBlocks(snapshot), selectedSpans = getSelectedSpans(snapshot);\n    if (selectedSpans.length === 0 || selectedSpans.some((span) => !span.node.marks || span.node.marks?.length === 0))\n      return !1;\n    const selectionMarkDefs = selectedBlocks.flatMap((block) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block.node) ? block.node.markDefs ?? [] : []);\n    return selectedSpans.every((span) => (span.node.marks?.flatMap((mark) => {\n      const markDef = selectionMarkDefs.find((markDef2) => markDef2._key === mark);\n      return markDef ? [markDef._type] : [];\n    }) ?? []).includes(annotation));\n  };\n}\nconst isSelectionCollapsed = ({\n  context\n}) => context.selection ? JSON.stringify(context.selection.anchor.path) === JSON.stringify(context.selection.focus.path) && context.selection?.anchor.offset === context.selection?.focus.offset : !1, isSelectionExpanded = ({\n  context\n}) => !isSelectionCollapsed({\n  context\n});\nfunction isActiveDecorator(decorator) {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot);\n      return selectedSpans.length > 0 && selectedSpans.every((span) => span.node.marks?.includes(decorator));\n    }\n    return snapshot.context.activeDecorators.includes(decorator);\n  };\n}\nfunction isActiveListItem(listItem) {\n  return (snapshot) => getActiveListItem(snapshot) === listItem;\n}\nfunction isActiveStyle(style) {\n  return (snapshot) => getActiveStyle(snapshot) === style;\n}\nfunction isAtTheEndOfBlock(block) {\n  return ({\n    context\n  }) => {\n    if (!context.selection || !isSelectionCollapsed({\n      context\n    }))\n      return !1;\n    const blockEndPoint = (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.getBlockEndPoint)(block);\n    return (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(context.selection.focus, blockEndPoint);\n  };\n}\nfunction isAtTheStartOfBlock(block) {\n  return ({\n    context\n  }) => {\n    if (!context.selection || !isSelectionCollapsed({\n      context\n    }))\n      return !1;\n    const blockStartPoint = (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)(block);\n    return (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(context.selection.focus, blockStartPoint);\n  };\n}\n\n//# sourceMappingURL=selector.is-at-the-start-of-block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-at-the-start-of-block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isEmptyTextBlock: () => (/* binding */ isEmptyTextBlock),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-equal-selection-points.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-equal-selection-points.js\");\n\n\nfunction blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset\n}) {\n  let offsetLeft = blockOffset.offset, selectionPoint;\n  for (const block of value)\n    if (block._key === blockOffset.path[0]._key && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n      for (const child of block.children)\n        if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n          if (offsetLeft === 0) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: 0\n            };\n            break;\n          }\n          if (offsetLeft <= child.text.length) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: offsetLeft\n            };\n            break;\n          }\n          offsetLeft -= child.text.length;\n        }\n    }\n  return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(selectionPoint.path[0]) ? selectionPoint.path[0]._key : void 0, spanKey = (0,_util_is_equal_selection_points_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(selectionPoint.path[2]) ? selectionPoint.path[2]._key : void 0;\n  if (!(!blockKey || !spanKey)) {\n    for (const block of value)\n      if (block._key === blockKey && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        for (const child of block.children)\n          if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (child._key === spanKey)\n              return {\n                path: [{\n                  _key: block._key\n                }],\n                offset: offset + selectionPoint.offset\n              };\n            offset += child.text.length;\n          }\n      }\n  }\n}\nfunction getTextBlockText(block) {\n  return block.children.map((child) => child.text ?? \"\").join(\"\");\n}\nfunction isEmptyTextBlock(block) {\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block))\n    return !1;\n  const onlyText = block.children.every(_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan), blockText = getTextBlockText(block);\n  return onlyText && blockText === \"\";\n}\n\n//# sourceMappingURL=util.is-empty-text-block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1lbXB0eS10ZXh0LWJsb2NrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE0RTtBQUNQO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsbURBQW1ELHNFQUF1QjtBQUMxRTtBQUNBLFlBQVksaUVBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsbUJBQW1CLGtGQUFjLDJFQUEyRSxrRkFBYztBQUMxSDtBQUNBO0FBQ0EscUNBQXFDLHNFQUF1QjtBQUM1RDtBQUNBLGNBQWMsaUVBQWtCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHNFQUF1QjtBQUM5QjtBQUNBLHdDQUF3Qyw2REFBa0I7QUFDMUQ7QUFDQTtBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1lbXB0eS10ZXh0LWJsb2NrLmpzPzkzZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2ssIGlzUG9ydGFibGVUZXh0U3BhbiB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5pbXBvcnQgeyBpc0tleWVkU2VnbWVudCB9IGZyb20gXCIuL3V0aWwuaXMtZXF1YWwtc2VsZWN0aW9uLXBvaW50cy5qc1wiO1xuZnVuY3Rpb24gYmxvY2tPZmZzZXRUb1NwYW5TZWxlY3Rpb25Qb2ludCh7XG4gIHZhbHVlLFxuICBibG9ja09mZnNldFxufSkge1xuICBsZXQgb2Zmc2V0TGVmdCA9IGJsb2NrT2Zmc2V0Lm9mZnNldCwgc2VsZWN0aW9uUG9pbnQ7XG4gIGZvciAoY29uc3QgYmxvY2sgb2YgdmFsdWUpXG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrT2Zmc2V0LnBhdGhbMF0uX2tleSAmJiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhibG9jaykpIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pXG4gICAgICAgIGlmIChpc1BvcnRhYmxlVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgaWYgKG9mZnNldExlZnQgPT09IDApIHtcbiAgICAgICAgICAgIHNlbGVjdGlvblBvaW50ID0ge1xuICAgICAgICAgICAgICBwYXRoOiBbLi4uYmxvY2tPZmZzZXQucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvZmZzZXRMZWZ0IDw9IGNoaWxkLnRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Qb2ludCA9IHtcbiAgICAgICAgICAgICAgcGF0aDogWy4uLmJsb2NrT2Zmc2V0LnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0TGVmdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvZmZzZXRMZWZ0IC09IGNoaWxkLnRleHQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICByZXR1cm4gc2VsZWN0aW9uUG9pbnQ7XG59XG5mdW5jdGlvbiBzcGFuU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0KHtcbiAgdmFsdWUsXG4gIHNlbGVjdGlvblBvaW50XG59KSB7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBjb25zdCBibG9ja0tleSA9IGlzS2V5ZWRTZWdtZW50KHNlbGVjdGlvblBvaW50LnBhdGhbMF0pID8gc2VsZWN0aW9uUG9pbnQucGF0aFswXS5fa2V5IDogdm9pZCAwLCBzcGFuS2V5ID0gaXNLZXllZFNlZ21lbnQoc2VsZWN0aW9uUG9pbnQucGF0aFsyXSkgPyBzZWxlY3Rpb25Qb2ludC5wYXRoWzJdLl9rZXkgOiB2b2lkIDA7XG4gIGlmICghKCFibG9ja0tleSB8fCAhc3BhbktleSkpIHtcbiAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIHZhbHVlKVxuICAgICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrS2V5ICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKVxuICAgICAgICAgIGlmIChpc1BvcnRhYmxlVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQuX2tleSA9PT0gc3BhbktleSlcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICsgc2VsZWN0aW9uUG9pbnQub2Zmc2V0XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvZmZzZXQgKz0gY2hpbGQudGV4dC5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRUZXh0QmxvY2tUZXh0KGJsb2NrKSB7XG4gIHJldHVybiBibG9jay5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBjaGlsZC50ZXh0ID8/IFwiXCIpLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBpc0VtcHR5VGV4dEJsb2NrKGJsb2NrKSB7XG4gIGlmICghaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soYmxvY2spKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3Qgb25seVRleHQgPSBibG9jay5jaGlsZHJlbi5ldmVyeShpc1BvcnRhYmxlVGV4dFNwYW4pLCBibG9ja1RleHQgPSBnZXRUZXh0QmxvY2tUZXh0KGJsb2NrKTtcbiAgcmV0dXJuIG9ubHlUZXh0ICYmIGJsb2NrVGV4dCA9PT0gXCJcIjtcbn1cbmV4cG9ydCB7XG4gIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQsXG4gIGdldFRleHRCbG9ja1RleHQsXG4gIGlzRW1wdHlUZXh0QmxvY2ssXG4gIHNwYW5TZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmlzLWVtcHR5LXRleHQtYmxvY2suanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-equal-selection-points.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.is-equal-selection-points.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockEndPoint: () => (/* binding */ getBlockEndPoint),\n/* harmony export */   getBlockStartPoint: () => (/* binding */ getBlockStartPoint),\n/* harmony export */   isEqualSelectionPoints: () => (/* binding */ isEqualSelectionPoints),\n/* harmony export */   isKeyedSegment: () => (/* binding */ isKeyedSegment)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && segment !== null && \"_key\" in segment;\n}\nfunction getBlockEndPoint({\n  node,\n  path\n}) {\n  if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(node)) {\n    const lastChild = node.children[node.children.length - 1];\n    if (lastChild)\n      return {\n        path: [...path, \"children\", {\n          _key: lastChild._key\n        }],\n        offset: (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(lastChild) ? lastChild.text.length : 0\n      };\n  }\n  return {\n    path,\n    offset: 0\n  };\n}\nfunction getBlockStartPoint({\n  node,\n  path\n}) {\n  return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(node) ? {\n    path: [...path, \"children\", {\n      _key: node.children[0]._key\n    }],\n    offset: 0\n  } : {\n    path,\n    offset: 0\n  };\n}\nfunction isEqualSelectionPoints(a, b) {\n  return a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path);\n}\n\n//# sourceMappingURL=util.is-equal-selection-points.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1lcXVhbC1zZWxlY3Rpb24tcG9pbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRFO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxNQUFNLHNFQUF1QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGdCQUFnQixpRUFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsU0FBUyxzRUFBdUI7QUFDaEM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1lcXVhbC1zZWxlY3Rpb24tcG9pbnRzLmpzPzY5MDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2ssIGlzUG9ydGFibGVUZXh0U3BhbiB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5mdW5jdGlvbiBpc0tleWVkU2VnbWVudChzZWdtZW50KSB7XG4gIHJldHVybiB0eXBlb2Ygc2VnbWVudCA9PSBcIm9iamVjdFwiICYmIHNlZ21lbnQgIT09IG51bGwgJiYgXCJfa2V5XCIgaW4gc2VnbWVudDtcbn1cbmZ1bmN0aW9uIGdldEJsb2NrRW5kUG9pbnQoe1xuICBub2RlLFxuICBwYXRoXG59KSB7XG4gIGlmIChpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhub2RlKSkge1xuICAgIGNvbnN0IGxhc3RDaGlsZCA9IG5vZGUuY2hpbGRyZW5bbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICBpZiAobGFzdENoaWxkKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aDogWy4uLnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgIF9rZXk6IGxhc3RDaGlsZC5fa2V5XG4gICAgICAgIH1dLFxuICAgICAgICBvZmZzZXQ6IGlzUG9ydGFibGVUZXh0U3BhbihsYXN0Q2hpbGQpID8gbGFzdENoaWxkLnRleHQubGVuZ3RoIDogMFxuICAgICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHBhdGgsXG4gICAgb2Zmc2V0OiAwXG4gIH07XG59XG5mdW5jdGlvbiBnZXRCbG9ja1N0YXJ0UG9pbnQoe1xuICBub2RlLFxuICBwYXRoXG59KSB7XG4gIHJldHVybiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhub2RlKSA/IHtcbiAgICBwYXRoOiBbLi4ucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICBfa2V5OiBub2RlLmNoaWxkcmVuWzBdLl9rZXlcbiAgICB9XSxcbiAgICBvZmZzZXQ6IDBcbiAgfSA6IHtcbiAgICBwYXRoLFxuICAgIG9mZnNldDogMFxuICB9O1xufVxuZnVuY3Rpb24gaXNFcXVhbFNlbGVjdGlvblBvaW50cyhhLCBiKSB7XG4gIHJldHVybiBhLm9mZnNldCA9PT0gYi5vZmZzZXQgJiYgSlNPTi5zdHJpbmdpZnkoYS5wYXRoKSA9PT0gSlNPTi5zdHJpbmdpZnkoYi5wYXRoKTtcbn1cbmV4cG9ydCB7XG4gIGdldEJsb2NrRW5kUG9pbnQsXG4gIGdldEJsb2NrU3RhcnRQb2ludCxcbiAgaXNFcXVhbFNlbGVjdGlvblBvaW50cyxcbiAgaXNLZXllZFNlZ21lbnRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmlzLWVxdWFsLXNlbGVjdGlvbi1wb2ludHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-equal-selection-points.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.reverse-selection.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.reverse-selection.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reverseSelection: () => (/* binding */ reverseSelection)\n/* harmony export */ });\nfunction reverseSelection(selection) {\n  return selection.backward ? {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: !1\n  } : {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: !0\n  };\n}\n\n//# sourceMappingURL=util.reverse-selection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5yZXZlcnNlLXNlbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9saWIvX2NodW5rcy1lcy91dGlsLnJldmVyc2Utc2VsZWN0aW9uLmpzPzMyOTEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcmV2ZXJzZVNlbGVjdGlvbihzZWxlY3Rpb24pIHtcbiAgcmV0dXJuIHNlbGVjdGlvbi5iYWNrd2FyZCA/IHtcbiAgICBhbmNob3I6IHNlbGVjdGlvbi5mb2N1cyxcbiAgICBmb2N1czogc2VsZWN0aW9uLmFuY2hvcixcbiAgICBiYWNrd2FyZDogITFcbiAgfSA6IHtcbiAgICBhbmNob3I6IHNlbGVjdGlvbi5mb2N1cyxcbiAgICBmb2N1czogc2VsZWN0aW9uLmFuY2hvcixcbiAgICBiYWNrd2FyZDogITBcbiAgfTtcbn1cbmV4cG9ydCB7XG4gIHJldmVyc2VTZWxlY3Rpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLnJldmVyc2Utc2VsZWN0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.reverse-selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sliceBlocks: () => (/* binding */ sliceBlocks)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction sliceBlocks({\n  blocks,\n  selection\n}) {\n  const slice = [];\n  if (!selection)\n    return slice;\n  let startBlock;\n  const middleBlocks = [];\n  let endBlock;\n  const startPoint = selection.backward ? selection.focus : selection.anchor, endPoint = selection.backward ? selection.anchor : selection.focus, startBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(startPoint.path[0]) ? startPoint.path[0]._key : void 0, endBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(endPoint.path[0]) ? endPoint.path[0]._key : void 0, startChildKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(startPoint.path[2]) ? startPoint.path[2]._key : void 0, endChildKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(endPoint.path[2]) ? endPoint.path[2]._key : void 0;\n  if (!startBlockKey || !endBlockKey)\n    return slice;\n  for (const block of blocks) {\n    if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && block._key === startBlockKey && block._key === endBlockKey) {\n      startBlock = block;\n      break;\n    }\n    if (block._key === startBlockKey) {\n      if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        startBlock = block;\n        continue;\n      }\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n              const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);\n              startBlock = {\n                ...block,\n                children: [{\n                  ...child,\n                  text\n                }]\n              };\n            } else\n              startBlock = {\n                ...block,\n                children: [child]\n              };\n            if (startChildKey === endChildKey)\n              break;\n            continue;\n          }\n          if (startBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(startBlock) && (startBlock.children.push(child), block._key === endBlockKey && endChildKey && child._key === endChildKey))\n            break;\n        }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (startBlock = block, startBlockKey === endBlockKey)\n        break;\n    }\n    if (block._key === endBlockKey) {\n      if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        endBlock = block;\n        break;\n      }\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: []\n        };\n        for (const child of block.children)\n          if (endBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(endBlock)) {\n            if (child._key === endChildKey && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset)\n              });\n              break;\n            }\n            if (endBlock.children.push(child), endChildKey && child._key === endChildKey)\n              break;\n          }\n        break;\n      }\n      endBlock = block;\n      break;\n    }\n    startBlock && middleBlocks.push(block);\n  }\n  return [...startBlock ? [startBlock] : [], ...middleBlocks, ...endBlock ? [endBlock] : []];\n}\n\n//# sourceMappingURL=util.slice-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5zbGljZS1ibG9ja3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEY7QUFDMUY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtLQUFrSywyREFBWSx1RUFBdUUsMkRBQVkscUVBQXFFLDJEQUFZLHVFQUF1RSwyREFBWTtBQUNyYTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHNFQUF1QjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0VBQXVCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpRUFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0VBQXVCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzRUFBdUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHNFQUF1QjtBQUNqRCw4Q0FBOEMsaUVBQWtCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9saWIvX2NodW5rcy1lcy91dGlsLnNsaWNlLWJsb2Nrcy5qcz84ODc2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzS2V5U2VnbWVudCwgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2ssIGlzUG9ydGFibGVUZXh0U3BhbiB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5mdW5jdGlvbiBzbGljZUJsb2Nrcyh7XG4gIGJsb2NrcyxcbiAgc2VsZWN0aW9uXG59KSB7XG4gIGNvbnN0IHNsaWNlID0gW107XG4gIGlmICghc2VsZWN0aW9uKVxuICAgIHJldHVybiBzbGljZTtcbiAgbGV0IHN0YXJ0QmxvY2s7XG4gIGNvbnN0IG1pZGRsZUJsb2NrcyA9IFtdO1xuICBsZXQgZW5kQmxvY2s7XG4gIGNvbnN0IHN0YXJ0UG9pbnQgPSBzZWxlY3Rpb24uYmFja3dhcmQgPyBzZWxlY3Rpb24uZm9jdXMgOiBzZWxlY3Rpb24uYW5jaG9yLCBlbmRQb2ludCA9IHNlbGVjdGlvbi5iYWNrd2FyZCA/IHNlbGVjdGlvbi5hbmNob3IgOiBzZWxlY3Rpb24uZm9jdXMsIHN0YXJ0QmxvY2tLZXkgPSBpc0tleVNlZ21lbnQoc3RhcnRQb2ludC5wYXRoWzBdKSA/IHN0YXJ0UG9pbnQucGF0aFswXS5fa2V5IDogdm9pZCAwLCBlbmRCbG9ja0tleSA9IGlzS2V5U2VnbWVudChlbmRQb2ludC5wYXRoWzBdKSA/IGVuZFBvaW50LnBhdGhbMF0uX2tleSA6IHZvaWQgMCwgc3RhcnRDaGlsZEtleSA9IGlzS2V5U2VnbWVudChzdGFydFBvaW50LnBhdGhbMl0pID8gc3RhcnRQb2ludC5wYXRoWzJdLl9rZXkgOiB2b2lkIDAsIGVuZENoaWxkS2V5ID0gaXNLZXlTZWdtZW50KGVuZFBvaW50LnBhdGhbMl0pID8gZW5kUG9pbnQucGF0aFsyXS5fa2V5IDogdm9pZCAwO1xuICBpZiAoIXN0YXJ0QmxvY2tLZXkgfHwgIWVuZEJsb2NrS2V5KVxuICAgIHJldHVybiBzbGljZTtcbiAgZm9yIChjb25zdCBibG9jayBvZiBibG9ja3MpIHtcbiAgICBpZiAoIWlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSAmJiBibG9jay5fa2V5ID09PSBzdGFydEJsb2NrS2V5ICYmIGJsb2NrLl9rZXkgPT09IGVuZEJsb2NrS2V5KSB7XG4gICAgICBzdGFydEJsb2NrID0gYmxvY2s7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IHN0YXJ0QmxvY2tLZXkpIHtcbiAgICAgIGlmICghaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soYmxvY2spKSB7XG4gICAgICAgIHN0YXJ0QmxvY2sgPSBibG9jaztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnRDaGlsZEtleSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKGNoaWxkLl9rZXkgPT09IHN0YXJ0Q2hpbGRLZXkpIHtcbiAgICAgICAgICAgIGlmIChpc1BvcnRhYmxlVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBjaGlsZC5fa2V5ID09PSBlbmRDaGlsZEtleSA/IGNoaWxkLnRleHQuc2xpY2Uoc3RhcnRQb2ludC5vZmZzZXQsIGVuZFBvaW50Lm9mZnNldCkgOiBjaGlsZC50ZXh0LnNsaWNlKHN0YXJ0UG9pbnQub2Zmc2V0KTtcbiAgICAgICAgICAgICAgc3RhcnRCbG9jayA9IHtcbiAgICAgICAgICAgICAgICAuLi5ibG9jayxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgc3RhcnRCbG9jayA9IHtcbiAgICAgICAgICAgICAgICAuLi5ibG9jayxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW2NoaWxkXVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHN0YXJ0Q2hpbGRLZXkgPT09IGVuZENoaWxkS2V5KVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhcnRCbG9jayAmJiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhzdGFydEJsb2NrKSAmJiAoc3RhcnRCbG9jay5jaGlsZHJlbi5wdXNoKGNoaWxkKSwgYmxvY2suX2tleSA9PT0gZW5kQmxvY2tLZXkgJiYgZW5kQ2hpbGRLZXkgJiYgY2hpbGQuX2tleSA9PT0gZW5kQ2hpbGRLZXkpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0QmxvY2tLZXkgPT09IGVuZEJsb2NrS2V5KVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydEJsb2NrID0gYmxvY2ssIHN0YXJ0QmxvY2tLZXkgPT09IGVuZEJsb2NrS2V5KVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGVuZEJsb2NrS2V5KSB7XG4gICAgICBpZiAoIWlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgICBlbmRCbG9jayA9IGJsb2NrO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChlbmRDaGlsZEtleSkge1xuICAgICAgICBlbmRCbG9jayA9IHtcbiAgICAgICAgICAuLi5ibG9jayxcbiAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBibG9jay5jaGlsZHJlbilcbiAgICAgICAgICBpZiAoZW5kQmxvY2sgJiYgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soZW5kQmxvY2spKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQuX2tleSA9PT0gZW5kQ2hpbGRLZXkgJiYgaXNQb3J0YWJsZVRleHRTcGFuKGNoaWxkKSkge1xuICAgICAgICAgICAgICBlbmRCbG9jay5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgICAgICAgICB0ZXh0OiBjaGlsZC50ZXh0LnNsaWNlKDAsIGVuZFBvaW50Lm9mZnNldClcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZEJsb2NrLmNoaWxkcmVuLnB1c2goY2hpbGQpLCBlbmRDaGlsZEtleSAmJiBjaGlsZC5fa2V5ID09PSBlbmRDaGlsZEtleSlcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGVuZEJsb2NrID0gYmxvY2s7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc3RhcnRCbG9jayAmJiBtaWRkbGVCbG9ja3MucHVzaChibG9jayk7XG4gIH1cbiAgcmV0dXJuIFsuLi5zdGFydEJsb2NrID8gW3N0YXJ0QmxvY2tdIDogW10sIC4uLm1pZGRsZUJsb2NrcywgLi4uZW5kQmxvY2sgPyBbZW5kQmxvY2tdIDogW11dO1xufVxuZXhwb3J0IHtcbiAgc2xpY2VCbG9ja3Ncbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLnNsaWNlLWJsb2Nrcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.EventListenerPlugin),\n/* harmony export */   EditorProvider: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.defineSchema),\n/* harmony export */   keyGenerator: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.useEditor),\n/* harmony export */   useEditorSelector: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* reexport safe */ _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_chunks-es/plugin.event-listener.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/plugin.event-listener.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/./node_modules/lodash/noop.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction normalizePoint(point, value) {\n  if (!point || !value)\n    return null;\n  const newPath = [];\n  let newOffset = point.offset || 0;\n  const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk) => blk._key === blockKey);\n  if (block)\n    newPath.push({\n      _key: block._key\n    });\n  else\n    return null;\n  if (block && point.path[1] === \"children\") {\n    if (!block.children || Array.isArray(block.children) && block.children.length === 0)\n      return null;\n    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);\n    if (child)\n      newPath.push(\"children\"), newPath.push({\n        _key: child._key\n      }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n    else\n      return null;\n  }\n  return {\n    path: newPath,\n    offset: newOffset\n  };\n}\nfunction normalizeSelection(selection, value) {\n  if (!selection || !value || value.length === 0)\n    return null;\n  let newAnchor = null, newFocus = null;\n  const {\n    anchor,\n    focus\n  } = selection;\n  return anchor && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__({\n    _key: blk._key\n  }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__({\n    _key: blk._key\n  }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n    anchor: newAnchor,\n    focus: newFocus,\n    backward: selection.backward\n  } : null;\n}\nfunction DefaultBlockObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.value._key || $[2] !== props.value._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { style: t0, children: [\n    \"[\",\n    props.value._type,\n    \": \",\n    props.value._key,\n    \"]\"\n  ] }), $[1] = props.value._key, $[2] = props.value._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction DefaultInlineObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.value._key || $[2] !== props.value._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { style: t0, children: [\n    \"[\",\n    props.value._type,\n    \": \",\n    props.value._key,\n    \"]\"\n  ] }), $[1] = props.value._key, $[2] = props.value._type, $[3] = t1) : t1 = $[3], t1;\n}\nconst debug$3 = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"components:DraggableBlock\"), DraggableBlock = (t0) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_4__.c)(51), {\n    children,\n    element,\n    readOnly,\n    blockRef\n  } = t0, editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_7__.useSlateStatic)(), dragGhostRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(void 0), [isDragOver, setIsDragOver] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!1);\n  let t1, t2;\n  $[0] !== editor || $[1] !== element ? (t2 = slate__WEBPACK_IMPORTED_MODULE_8__.Editor.isVoid(editor, element), $[0] = editor, $[1] = element, $[2] = t2) : t2 = $[2], t1 = t2;\n  const isVoid = t1;\n  let t3, t4;\n  $[3] !== editor || $[4] !== element ? (t4 = slate__WEBPACK_IMPORTED_MODULE_8__.Editor.isInline(editor, element), $[3] = editor, $[4] = element, $[5] = t4) : t4 = $[5], t3 = t4;\n  const isInline = t3, [blockElement, setBlockElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n  let t5, t6;\n  $[6] !== blockRef || $[7] !== editor || $[8] !== element ? (t5 = () => setBlockElement(blockRef ? blockRef.current : slate_react__WEBPACK_IMPORTED_MODULE_7__.ReactEditor.toDOMNode(editor, element)), t6 = [editor, element, blockRef], $[6] = blockRef, $[7] = editor, $[8] = element, $[9] = t5, $[10] = t6) : (t5 = $[9], t6 = $[10]), (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(t5, t6);\n  let t7;\n  $[11] !== blockElement || $[12] !== editor || $[13] !== element ? (t7 = (event) => {\n    const isMyDragOver = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_ELEMENT.get(editor);\n    if (!isMyDragOver || !blockElement)\n      return;\n    event.preventDefault(), event.dataTransfer.dropEffect = \"move\", _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_ELEMENT_TARGET.set(editor, element);\n    const elementRect = blockElement.getBoundingClientRect(), offset = elementRect.top, height = elementRect.height, Y = event.pageY, loc = Math.abs(offset - Y);\n    if (element === editor.children[0] || (loc < height / 2 ? _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"top\") : _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"bottom\")), isMyDragOver === element) {\n      event.dataTransfer.dropEffect = \"none\";\n      return;\n    }\n    setIsDragOver(!0);\n  }, $[11] = blockElement, $[12] = editor, $[13] = element, $[14] = t7) : t7 = $[14];\n  const handleDragOver = t7;\n  let t8;\n  $[15] === Symbol.for(\"react.memo_cache_sentinel\") ? (t8 = () => {\n    setIsDragOver(!1);\n  }, $[15] = t8) : t8 = $[15];\n  const handleDragLeave = t8;\n  let t9;\n  $[16] !== editor || $[17] !== element ? (t9 = (event_0) => {\n    const targetBlock = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_ELEMENT_TARGET.get(editor);\n    if (targetBlock) {\n      _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING.set(editor, !1), event_0.preventDefault(), event_0.stopPropagation(), _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_ELEMENT_TARGET.delete(editor), dragGhostRef.current && (debug$3(\"Removing drag ghost\"), document.body.removeChild(dragGhostRef.current));\n      const dragPosition = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor);\n      _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor);\n      let targetPath = slate_react__WEBPACK_IMPORTED_MODULE_7__.ReactEditor.findPath(editor, targetBlock);\n      const myPath = slate_react__WEBPACK_IMPORTED_MODULE_7__.ReactEditor.findPath(editor, element), isBefore = slate__WEBPACK_IMPORTED_MODULE_8__.Path.isBefore(myPath, targetPath);\n      if (dragPosition === \"bottom\" && !isBefore) {\n        if (targetPath[0] >= editor.children.length - 1) {\n          debug$3(\"target is already at the bottom, not moving\");\n          return;\n        }\n        const originalPath = targetPath;\n        targetPath = slate__WEBPACK_IMPORTED_MODULE_8__.Path.next(targetPath), debug$3(`Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(targetPath)}`);\n      }\n      if (dragPosition === \"top\" && isBefore && targetPath[0] !== editor.children.length - 1) {\n        const originalPath_0 = targetPath;\n        targetPath = slate__WEBPACK_IMPORTED_MODULE_8__.Path.previous(targetPath), debug$3(`Adjusting targetPath from ${JSON.stringify(originalPath_0)} to ${JSON.stringify(targetPath)}`);\n      }\n      if (slate__WEBPACK_IMPORTED_MODULE_8__.Path.equals(targetPath, myPath)) {\n        event_0.preventDefault(), debug$3(\"targetPath and myPath is the same, not moving\");\n        return;\n      }\n      debug$3(`Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(targetPath)} (${dragPosition})`), slate__WEBPACK_IMPORTED_MODULE_8__.Transforms.moveNodes(editor, {\n        at: myPath,\n        to: targetPath\n      }), editor.onChange();\n      return;\n    }\n    debug$3(\"No target element, not doing anything\");\n  }, $[16] = editor, $[17] = element, $[18] = t9) : t9 = $[18];\n  const handleDragEnd = t9;\n  let t10;\n  $[19] !== editor || $[20] !== element ? (t10 = (event_1) => {\n    _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_ELEMENT.get(editor) && (debug$3(\"On drop (prevented)\", element), event_1.preventDefault(), event_1.stopPropagation(), setIsDragOver(!1));\n  }, $[19] = editor, $[20] = element, $[21] = t10) : t10 = $[21];\n  const handleDrop = t10;\n  let t11;\n  $[22] !== editor || $[23] !== element || $[24] !== isVoid ? (t11 = (event_2) => {\n    if (!isVoid) {\n      _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_ELEMENT.delete(editor);\n      return;\n    }\n    _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING.set(editor, !0), _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_ELEMENT.set(editor, element), event_2.stopPropagation();\n    const target = event_2.target;\n    target instanceof HTMLElement && (target.style.opacity = \"1\");\n  }, $[22] = editor, $[23] = element, $[24] = isVoid, $[25] = t11) : t11 = $[25];\n  const handleDrag = t11;\n  let t12;\n  $[26] !== blockElement || $[27] !== editor || $[28] !== handleDrag || $[29] !== isInline || $[30] !== isVoid ? (t12 = (event_3) => {\n    if (!isVoid || isInline) {\n      debug$3(\"Not dragging block\"), _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_ELEMENT.delete(editor), _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING.set(editor, !1);\n      return;\n    }\n    if (debug$3(\"Drag start\"), _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING.set(editor, !0), event_3.dataTransfer && (event_3.dataTransfer.setData(\"application/portable-text\", \"something\"), event_3.dataTransfer.effectAllowed = \"move\"), blockElement && blockElement instanceof HTMLElement) {\n      let dragGhost = blockElement.cloneNode(!0);\n      const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n      if (customGhost && (dragGhost = customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), document.body) {\n        dragGhostRef.current = dragGhost, dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n        const rect = blockElement.getBoundingClientRect(), x = event_3.clientX - rect.left, y = event_3.clientY - rect.top;\n        dragGhost.style.width = `${rect.width}px`, dragGhost.style.height = `${rect.height}px`, event_3.dataTransfer.setDragImage(dragGhost, x, y);\n      }\n    }\n    handleDrag(event_3);\n  }, $[26] = blockElement, $[27] = editor, $[28] = handleDrag, $[29] = isInline, $[30] = isVoid, $[31] = t12) : t12 = $[31];\n  const handleDragStart = t12;\n  let t13;\n  $[32] !== editor || $[33] !== isDragOver ? (t13 = isDragOver && editor.children[0] === _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_ELEMENT_TARGET.get(editor), $[32] = editor, $[33] = isDragOver, $[34] = t13) : t13 = $[34];\n  const isDraggingOverFirstBlock = t13;\n  let t14;\n  $[35] !== editor || $[36] !== isDragOver ? (t14 = isDragOver && editor.children[editor.children.length - 1] === _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_ELEMENT_TARGET.get(editor), $[35] = editor, $[36] = isDragOver, $[37] = t14) : t14 = $[37];\n  const isDraggingOverLastBlock = t14, dragPosition_0 = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor), isDraggingOverTop = isDraggingOverFirstBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"top\", isDraggingOverBottom = isDraggingOverLastBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"bottom\";\n  let t15, t16;\n  $[38] === Symbol.for(\"react.memo_cache_sentinel\") ? (t16 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"pt-drop-indicator\", style: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 1,\n    borderBottom: \"1px solid currentColor\",\n    zIndex: 5\n  } }), $[38] = t16) : t16 = $[38], t15 = t16;\n  const dropIndicator = t15;\n  if (readOnly) {\n    let t172;\n    return $[39] !== children ? (t172 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children }), $[39] = children, $[40] = t172) : t172 = $[40], t172;\n  }\n  const t17 = isDraggingOverTop && dropIndicator, t18 = isDraggingOverBottom && dropIndicator;\n  let t19;\n  return $[41] !== children || $[42] !== handleDrag || $[43] !== handleDragEnd || $[44] !== handleDragOver || $[45] !== handleDragStart || $[46] !== handleDrop || $[47] !== isVoid || $[48] !== t17 || $[49] !== t18 ? (t19 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { draggable: isVoid, onDragStart: handleDragStart, onDrag: handleDrag, onDragOver: handleDragOver, onDragLeave: handleDragLeave, onDragEnd: handleDragEnd, onDrop: handleDrop, children: [\n    t17,\n    children,\n    t18\n  ] }), $[41] = children, $[42] = handleDrag, $[43] = handleDragEnd, $[44] = handleDragOver, $[45] = handleDragStart, $[46] = handleDrop, $[47] = isVoid, $[48] = t17, $[49] = t18, $[50] = t19) : t19 = $[50], t19;\n};\nDraggableBlock.displayName = \"DraggableBlock\";\n(0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"components:Element\");\nconst EMPTY_ANNOTATIONS = [], inlineBlockStyle = {\n  display: \"inline-block\"\n}, Element = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck\n}) => {\n  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_7__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_7__.useSelected)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null), inlineBlockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null), focused = selected && editor.selection && slate__WEBPACK_IMPORTED_MODULE_8__.Range.isCollapsed(editor.selection) || !1, value = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.fromSlateValue)([element], schemaTypes.block.name, _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.KEY_TO_VALUE_ELEMENT.get(editor))[0], [editor, element, schemaTypes.block.name]);\n  let renderedBlock = children, className;\n  const blockPath = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => [{\n    _key: element._key\n  }], [element]);\n  if (typeof element._type != \"string\")\n    throw new Error(\"Expected element to have a _type property\");\n  if (typeof element._key != \"string\")\n    throw new Error(\"Expected element to have a _key property\");\n  if (editor.isInline(element)) {\n    const path = slate_react__WEBPACK_IMPORTED_MODULE_7__.ReactEditor.findPath(editor, element), [block] = slate__WEBPACK_IMPORTED_MODULE_8__.Editor.node(editor, path, {\n      depth: 1\n    }), schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type);\n    if (!schemaType)\n      throw new Error(\"Could not find type for inline block element\");\n    if (slate__WEBPACK_IMPORTED_MODULE_8__.Element.isElement(block)) {\n      const elmPath = [{\n        _key: block._key\n      }, \"children\", {\n        _key: element._key\n      }];\n      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { ...attributes, children: [\n        children,\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { draggable: !readOnly, className: \"pt-inline-object\", \"data-testid\": \"pt-inline-object\", ref: inlineBlockObjectRef, style: inlineBlockStyle, contentEditable: !1, children: [\n          renderChild && renderChild({\n            annotations: EMPTY_ANNOTATIONS,\n            // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultInlineObject, { value }),\n            editorElementRef: inlineBlockObjectRef,\n            focused,\n            path: elmPath,\n            schemaType,\n            selected,\n            type: schemaType,\n            value\n          }),\n          !renderChild && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultInlineObject, { value })\n        ] }, element._key)\n      ] });\n    }\n    throw new Error(\"Block not found!\");\n  }\n  if (element._type === schemaTypes.block.name) {\n    className = \"pt-block pt-text-block\";\n    const isListItem = \"listItem\" in element, style = \"style\" in element && element.style || \"normal\";\n    className = `pt-block pt-text-block pt-text-block-style-${style}`;\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style);\n    renderStyle && blockStyleType && (renderedBlock = renderStyle({\n      block: element,\n      children,\n      focused,\n      selected,\n      value: style,\n      path: blockPath,\n      schemaType: blockStyleType,\n      editorElementRef: blockRef\n    }));\n    let level;\n    if (isListItem && (typeof element.level == \"number\" && (level = element.level), className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`), editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item_0) => item_0.value === element.listItem);\n      renderListItem && listType && (renderedBlock = renderListItem({\n        block: value,\n        children: renderedBlock,\n        focused,\n        selected,\n        value: element.listItem,\n        path: blockPath,\n        schemaType: listType,\n        level: value.level || 1,\n        editorElementRef: blockRef\n      }));\n    }\n    const renderProps = Object.defineProperty({\n      children: renderedBlock,\n      editorElementRef: blockRef,\n      focused,\n      level,\n      listItem: isListItem ? element.listItem : void 0,\n      path: blockPath,\n      selected,\n      style,\n      schemaType: schemaTypes.block,\n      value\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.block;\n      }\n    }), propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ...attributes, className, spellCheck, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DraggableBlock, { element, readOnly, blockRef, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ref: blockRef, children: propsOrDefaultRendered }) }) }, element._key);\n  }\n  const schemaType_0 = schemaTypes.blockObjects.find((_type_0) => _type_0.name === element._type);\n  if (!schemaType_0)\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`);\n  className = \"pt-block pt-object-block\";\n  const block_0 = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.fromSlateValue)([element], schemaTypes.block.name, _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.KEY_TO_VALUE_ELEMENT.get(editor))[0];\n  let renderedBlockFromProps;\n  if (renderBlock) {\n    const _props = Object.defineProperty({\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultBlockObject, { value }),\n      editorElementRef: blockRef,\n      focused,\n      path: blockPath,\n      schemaType: schemaType_0,\n      selected,\n      value: block_0\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n      }\n    });\n    renderedBlockFromProps = renderBlock(_props);\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { ...attributes, className, children: [\n    children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DraggableBlock, { element, readOnly, blockRef, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ref: blockRef, contentEditable: !1, children: renderedBlockFromProps || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultBlockObject, { value }) }) })\n  ] }, element._key);\n};\nElement.displayName = \"Element\";\nconst debug$2 = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"components:Leaf\"), EMPTY_MARKS = [], Leaf = (props) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation\n  } = props, spanRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null), portableTextEditor = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.usePortableTextEditor)(), blockSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_7__.useSelected)(), [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!1), [selected, setSelected] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!1), block = children.props.parent, path = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => block ? [{\n    _key: block?._key\n  }, \"children\", {\n    _key: leaf._key\n  }] : [], [block, leaf._key]), decoratorValues = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => schemaTypes.decorators.map((dec) => dec.value), [schemaTypes.decorators]), marks = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => lodash_uniq_js__WEBPACK_IMPORTED_MODULE_5__((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))), [decoratorValues, leaf.marks]), annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS, annotations = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => annotationMarks.map((mark_0) => !decoratorValues.includes(mark_0) && block?.markDefs?.find((def) => def._key === mark_0)).filter(Boolean), [annotationMarks, block, decoratorValues]), shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected;\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(!1);\n      return;\n    }\n    const sel = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getSelection(portableTextEditor);\n    sel && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(sel.focus.path, path) && _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.isCollapsedSelection(portableTextEditor) && (0,react__WEBPACK_IMPORTED_MODULE_3__.startTransition)(() => {\n      setFocused(!0);\n    });\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor]);\n  const setSelectedFromRange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    debug$2(\"Setting selection and focus from range\");\n    const winSelection = window.getSelection();\n    if (!winSelection) {\n      setSelected(!1);\n      return;\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0);\n      spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);\n    } else\n      setSelected(!1);\n  }, [shouldTrackSelectionAndFocus]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const onBlur = editorActor.on(\"blur\", () => {\n      setFocused(!1), setSelected(!1);\n    }), onFocus = editorActor.on(\"focus\", () => {\n      const sel_0 = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getSelection(portableTextEditor);\n      sel_0 && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(sel_0.focus.path, path) && _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();\n    }), onSelection = editorActor.on(\"selection\", (event) => {\n      event.selection && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(event.selection.focus.path, path) && _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();\n    });\n    return () => {\n      onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();\n    };\n  }, [editorActor, path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus]), (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => setSelectedFromRange(), [setSelectedFromRange]);\n  const content = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n    let returnedChildren = children;\n    if (slate__WEBPACK_IMPORTED_MODULE_8__.Text.isText(leaf) && leaf._type === schemaTypes.span.name && (marks.forEach((mark_1) => {\n      const schemaType = schemaTypes.decorators.find((dec_0) => dec_0.value === mark_1);\n      if (schemaType && renderDecorator) {\n        const _props = Object.defineProperty({\n          children: returnedChildren,\n          editorElementRef: spanRef,\n          focused,\n          path,\n          selected,\n          schemaType,\n          value: mark_1\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType;\n          }\n        });\n        returnedChildren = renderDecorator(_props);\n      }\n    }), block && annotations.length > 0 && annotations.forEach((annotation) => {\n      const schemaType_0 = schemaTypes.annotations.find((t) => t.name === annotation._type);\n      if (schemaType_0)\n        if (renderAnnotation) {\n          const _props_0 = Object.defineProperty({\n            block,\n            children: returnedChildren,\n            editorElementRef: spanRef,\n            focused,\n            path,\n            selected,\n            schemaType: schemaType_0,\n            value: annotation\n          }, \"type\", {\n            enumerable: !1,\n            get() {\n              return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n            }\n          });\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { ref: spanRef, children: renderAnnotation(_props_0) });\n        } else\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { ref: spanRef, children: returnedChildren });\n    }), block && renderChild)) {\n      const child = block.children.find((_child) => _child._key === leaf._key);\n      if (child) {\n        const _props_1 = Object.defineProperty({\n          annotations,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: returnedChildren }),\n          editorElementRef: spanRef,\n          focused,\n          path,\n          schemaType: schemaTypes.span,\n          selected,\n          value: child\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.span;\n          }\n        });\n        returnedChildren = renderChild(_props_1);\n      }\n    }\n    return returnedChildren;\n  }, [annotations, block, children, focused, leaf, marks, path, renderAnnotation, renderChild, renderDecorator, schemaTypes.annotations, schemaTypes.decorators, schemaTypes.span, selected]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { ...attributes, ref: spanRef, children: content }, leaf._key), [leaf, attributes, content]);\n};\nLeaf.displayName = \"Leaf\";\nconst debug$1 = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"plugin:withHotKeys\");\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n  const reservedHotkeys = [\"enter\", \"tab\", \"shift\", \"delete\", \"end\"], activeHotkeys = hotkeysFromOptions ?? {};\n  return function(editor) {\n    return editor.pteWithHotKeys = (event) => {\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === \"marks\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_9__.isHotkey)(hotkey, event.nativeEvent)) {\n              event.preventDefault();\n              const possibleMark = activeHotkeys[cat];\n              if (possibleMark) {\n                const mark = possibleMark[hotkey];\n                debug$1(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                  type: \"behavior event\",\n                  behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                  },\n                  editor\n                });\n              }\n            }\n          }\n        if (cat === \"custom\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_9__.isHotkey)(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat];\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey];\n                command(event, portableTextEditor);\n              }\n            }\n          }\n      });\n    }, editor;\n  };\n}\nfunction withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations\n}) {\n  const originalApply = slateEditor.apply;\n  return slateEditor.apply = (op) => {\n    originalApply(op), !editorActor.getSnapshot().matches({\n      \"edit mode\": \"read only\"\n    }) && op.type !== \"set_selection\" && syncRangeDecorations(op);\n  }, () => {\n    slateEditor.apply = originalApply;\n  };\n}\nconst debug = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"component:Editable\"), PLACEHOLDER_STYLE = {\n  position: \"absolute\",\n  userSelect: \"none\",\n  pointerEvents: \"none\",\n  left: 0,\n  right: 0\n}, PortableTextEditable = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props, portableTextEditor = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.usePortableTextEditor)(), ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null), [editableElement, setEditableElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!1), [rangeDecorationState, setRangeDecorationsState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useImperativeHandle)(forwardedRef, () => ref.current);\n  const rangeDecorationsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(rangeDecorations), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.EditorActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_10__.useSelector)(editorActor, (s) => s.matches({\n    \"edit mode\": \"read only\"\n  })), schemaTypes = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_10__.useSelector)(editorActor, (s_0) => s_0.context.schema), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_7__.useSlate)(), blockTypeName = schemaTypes.block.name;\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n    if (readOnly)\n      return debug(\"Editable is in read only mode\"), slateEditor;\n    const withHotKeys = createWithHotkeys(editorActor, portableTextEditor, hotkeys);\n    return debug(\"Editable is in edit mode\"), withHotKeys(slateEditor);\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor]);\n  const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((eProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Element, { ...eProps, readOnly, renderBlock, renderChild, renderListItem, renderStyle, schemaTypes, spellCheck }), [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]), renderLeaf = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((lProps) => {\n    if (lProps.leaf._type === \"span\") {\n      let rendered = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Leaf, { ...lProps, editorActor, schemaTypes, renderAnnotation, renderChild, renderDecorator, readOnly });\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === \"\")\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: renderPlaceholder() }),\n          rendered\n        ] });\n      const decoration = lProps.leaf.rangeDecoration;\n      return decoration && (rendered = decoration.component({\n        children: rendered\n      })), rendered;\n    }\n    return lProps.children;\n  }, [editorActor, readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder, schemaTypes]), restoreSelectionFromProps = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`);\n      const normalizedSelection = normalizeSelection(propsSelection, (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.fromSlateValue)(slateEditor.children, blockTypeName));\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n        const slateRange = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.toSlateRange)(normalizedSelection, slateEditor);\n        slateRange && (slate__WEBPACK_IMPORTED_MODULE_8__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o) => o.type === \"set_selection\") || editorActor.send({\n          type: \"notify.selection\",\n          selection: normalizedSelection\n        }), slateEditor.onChange());\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor]), syncRangeDecorations = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((operation) => {\n    if (rangeDecorations && rangeDecorations.length > 0) {\n      const newSlateRanges = [];\n      if (rangeDecorations.forEach((rangeDecorationItem) => {\n        const slateRange_0 = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.toSlateRange)(rangeDecorationItem.selection, slateEditor);\n        if (!slate__WEBPACK_IMPORTED_MODULE_8__.Range.isRange(slateRange_0)) {\n          rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n            newSelection: null,\n            rangeDecoration: rangeDecorationItem,\n            origin: \"local\"\n          });\n          return;\n        }\n        let newRange;\n        if (operation && (newRange = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.moveRangeByOperation)(slateRange_0, operation), newRange && newRange !== slateRange_0 || newRange === null && slateRange_0)) {\n          const value = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getValue(portableTextEditor), newRangeSelection = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.toPortableTextRange)(value, newRange, schemaTypes);\n          rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n            newSelection: newRangeSelection,\n            rangeDecoration: rangeDecorationItem,\n            origin: \"local\"\n          });\n        }\n        newRange !== null && newSlateRanges.push({\n          ...newRange || slateRange_0,\n          rangeDecoration: rangeDecorationItem\n        });\n      }), newSlateRanges.length > 0) {\n        setRangeDecorationsState(newSlateRanges);\n        return;\n      }\n    }\n    setRangeDecorationsState((rangeDecorationState_0) => rangeDecorationState_0.length > 0 ? [] : rangeDecorationState_0);\n  }, [portableTextEditor, rangeDecorations, schemaTypes, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    const onReady = editorActor.on(\"ready\", () => {\n      syncRangeDecorations(), restoreSelectionFromProps();\n    }), onInvalidValue = editorActor.on(\"invalid value\", () => {\n      setHasInvalidValue(!0);\n    }), onValueChanged = editorActor.on(\"value changed\", () => {\n      setHasInvalidValue(!1);\n    });\n    return () => {\n      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n    };\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps]);\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    syncedRangeDecorations || (setSyncedRangeDecorations(!0), syncRangeDecorations());\n  }, [syncRangeDecorations, syncedRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(rangeDecorations, rangeDecorationsRef.current) || syncRangeDecorations(), rangeDecorationsRef.current = rangeDecorations;\n  }, [rangeDecorations, syncRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations\n    });\n    return () => teardown();\n  }, [editorActor, slateEditor, syncRangeDecorations]);\n  const handleCopy = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event) => {\n    onCopy ? onCopy(event) !== void 0 && event.preventDefault() : event.nativeEvent.clipboardData && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"copy\",\n        data: event.nativeEvent.clipboardData\n      },\n      editor: slateEditor,\n      nativeEvent: event\n    });\n  }, [onCopy, editorActor, slateEditor]), handlePaste = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event_0) => {\n    const value_0 = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getValue(portableTextEditor), path = (0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.toPortableTextRange)(value_0, slateEditor.selection, schemaTypes)?.focus.path || [], onPasteResult = onPaste?.({\n      event: event_0,\n      value: value_0,\n      path,\n      schemaTypes\n    });\n    onPasteResult || !slateEditor.selection ? (event_0.preventDefault(), editorActor.send({\n      type: \"notify.loading\"\n    }), Promise.resolve(onPasteResult).then((result_0) => {\n      debug(\"Custom paste function from client resolved\", result_0), !result_0 || !result_0.insert ? (debug(\"No result from custom paste handler, pasting normally\"), slateEditor.insertData(event_0.clipboardData)) : result_0.insert ? slateEditor.insertFragment((0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.toSlateValue)(result_0.insert, {\n        schemaTypes\n      })) : console.warn(\"Your onPaste function returned something unexpected:\", result_0);\n    }).catch((error) => (console.error(error), error)).finally(() => {\n      editorActor.send({\n        type: \"notify.done loading\"\n      });\n    })) : event_0.nativeEvent.clipboardData && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"paste\",\n        data: event_0.nativeEvent.clipboardData\n      },\n      editor: slateEditor,\n      nativeEvent: event_0\n    }), debug(\"No result from custom paste handler, pasting normally\");\n  }, [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor]), handleOnFocus = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event_1) => {\n    if (onFocus && onFocus(event_1), !event_1.isDefaultPrevented()) {\n      const selection = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getSelection(portableTextEditor);\n      selection === null && (slate__WEBPACK_IMPORTED_MODULE_8__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_8__.Editor.start(slateEditor, [])), slateEditor.onChange()), editorActor.send({\n        type: \"notify.focused\",\n        event: event_1\n      });\n      const newSelection = _chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getSelection(portableTextEditor);\n      selection === newSelection && editorActor.send({\n        type: \"notify.selection\",\n        selection\n      });\n    }\n  }, [editorActor, onFocus, portableTextEditor, slateEditor]), handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event_2) => {\n    onClick && onClick(event_2);\n    const focusBlockPath = slateEditor.selection ? slateEditor.selection.focus.path.slice(0, 1) : void 0, focusBlock = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_8__.Node.descendant(slateEditor, focusBlockPath) : void 0, [_, lastNodePath] = slate__WEBPACK_IMPORTED_MODULE_8__.Node.last(slateEditor, []), lastBlockPath = lastNodePath.slice(0, 1), lastNodeFocused = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_8__.Path.equals(lastBlockPath, focusBlockPath) : !1, lastBlockIsVoid = focusBlock ? !slateEditor.isTextBlock(focusBlock) : !1;\n    slateEditor.selection && slate__WEBPACK_IMPORTED_MODULE_8__.Range.isCollapsed(slateEditor.selection) && lastNodeFocused && lastBlockIsVoid && (slate__WEBPACK_IMPORTED_MODULE_8__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n      decorators: []\n    })), slateEditor.onChange());\n  }, [onClick, slateEditor]), handleOnBlur = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event_3) => {\n    onBlur && onBlur(event_3), event_3.isPropagationStopped() || editorActor.send({\n      type: \"notify.blurred\",\n      event: event_3\n    });\n  }, [editorActor, onBlur]), handleOnBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event_4) => {\n    onBeforeInput && onBeforeInput(event_4);\n  }, [onBeforeInput]), validateSelection = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n    if (!slateEditor.selection)\n      return;\n    const root = slate_react__WEBPACK_IMPORTED_MODULE_7__.ReactEditor.findDocumentOrShadowRoot(slateEditor), {\n      activeElement\n    } = root;\n    if (ref.current !== activeElement)\n      return;\n    const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_7__.ReactEditor.getWindow(slateEditor).getSelection();\n    if (!domSelection || domSelection.rangeCount === 0)\n      return;\n    const existingDOMRange = domSelection.getRangeAt(0);\n    try {\n      const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_7__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n      (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n    } catch {\n      debug(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_8__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_8__.Transforms.select(slateEditor, [0, 0]), slateEditor.onChange();\n    }\n  }, [ref, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection);\n      return mutationObserver.observe(editableElement, {\n        attributeOldValue: !1,\n        attributes: !1,\n        characterData: !1,\n        childList: !0,\n        subtree: !0\n      }), () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [validateSelection, editableElement]);\n  const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event_5) => {\n    props.onKeyDown && props.onKeyDown(event_5), event_5.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_5), event_5.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"key.down\",\n        keyboardEvent: {\n          key: event_5.key,\n          code: event_5.code,\n          altKey: event_5.altKey,\n          ctrlKey: event_5.ctrlKey,\n          metaKey: event_5.metaKey,\n          shiftKey: event_5.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_5\n    });\n  }, [props, editorActor, slateEditor]), handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event_6) => {\n    props.onKeyUp && props.onKeyUp(event_6), event_6.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"key.up\",\n        keyboardEvent: {\n          key: event_6.key,\n          code: event_6.code,\n          altKey: event_6.altKey,\n          ctrlKey: event_6.ctrlKey,\n          metaKey: event_6.metaKey,\n          shiftKey: event_6.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_6\n    });\n  }, [props, editorActor, slateEditor]), scrollSelectionIntoViewToSlate = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n    if (scrollSelectionIntoView !== void 0)\n      return scrollSelectionIntoView === null ? lodash_noop_js__WEBPACK_IMPORTED_MODULE_2__ : (_editor, domRange) => {\n        scrollSelectionIntoView(portableTextEditor, domRange);\n      };\n  }, [portableTextEditor, scrollSelectionIntoView]), decorate = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(([, path_0]) => {\n    if ((0,_chunks_es_plugin_event_listener_js__WEBPACK_IMPORTED_MODULE_6__.isEqualToEmptyEditor)(slateEditor.children, schemaTypes))\n      return [{\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        },\n        placeholder: !0\n      }];\n    if (path_0.length === 0)\n      return [];\n    const result_1 = rangeDecorationState.filter((item) => slate__WEBPACK_IMPORTED_MODULE_8__.Range.isCollapsed(item) ? path_0.length !== 2 ? !1 : slate__WEBPACK_IMPORTED_MODULE_8__.Path.equals(item.focus.path, path_0) && slate__WEBPACK_IMPORTED_MODULE_8__.Path.equals(item.anchor.path, path_0) : slate__WEBPACK_IMPORTED_MODULE_8__.Range.intersection(item, {\n      anchor: {\n        path: path_0,\n        offset: 0\n      },\n      focus: {\n        path: path_0,\n        offset: 0\n      }\n    }) || slate__WEBPACK_IMPORTED_MODULE_8__.Range.includes(item, path_0));\n    return result_1.length > 0 ? result_1 : [];\n  }, [slateEditor, schemaTypes, rangeDecorationState]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    ref.current = slate_react__WEBPACK_IMPORTED_MODULE_7__.ReactEditor.toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);\n  }, [slateEditor, ref]), portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\n    slate_react__WEBPACK_IMPORTED_MODULE_7__.Editable,\n    {\n      ...restProps,\n      autoFocus: !1,\n      className: restProps.className || \"pt-editable\",\n      decorate,\n      onBlur: handleOnBlur,\n      onCopy: handleCopy,\n      onClick: handleClick,\n      onDOMBeforeInput: handleOnBeforeInput,\n      onFocus: handleOnFocus,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onPaste: handlePaste,\n      readOnly,\n      renderPlaceholder: void 0,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoView: scrollSelectionIntoViewToSlate\n    }\n  ) : null;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/patches/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/patches/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAll: () => (/* binding */ applyAll),\n/* harmony export */   diffMatchPatch: () => (/* binding */ diffMatchPatch),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   prefixPath: () => (/* binding */ prefixPath),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIfMissing: () => (/* binding */ setIfMissing),\n/* harmony export */   unset: () => (/* binding */ unset)\n/* harmony export */ });\n/* harmony import */ var lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isObject.js */ \"(ssr)/./node_modules/lodash/isObject.js\");\n/* harmony import */ var lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isString.js */ \"(ssr)/./node_modules/lodash/isString.js\");\n/* harmony import */ var lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/findIndex.js */ \"(ssr)/./node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/clone.js */ \"(ssr)/./node_modules/lodash/clone.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\n\n\n\n\n\nconst BEFORE = \"before\", AFTER = \"after\";\nfunction insert$1(array, position, index, ...args) {\n  if (position !== BEFORE && position !== AFTER)\n    throw new Error(\n      `Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`\n    );\n  const items = flatten(...args);\n  if (array.length === 0)\n    return items;\n  const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === \"after\" ? idx + 1 : idx, copy = array.slice();\n  return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;\n}\nfunction flatten(...values) {\n  return values.reduce((prev, item) => prev.concat(item), []);\n}\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(\n  Object.prototype.hasOwnProperty\n);\nfunction move(arr, from, to) {\n  const nextValue = arr.slice(), val = nextValue[from];\n  return nextValue.splice(from, 1), nextValue.splice(to, 0, val), nextValue;\n}\nfunction findTargetIndex(array, pathSegment) {\n  if (typeof pathSegment == \"number\")\n    return pathSegment;\n  const index = lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__(array, pathSegment);\n  return index === -1 ? !1 : index;\n}\nfunction apply$3(value, patch) {\n  const nextValue = value.slice();\n  if (patch.path.length === 0) {\n    if (patch.type === \"setIfMissing\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return value === void 0 ? patch.value : value;\n    } else if (patch.type === \"set\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"move\") {\n        if (!patch.value || !hasOwn(patch.value, \"from\") || !hasOwn(patch.value, \"to\"))\n          throw new Error(\n            `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n              patch.value\n            )}`\n          );\n        return move(nextValue, patch.value.from, patch.value.to);\n      }\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path, index = findTargetIndex(value, head);\n  if (index === !1)\n    return nextValue;\n  if (tail.length === 0) {\n    if (patch.type === \"insert\") {\n      const { position, items } = patch;\n      return insert$1(value, position, index, items);\n    } else if (patch.type === \"unset\") {\n      if (typeof index != \"number\")\n        throw new Error(\n          `Expected array index to be a number, instead got \"${index}\"`\n        );\n      return nextValue.splice(index, 1), nextValue;\n    }\n  }\n  return nextValue[index] = _apply(nextValue[index], {\n    ...patch,\n    path: tail\n  }), nextValue;\n}\nfunction apply$2(value, patch) {\n  const nextValue = lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__(value);\n  if (patch.path.length === 0) {\n    if (patch.type === \"set\") {\n      if (!lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(patch.value))\n        throw new Error(\"Cannot set value of an object to a non-object\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"setIfMissing\")\n        return value === void 0 ? patch.value : value;\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path;\n  if (typeof head != \"string\")\n    throw new Error(`Expected field name to be a string, instad got: ${head}`);\n  return tail.length === 0 && patch.type === \"unset\" ? lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__(nextValue, head) : (nextValue[head] = _apply(nextValue[head], {\n    ...patch,\n    path: tail\n  }), nextValue);\n}\nconst OPERATIONS$1 = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  inc(currentValue, nextValue) {\n    return currentValue + nextValue;\n  },\n  dec(currentValue, nextValue) {\n    return currentValue - nextValue;\n  }\n}, SUPPORTED_PATCH_TYPES$1 = Object.keys(OPERATIONS$1);\nfunction apply$1(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES$1.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  return OPERATIONS$1[patch.type](value, patch.value);\n}\nconst OPERATIONS = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  diffMatchPatch(currentValue, nextValue) {\n    const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.applyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.parsePatch)(nextValue), currentValue, {\n      allowExceedingIndices: !0\n    });\n    return result;\n  }\n}, SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);\nfunction apply(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${patch.type}\" and path \"${patch.path.join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  const func = OPERATIONS[patch.type];\n  if (func)\n    return func(value, patch.value);\n  throw new Error(\"Unknown patch type\");\n}\nfunction applyAll(value, patches) {\n  return patches.reduce(_apply, value);\n}\nfunction applyPatch(value, patch) {\n  return Array.isArray(value) ? apply$3(value, patch) : lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__(value) ? apply(value, patch) : lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(value) ? apply$2(value, patch) : apply$1(value, patch);\n}\nfunction _apply(value, patch) {\n  return applyPatch(value, patch);\n}\nfunction setIfMissing(value, path = []) {\n  return {\n    type: \"setIfMissing\",\n    path,\n    value\n  };\n}\nfunction diffMatchPatch(currentValue, nextValue, path = []) {\n  const patches = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.makePatches)(currentValue, nextValue), patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.stringifyPatches)(patches);\n  return { type: \"diffMatchPatch\", path, value: patch };\n}\nfunction insert(items, position, path = []) {\n  return {\n    type: \"insert\",\n    path,\n    position,\n    items\n  };\n}\nfunction set(value, path = []) {\n  return { type: \"set\", path, value };\n}\nfunction unset(path = []) {\n  return { type: \"unset\", path };\n}\nfunction prefixPath(patch, segment) {\n  return {\n    ...patch,\n    path: [segment, ...patch.path]\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/patches/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst _excluded = [\"block\", \"list\", \"listItem\", \"marks\", \"types\"],\n  _excluded2 = [\"listItem\"],\n  _excluded3 = [\"_key\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n\n\n\n\nconst defaultLists = {\n    number: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ol\", {\n      children\n    }),\n    bullet: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n      children\n    })\n  },\n  DefaultListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  link = ({\n    children,\n    value\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n    href: value?.href,\n    children\n  }),\n  underlineStyle = {\n    textDecoration: \"underline\"\n  },\n  defaultMarks = {\n    em: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"em\", {\n      children\n    }),\n    strong: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n      children\n    }),\n    code: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n      children\n    }),\n    underline: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: underlineStyle,\n      children\n    }),\n    \"strike-through\": ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", {\n      children\n    }),\n    link\n  },\n  getTemplate = (type, prop) => `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`,\n  unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\"),\n  unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\"),\n  unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\"),\n  unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\"),\n  unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n  },\n  DefaultUnknownType = ({\n    value,\n    isInline\n  }) => {\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: hidden,\n      children: warning\n    }) : /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      style: hidden,\n      children: warning\n    });\n  },\n  DefaultUnknownMark = ({\n    markType,\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n    className: `unknown__pt__mark__${markType}`,\n    children\n  }),\n  DefaultUnknownBlockStyle = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n    children\n  }),\n  DefaultUnknownList = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n    children\n  }),\n  DefaultUnknownListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  DefaultHardBreak = () => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n  defaultBlockStyles = {\n    normal: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      children\n    }),\n    blockquote: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"blockquote\", {\n      children\n    }),\n    h1: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h1\", {\n      children\n    }),\n    h2: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", {\n      children\n    }),\n    h3: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n      children\n    }),\n    h4: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h4\", {\n      children\n    }),\n    h5: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h5\", {\n      children\n    }),\n    h6: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h6\", {\n      children\n    })\n  },\n  defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n  };\nfunction mergeComponents(parent, overrides) {\n  const {\n      block,\n      list,\n      listItem,\n      marks,\n      types\n    } = overrides,\n    rest = _objectWithoutProperties(overrides, _excluded);\n  return _objectSpread(_objectSpread({}, parent), {}, {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key],\n    parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction PortableText({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning\n}) {\n  const handleMissingComponent = missingComponentHandler || noop,\n    blocks = Array.isArray(input) ? input : [input],\n    nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.LIST_NEST_MODE_HTML),\n    components = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]),\n    renderNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getNodeRenderer(components, handleMissingComponent), [components, handleMissingComponent]),\n    rendered = nested.map((node, index) => renderNode({\n      node,\n      index,\n      isInline: !1,\n      renderNode\n    }));\n  return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: rendered\n  });\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n        node,\n        index,\n        isInline\n      } = options,\n      key = node._key || `node-${index}`;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitList)(node) ? renderList(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextListItemBlock)(node) ? renderListItem(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitSpan)(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextBlock)(node) ? renderBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitTextNode)(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);\n  }\n  function hasCustomComponentForNode(node) {\n    return node._type in components.types;\n  }\n  function renderListItem(node, index, key) {\n    const tree = serializeBlock({\n        node,\n        index,\n        isInline: !1,\n        renderNode\n      }),\n      renderer = components.listItem,\n      Li = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const {\n          listItem\n        } = node,\n        blockNode = _objectWithoutProperties(node, _excluded2);\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: !1,\n        renderNode\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Li, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderList(node, index, key) {\n    const children = node.children.map((child, childIndex) => renderNode({\n        node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n          _key: `li-${index}-${childIndex}`\n        }),\n        index: childIndex,\n        isInline: !1,\n        renderNode\n      })),\n      component = components.list,\n      List = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (List === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderSpan(node, _index, key) {\n    const {\n        markDef,\n        markType,\n        markKey\n      } = node,\n      Span = components.marks[markType] || components.unknownMark,\n      children = node.children.map((child, childIndex) => renderNode({\n        node: child,\n        index: childIndex,\n        isInline: !0,\n        renderNode\n      }));\n    return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n      nodeType: \"mark\",\n      type: markType\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Span, {\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderBlock(node, index, key, isInline) {\n    const _serializeBlock = serializeBlock({\n        node,\n        index,\n        isInline,\n        renderNode\n      }),\n      {\n        _key\n      } = _serializeBlock,\n      props = _objectWithoutProperties(_serializeBlock, _excluded3),\n      style = props.node.style || \"normal\",\n      Block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n      value: props.node,\n      renderNode\n    }), key);\n  }\n  function renderText(node, key) {\n    if (node.text === `\n`) {\n      const HardBreak = components.hardBreak;\n      return HardBreak ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HardBreak, {}, key) : `\n`;\n    }\n    return node.text;\n  }\n  function renderUnknownType(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    };\n    handleMissingComponent(unknownTypeWarning(node._type), {\n      nodeType: \"block\",\n      type: node._type\n    });\n    const UnknownType = components.unknownType;\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n  }\n  function renderCustomBlock(node, index, key, isInline) {\n    const nodeOptions = {\n        value: node,\n        isInline,\n        index,\n        renderNode\n      },\n      Node = components.types[node._type];\n    return Node ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const {\n      node,\n      index,\n      isInline,\n      renderNode\n    } = options,\n    children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.buildMarksTree)(node).map((child, i) => renderNode({\n      node: child,\n      isInline: !0,\n      index: i,\n      renderNode\n    }));\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@portabletext/to-html/dist/pt-to-html.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   escapeHTML: () => (/* binding */ escapeHTML),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toHTML: () => (/* binding */ toHTML),\n/* harmony export */   uriLooksSafe: () => (/* binding */ uriLooksSafe)\n/* harmony export */ });\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\nconst _excluded = [\"block\", \"list\", \"listItem\", \"marks\", \"types\"],\n  _excluded2 = [\"listItem\"],\n  _excluded3 = [\"_key\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst defaultLists = {\n    number: ({\n      children\n    }) => `<ol>${children}</ol>`,\n    bullet: ({\n      children\n    }) => `<ul>${children}</ul>`\n  },\n  DefaultListItem = ({\n    children\n  }) => `<li>${children}</li>`,\n  allowedProtocols = [\"http\", \"https\", \"mailto\", \"tel\"],\n  charMap = {\n    \"&\": \"amp\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"'\": \"#x27\"\n  };\nfunction escapeHTML(str) {\n  return str.replace(/[&<>\"']/g, s => `&${charMap[s]};`);\n}\nfunction uriLooksSafe(uri) {\n  const url = (uri || \"\").trim(),\n    first = url.charAt(0);\n  if (first === \"#\" || first === \"/\") return !0;\n  const colonIndex = url.indexOf(\":\");\n  if (colonIndex === -1) return !0;\n  const proto = url.slice(0, colonIndex).toLowerCase();\n  if (allowedProtocols.indexOf(proto) !== -1) return !0;\n  const queryIndex = url.indexOf(\"?\");\n  if (queryIndex !== -1 && colonIndex > queryIndex) return !0;\n  const hashIndex = url.indexOf(\"#\");\n  return hashIndex !== -1 && colonIndex > hashIndex;\n}\nconst link = ({\n    children,\n    value\n  }) => {\n    const href = (value == null ? void 0 : value.href) || \"\";\n    return uriLooksSafe(href) ? `<a href=\"${escapeHTML(href)}\">${children}</a>` : children;\n  },\n  defaultMarks = {\n    em: ({\n      children\n    }) => `<em>${children}</em>`,\n    strong: ({\n      children\n    }) => `<strong>${children}</strong>`,\n    code: ({\n      children\n    }) => `<code>${children}</code>`,\n    underline: ({\n      children\n    }) => `<span style=\"text-decoration:underline\">${children}</span>`,\n    \"strike-through\": ({\n      children\n    }) => `<del>${children}</del>`,\n    link\n  },\n  getTemplate = (type, prop) => `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` option`,\n  unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\"),\n  unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\"),\n  unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\"),\n  unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\"),\n  unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst DefaultUnknownType = ({\n    value,\n    isInline\n  }) => {\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? `<span style=\"display:none\">${warning}</span>` : `<div style=\"display:none\">${warning}</div>`;\n  },\n  DefaultUnknownMark = ({\n    markType,\n    children\n  }) => `<span class=\"unknown__pt__mark__${markType}\">${children}</span>`,\n  DefaultUnknownBlockStyle = ({\n    children\n  }) => `<p>${children}</p>`,\n  DefaultUnknownList = ({\n    children\n  }) => `<ul>${children}</ul>`,\n  DefaultUnknownListItem = ({\n    children\n  }) => `<li>${children}</li>`,\n  DefaultHardBreak = () => \"<br/>\",\n  defaultPortableTextBlockStyles = {\n    normal: ({\n      children\n    }) => `<p>${children}</p>`,\n    blockquote: ({\n      children\n    }) => `<blockquote>${children}</blockquote>`,\n    h1: ({\n      children\n    }) => `<h1>${children}</h1>`,\n    h2: ({\n      children\n    }) => `<h2>${children}</h2>`,\n    h3: ({\n      children\n    }) => `<h3>${children}</h3>`,\n    h4: ({\n      children\n    }) => `<h4>${children}</h4>`,\n    h5: ({\n      children\n    }) => `<h5>${children}</h5>`,\n    h6: ({\n      children\n    }) => `<h6>${children}</h6>`\n  },\n  defaultComponents = {\n    types: {},\n    block: defaultPortableTextBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n  };\nfunction mergeComponents(parent, overrides) {\n  const {\n      block,\n      list,\n      listItem,\n      marks,\n      types\n    } = overrides,\n    rest = _objectWithoutProperties(overrides, _excluded);\n  return _objectSpread(_objectSpread({}, parent), {}, {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key],\n    parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction toHTML(value, options = {}) {\n  const {\n      components: componentOverrides,\n      onMissingComponent: missingComponentHandler = printWarning\n    } = options,\n    handleMissingComponent = missingComponentHandler || noop,\n    blocks = Array.isArray(value) ? value : [value],\n    nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.nestLists)(blocks, \"html\"),\n    components = componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents,\n    renderNode = getNodeRenderer(components, handleMissingComponent);\n  return nested.map((node, index) => renderNode({\n    node,\n    index,\n    isInline: !1,\n    renderNode\n  })).join(\"\");\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n      node,\n      index,\n      isInline\n    } = options;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitList)(node) ? renderList(node, index) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListItemBlock)(node) ? renderListItem(node, index) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitSpan)(node) ? renderSpan(node) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextBlock)(node) ? renderBlock(node, index, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitTextNode)(node) ? renderText(node) : renderCustomBlock(node, index, isInline);\n  }\n  function renderListItem(node, index) {\n    const tree = serializeBlock({\n        node,\n        index,\n        isInline: !1,\n        renderNode\n      }),\n      renderer = components.listItem,\n      itemHandler = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (itemHandler === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const {\n          listItem\n        } = node,\n        blockNode = _objectWithoutProperties(node, _excluded2);\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: !1,\n        renderNode\n      });\n    }\n    return itemHandler({\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    });\n  }\n  function renderList(node, index) {\n    const children = node.children.map((child, childIndex) => renderNode({\n        node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n          _key: `li-${index}-${childIndex}`\n        }),\n        index,\n        isInline: !1,\n        renderNode\n      })),\n      component = components.list,\n      list = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (list === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n    return list({\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children: children.join(\"\")\n    });\n  }\n  function renderSpan(node) {\n    const {\n        markDef,\n        markType,\n        markKey\n      } = node,\n      span = components.marks[markType] || components.unknownMark,\n      children = node.children.map((child, childIndex) => renderNode({\n        node: child,\n        index: childIndex,\n        isInline: !0,\n        renderNode\n      }));\n    return span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n      nodeType: \"mark\",\n      type: markType\n    }), span({\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children: children.join(\"\")\n    });\n  }\n  function renderBlock(node, index, isInline) {\n    const _serializeBlock = serializeBlock({\n        node,\n        index,\n        isInline,\n        renderNode\n      }),\n      {\n        _key\n      } = _serializeBlock,\n      props = _objectWithoutProperties(_serializeBlock, _excluded3),\n      style = props.node.style || \"normal\",\n      block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), block(_objectSpread(_objectSpread({}, props), {}, {\n      value: props.node,\n      renderNode\n    }));\n  }\n  function renderText(node) {\n    if (node.text === `\n`) {\n      const hardBreak = components.hardBreak;\n      return hardBreak ? hardBreak() : `\n`;\n    }\n    return escapeHTML(node.text);\n  }\n  function renderCustomBlock(value, index, isInline) {\n    const node = components.types[value._type];\n    return node || handleMissingComponent(unknownTypeWarning(value._type), {\n      nodeType: \"block\",\n      type: value._type\n    }), (node || components.unknownType)({\n      value,\n      isInline,\n      index,\n      renderNode\n    });\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const {\n      node,\n      index,\n      isInline,\n      renderNode\n    } = options,\n    children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.buildMarksTree)(node).map((child, i) => renderNode({\n      node: child,\n      isInline: !0,\n      index: i,\n      renderNode\n    }));\n  return {\n    _key: node._key || `block-${index}`,\n    children: children.join(\"\"),\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {}\n\n//# sourceMappingURL=pt-to-html.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;